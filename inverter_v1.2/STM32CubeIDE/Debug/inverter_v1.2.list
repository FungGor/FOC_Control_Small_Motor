
inverter_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  0002057c  2**0
                  CONTENTS
  4 .ARM          00000008  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e0  080064e0  0002057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000057c  20000000  080064e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000580  08006a64  00020580  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08006a64  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002057c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a360  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00036ce3  00000000  00000000  0004a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000626b  00000000  00000000  000815ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00087860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a52aa  00000000  00000000  00088c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002dc8  00000000  00000000  0012df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d918  00000000  00000000  00130cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0014e5e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  0014e6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00016765  00000000  00000000  00151d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000580 	.word	0x20000580
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006210 	.word	0x08006210

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000584 	.word	0x20000584
 80001d4:	08006210 	.word	0x08006210

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004e2:	e003      	b.n	80004ec <LoopCopyDataInit>

080004e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ea:	3104      	adds	r1, #4

080004ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004f4:	d3f6      	bcc.n	80004e4 <CopyDataInit>
  ldr  r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004f8:	e002      	b.n	8000500 <LoopFillZerobss>

080004fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004fc:	f842 3b04 	str.w	r3, [r2], #4

08000500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000504:	d3f9      	bcc.n	80004fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000506:	f002 fac1 	bl	8002a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f005 fe55 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f000 f86f 	bl	80005f0 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000518:	080064e8 	.word	0x080064e8
  ldr  r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000520:	2000057c 	.word	0x2000057c
  ldr  r2, =_sbss
 8000524:	20000580 	.word	0x20000580
  ldr  r3, = _ebss
 8000528:	200008a8 	.word	0x200008a8

0800052c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <BusFault_Handler>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	2300      	movs	r3, #0
{
 8000534:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800053a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000542:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4928      	ldr	r1, [pc, #160]	; (80005e8 <SystemClock_Config+0xb8>)
 8000548:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000554:	6408      	str	r0, [r1, #64]	; 0x40
 8000556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000558:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800055c:	9100      	str	r1, [sp, #0]
 800055e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	6813      	ldr	r3, [r2, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	6813      	ldr	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80005d0 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057e:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000586:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000588:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000598:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f002 fe89 	bl	80032b0 <HAL_RCC_OscConfig>
 800059e:	b108      	cbz	r0, 80005a4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80005d8 <SystemClock_Config+0xa8>
 80005a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80005ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80005e0 <SystemClock_Config+0xb0>
 80005b0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	4621      	mov	r1, r4
 80005b4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f003 f880 	bl	80036c0 <HAL_RCC_ClockConfig>
 80005c0:	b108      	cbz	r0, 80005c6 <SystemClock_Config+0x96>
 80005c2:	b672      	cpsid	i
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 80005c6:	f003 f84f 	bl	8003668 <HAL_RCC_EnableCSS>
}
 80005ca:	b014      	add	sp, #80	; 0x50
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	bf00      	nop
 80005d0:	00000001 	.word	0x00000001
 80005d4:	00010000 	.word	0x00010000
 80005d8:	0000000f 	.word	0x0000000f
 80005dc:	00000002 	.word	0x00000002
 80005e0:	00000000 	.word	0x00000000
 80005e4:	00001000 	.word	0x00001000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <main>:
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09c      	sub	sp, #112	; 0x70
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f4:	2400      	movs	r4, #0
  HAL_Init();
 80005f6:	f002 fa7b 	bl	8002af0 <HAL_Init>
  SystemClock_Config();
 80005fa:	f7ff ff99 	bl	8000530 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4ba9      	ldr	r3, [pc, #676]	; (80008a4 <main+0x2b4>)
 8000600:	9400      	str	r4, [sp, #0]
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000604:	4da8      	ldr	r5, [pc, #672]	; (80008a8 <main+0x2b8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4fa9      	ldr	r7, [pc, #676]	; (80008ac <main+0x2bc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000608:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800060c:	631a      	str	r2, [r3, #48]	; 0x30
 800060e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000610:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	9401      	str	r4, [sp, #4]
 800061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061c:	f042 0204 	orr.w	r2, r2, #4
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	f002 0204 	and.w	r2, r2, #4
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	9402      	str	r4, [sp, #8]
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	f042 0201 	orr.w	r2, r2, #1
 8000634:	631a      	str	r2, [r3, #48]	; 0x30
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	f002 0201 	and.w	r2, r2, #1
 800063c:	9202      	str	r2, [sp, #8]
 800063e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	9403      	str	r4, [sp, #12]
 8000642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000644:	f042 0202 	orr.w	r2, r2, #2
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800064c:	2620      	movs	r6, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000654:	4632      	mov	r2, r6
 8000656:	4621      	mov	r1, r4
 8000658:	a814      	add	r0, sp, #80	; 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	9b03      	ldr	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800065c:	f005 fdd0 	bl	8006200 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4a91      	ldr	r2, [pc, #580]	; (80008b0 <main+0x2c0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000670:	60eb      	str	r3, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000674:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000678:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067c:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 800068a:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ENABLE;
 800068e:	612c      	str	r4, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000690:	61ec      	str	r4, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	f002 fa58 	bl	8002b48 <HAL_ADC_Init>
 8000698:	b108      	cbz	r0, 800069e <main+0xae>
 800069a:	b672      	cpsid	i
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0xac>
  sConfigInjected.InjectedNbrOfConversion = 3;
 800069e:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 80006a0:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a4:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006a6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 80006aa:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 80006ac:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006b4:	a914      	add	r1, sp, #80	; 0x50
 80006b6:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006b8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006bc:	f002 fba0 	bl	8002e00 <HAL_ADCEx_InjectedConfigChannel>
 80006c0:	b108      	cbz	r0, 80006c6 <main+0xd6>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0xd4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80006c6:	220b      	movs	r2, #11
 80006c8:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006ca:	a914      	add	r1, sp, #80	; 0x50
 80006cc:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80006ce:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006d2:	f002 fb95 	bl	8002e00 <HAL_ADCEx_InjectedConfigChannel>
 80006d6:	b108      	cbz	r0, 80006dc <main+0xec>
 80006d8:	b672      	cpsid	i
  while (1)
 80006da:	e7fe      	b.n	80006da <main+0xea>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80006dc:	220a      	movs	r2, #10
 80006de:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e0:	a914      	add	r1, sp, #80	; 0x50
 80006e2:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80006e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e8:	f002 fb8a 	bl	8002e00 <HAL_ADCEx_InjectedConfigChannel>
 80006ec:	b108      	cbz	r0, 80006f2 <main+0x102>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x100>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	2201      	movs	r2, #1
 80006f6:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 80006fa:	f04f 0800 	mov.w	r8, #0
 80006fe:	f04f 0900 	mov.w	r9, #0
 8000702:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000706:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	f002 facb 	bl	8002ca4 <HAL_ADC_ConfigChannel>
 800070e:	4605      	mov	r5, r0
 8000710:	b108      	cbz	r0, 8000716 <main+0x126>
 8000712:	b672      	cpsid	i
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x124>
  htim1.Instance = TIM1;
 8000716:	4f67      	ldr	r7, [pc, #412]	; (80008b4 <main+0x2c4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000718:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 800071e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000722:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000726:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800072a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000730:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000734:	4601      	mov	r1, r0
 8000736:	4632      	mov	r2, r6
 8000738:	a814      	add	r0, sp, #80	; 0x50
 800073a:	f005 fd61 	bl	8006200 <memset>
  htim1.Instance = TIM1;
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <main+0x2c8>)
 8000740:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000742:	f640 2041 	movw	r0, #2625	; 0xa41
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	e9c7 0303 	strd	r0, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800074e:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000750:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000752:	617c      	str	r4, [r7, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000754:	607d      	str	r5, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000758:	f003 f876 	bl	8003848 <HAL_TIM_Base_Init>
 800075c:	b108      	cbz	r0, 8000762 <main+0x172>
 800075e:	b672      	cpsid	i
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x170>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000762:	4638      	mov	r0, r7
 8000764:	f003 f8de 	bl	8003924 <HAL_TIM_PWM_Init>
 8000768:	b108      	cbz	r0, 800076e <main+0x17e>
 800076a:	b672      	cpsid	i
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x17c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800076e:	2206      	movs	r2, #6
 8000770:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000772:	a906      	add	r1, sp, #24
 8000774:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000776:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800077a:	f003 fad5 	bl	8003d28 <HAL_TIM_SlaveConfigSynchro>
 800077e:	b108      	cbz	r0, 8000784 <main+0x194>
 8000780:	b672      	cpsid	i
  while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x192>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	a904      	add	r1, sp, #16
 8000786:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	e9cd 8904 	strd	r8, r9, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078c:	f003 fc5e 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4602      	mov	r2, r0
 8000792:	b108      	cbz	r0, 8000798 <main+0x1a8>
 8000794:	b672      	cpsid	i
  while (1)
 8000796:	e7fe      	b.n	8000796 <main+0x1a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2460      	movs	r4, #96	; 0x60
 800079a:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079c:	4638      	mov	r0, r7
 800079e:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80007a4:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80007a8:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ac:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	f003 f925 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 80007b2:	b108      	cbz	r0, 80007b8 <main+0x1c8>
 80007b4:	b672      	cpsid	i
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0x1c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b8:	483e      	ldr	r0, [pc, #248]	; (80008b4 <main+0x2c4>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	a90c      	add	r1, sp, #48	; 0x30
 80007be:	f003 f91d 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 80007c2:	b108      	cbz	r0, 80007c8 <main+0x1d8>
 80007c4:	b672      	cpsid	i
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <main+0x1d6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c8:	483a      	ldr	r0, [pc, #232]	; (80008b4 <main+0x2c4>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	a90c      	add	r1, sp, #48	; 0x30
 80007ce:	f003 f915 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 80007d2:	b108      	cbz	r0, 80007d8 <main+0x1e8>
 80007d4:	b672      	cpsid	i
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <main+0x1e6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80007d8:	2270      	movs	r2, #112	; 0x70
 80007da:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 80007de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e2:	4834      	ldr	r0, [pc, #208]	; (80008b4 <main+0x2c4>)
 80007e4:	220c      	movs	r2, #12
 80007e6:	a90c      	add	r1, sp, #48	; 0x30
 80007e8:	f003 f908 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 80007ec:	b108      	cbz	r0, 80007f2 <main+0x202>
 80007ee:	b672      	cpsid	i
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x200>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80007f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007fe:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000804:	2321      	movs	r3, #33	; 0x21
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	482b      	ldr	r0, [pc, #172]	; (80008b4 <main+0x2c4>)
 8000808:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
 800080e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000812:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000816:	f003 fc51 	bl	80040bc <HAL_TIMEx_ConfigBreakDeadTime>
 800081a:	4604      	mov	r4, r0
 800081c:	b108      	cbz	r0, 8000822 <main+0x232>
 800081e:	b672      	cpsid	i
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0x230>
  htim2.Instance = TIM2;
 8000822:	4d26      	ldr	r5, [pc, #152]	; (80008bc <main+0x2cc>)
  HAL_TIM_MspPostInit(&htim1);
 8000824:	4823      	ldr	r0, [pc, #140]	; (80008b4 <main+0x2c4>)
 8000826:	f001 fbe7 	bl	8001ff8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800082a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082e:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000830:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000832:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 800083a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800083e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000842:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000852:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	f002 fff8 	bl	8003848 <HAL_TIM_Base_Init>
 8000858:	b108      	cbz	r0, 800085e <main+0x26e>
 800085a:	b672      	cpsid	i
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x26c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	a914      	add	r1, sp, #80	; 0x50
 8000864:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000868:	f003 f9ba 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 800086c:	b108      	cbz	r0, 8000872 <main+0x282>
 800086e:	b672      	cpsid	i
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x280>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000872:	220b      	movs	r2, #11
 8000874:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000876:	a90c      	add	r1, sp, #48	; 0x30
 8000878:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800087a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 800087e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000882:	f003 fb87 	bl	8003f94 <HAL_TIMEx_HallSensor_Init>
 8000886:	b108      	cbz	r0, 800088c <main+0x29c>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x29a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800088c:	2250      	movs	r2, #80	; 0x50
 800088e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	a906      	add	r1, sp, #24
 8000892:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000894:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	f003 fbd8 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4602      	mov	r2, r0
 800089e:	b178      	cbz	r0, 80008c0 <main+0x2d0>
 80008a0:	b672      	cpsid	i
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <main+0x2b2>
 80008a4:	40023800 	.word	0x40023800
 80008a8:	200005a0 	.word	0x200005a0
 80008ac:	40012000 	.word	0x40012000
 80008b0:	0f000001 	.word	0x0f000001
 80008b4:	200005e8 	.word	0x200005e8
 80008b8:	40010000 	.word	0x40010000
 80008bc:	20000628 	.word	0x20000628
  huart2.Instance = USART2;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <main+0x350>)
 80008c2:	4c20      	ldr	r4, [pc, #128]	; (8000944 <main+0x354>)
  huart2.Init.BaudRate = 115200;
 80008c4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80008c8:	e9c3 4000 	strd	r4, r0, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	e9c3 2104 	strd	r2, r1, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008dc:	f003 fc18 	bl	8004110 <HAL_UART_Init>
 80008e0:	4604      	mov	r4, r0
 80008e2:	b108      	cbz	r0, 80008e8 <main+0x2f8>
 80008e4:	b672      	cpsid	i
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0x2f6>
  MX_MotorControl_Init();
 80008e8:	f001 f95c 	bl	8001ba4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80008ec:	4622      	mov	r2, r4
 80008ee:	2102      	movs	r1, #2
 80008f0:	2012      	movs	r0, #18
 80008f2:	f002 fb6f 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008f6:	2012      	movs	r0, #18
 80008f8:	f002 fbaa 	bl	8003050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008fc:	4622      	mov	r2, r4
 80008fe:	4621      	mov	r1, r4
 8000900:	2019      	movs	r0, #25
 8000902:	f002 fb67 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000906:	2019      	movs	r0, #25
 8000908:	f002 fba2 	bl	8003050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800090c:	2104      	movs	r1, #4
 800090e:	2201      	movs	r2, #1
 8000910:	2018      	movs	r0, #24
 8000912:	f002 fb5f 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000916:	2018      	movs	r0, #24
 8000918:	f002 fb9a 	bl	8003050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800091c:	4622      	mov	r2, r4
 800091e:	2103      	movs	r1, #3
 8000920:	201c      	movs	r0, #28
 8000922:	f002 fb57 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000926:	201c      	movs	r0, #28
 8000928:	f002 fb92 	bl	8003050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800092c:	2026      	movs	r0, #38	; 0x26
 800092e:	2201      	movs	r2, #1
 8000930:	2103      	movs	r1, #3
 8000932:	f002 fb4f 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f002 fb8a 	bl	8003050 <HAL_NVIC_EnableIRQ>
  while (1)
 800093c:	e7fe      	b.n	800093c <main+0x34c>
 800093e:	bf00      	nop
 8000940:	20000668 	.word	0x20000668
 8000944:	40004400 	.word	0x40004400

08000948 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000948:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 800094c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000950:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000952:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000956:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 800095a:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800095e:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000962:	4770      	bx	lr

08000964 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000964:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000968:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800096c:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000970:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000972:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000974:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000976:	4770      	bx	lr

08000978 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000978:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800097c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800097e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000982:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000984:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000986:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800098c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800098e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000990:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000992:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000994:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000998:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800099a:	b002      	add	sp, #8
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80009a0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80009a2:	2103      	movs	r1, #3
{
 80009a4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80009a6:	6800      	ldr	r0, [r0, #0]
 80009a8:	f005 fa42 	bl	8005e30 <STM_NextState>

  if ( RetVal == true )
 80009ac:	b108      	cbz	r0, 80009b2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009ae:	2301      	movs	r3, #1
 80009b0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80009b2:	bd10      	pop	{r4, pc}

080009b4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80009b4:	6800      	ldr	r0, [r0, #0]
 80009b6:	2107      	movs	r1, #7
 80009b8:	f005 ba3a 	b.w	8005e30 <STM_NextState>

080009bc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80009bc:	6800      	ldr	r0, [r0, #0]
 80009be:	f005 baad 	b.w	8005f1c <STM_FaultAcknowledged>
 80009c2:	bf00      	nop

080009c4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80009c4:	6800      	ldr	r0, [r0, #0]
 80009c6:	2101      	movs	r1, #1
 80009c8:	f005 ba32 	b.w	8005e30 <STM_NextState>

080009cc <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80009cc:	b178      	cbz	r0, 80009ee <MCI_ExecBufferedCommands+0x22>
{
 80009ce:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80009d0:	7e03      	ldrb	r3, [r0, #24]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	4604      	mov	r4, r0
 80009d6:	d000      	beq.n	80009da <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80009d8:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80009da:	7b01      	ldrb	r1, [r0, #12]
 80009dc:	2902      	cmp	r1, #2
 80009de:	d020      	beq.n	8000a22 <MCI_ExecBufferedCommands+0x56>
 80009e0:	2903      	cmp	r1, #3
 80009e2:	d005      	beq.n	80009f0 <MCI_ExecBufferedCommands+0x24>
 80009e4:	2901      	cmp	r1, #1
 80009e6:	d00c      	beq.n	8000a02 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80009e8:	2303      	movs	r3, #3
 80009ea:	7623      	strb	r3, [r4, #24]
}
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80009f0:	6882      	ldr	r2, [r0, #8]
 80009f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80009f6:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80009fa:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80009fc:	2302      	movs	r3, #2
 80009fe:	7623      	strb	r3, [r4, #24]
}
 8000a00:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a02:	6883      	ldr	r3, [r0, #8]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000a0a:	6840      	ldr	r0, [r0, #4]
 8000a0c:	f005 f94c 	bl	8005ca8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000a10:	8ae2      	ldrh	r2, [r4, #22]
 8000a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a16:	6860      	ldr	r0, [r4, #4]
 8000a18:	f005 f94a 	bl	8005cb0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d0e3      	beq.n	80009e8 <MCI_ExecBufferedCommands+0x1c>
 8000a20:	e7ec      	b.n	80009fc <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a22:	6883      	ldr	r3, [r0, #8]
 8000a24:	2100      	movs	r1, #0
 8000a26:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000a2a:	6840      	ldr	r0, [r0, #4]
 8000a2c:	f005 f93c 	bl	8005ca8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000a30:	8ae2      	ldrh	r2, [r4, #22]
 8000a32:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000a36:	6860      	ldr	r0, [r4, #4]
 8000a38:	f005 f93a 	bl	8005cb0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d0d3      	beq.n	80009e8 <MCI_ExecBufferedCommands+0x1c>
 8000a40:	e7dc      	b.n	80009fc <MCI_ExecBufferedCommands+0x30>
 8000a42:	bf00      	nop

08000a44 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000a44:	6800      	ldr	r0, [r0, #0]
 8000a46:	f005 ba67 	b.w	8005f18 <STM_GetState>
 8000a4a:	bf00      	nop

08000a4c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000a4c:	7e40      	ldrb	r0, [r0, #25]
 8000a4e:	4770      	bx	lr

08000a50 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000a50:	7b03      	ldrb	r3, [r0, #12]
 8000a52:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000a54:	bf0c      	ite	eq
 8000a56:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000a5a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000a60:	6840      	ldr	r0, [r0, #4]
 8000a62:	f005 b96d 	b.w	8005d40 <STC_StopRamp>
 8000a66:	bf00      	nop

08000a68 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000a68:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000a6a:	6840      	ldr	r0, [r0, #4]
 8000a6c:	f005 f902 	bl	8005c74 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000a74:	f005 b8a0 	b.w	8005bb8 <SPD_GetAvrgMecSpeedUnit>

08000a78 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000a78:	6840      	ldr	r0, [r0, #4]
 8000a7a:	f005 b905 	b.w	8005c88 <STC_GetMecSpeedRefUnit>
 8000a7e:	bf00      	nop

08000a80 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000a80:	6882      	ldr	r2, [r0, #8]
 8000a82:	6810      	ldr	r0, [r2, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	b282      	uxth	r2, r0
 8000a88:	f362 030f 	bfi	r3, r2, #0, #16
 8000a8c:	0c00      	lsrs	r0, r0, #16
 8000a8e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000a92:	b082      	sub	sp, #8
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	b002      	add	sp, #8
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000a9c:	6882      	ldr	r2, [r0, #8]
 8000a9e:	6850      	ldr	r0, [r2, #4]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b282      	uxth	r2, r0
 8000aa4:	f362 030f 	bfi	r3, r2, #0, #16
 8000aa8:	0c00      	lsrs	r0, r0, #16
 8000aaa:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000aae:	b082      	sub	sp, #8
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	b002      	add	sp, #8
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000ab8:	6882      	ldr	r2, [r0, #8]
 8000aba:	68d0      	ldr	r0, [r2, #12]
 8000abc:	2300      	movs	r3, #0
 8000abe:	b282      	uxth	r2, r0
 8000ac0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ac4:	0c00      	lsrs	r0, r0, #16
 8000ac6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000aca:	b082      	sub	sp, #8
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	b002      	add	sp, #8
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000ad4:	6882      	ldr	r2, [r0, #8]
 8000ad6:	6910      	ldr	r0, [r2, #16]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	b282      	uxth	r2, r0
 8000adc:	f362 030f 	bfi	r3, r2, #0, #16
 8000ae0:	0c00      	lsrs	r0, r0, #16
 8000ae2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ae6:	b082      	sub	sp, #8
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	b002      	add	sp, #8
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000af0:	6882      	ldr	r2, [r0, #8]
 8000af2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000af6:	2300      	movs	r3, #0
 8000af8:	b282      	uxth	r2, r0
 8000afa:	f362 030f 	bfi	r3, r2, #0, #16
 8000afe:	0c00      	lsrs	r0, r0, #16
 8000b00:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b04:	b082      	sub	sp, #8
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	b002      	add	sp, #8
 8000b0a:	4770      	bx	lr

08000b0c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000b0c:	6882      	ldr	r2, [r0, #8]
 8000b0e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000b12:	2300      	movs	r3, #0
 8000b14:	b282      	uxth	r2, r0
 8000b16:	f362 030f 	bfi	r3, r2, #0, #16
 8000b1a:	0c00      	lsrs	r0, r0, #16
 8000b1c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b20:	b082      	sub	sp, #8
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	b002      	add	sp, #8
 8000b26:	4770      	bx	lr

08000b28 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000b28:	6883      	ldr	r3, [r0, #8]
}
 8000b2a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000b2e:	4770      	bx	lr

08000b30 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000b30:	2300      	movs	r3, #0
 8000b32:	6882      	ldr	r2, [r0, #8]
 8000b34:	f361 030f 	bfi	r3, r1, #0, #16
 8000b38:	f361 431f 	bfi	r3, r1, #16, #16
 8000b3c:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000b44:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000b46:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000b4a:	f005 f939 	bl	8005dc0 <STC_GetDefaultIqdref>
 8000b4e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000b52:	8220      	strh	r0, [r4, #16]
 8000b54:	8263      	strh	r3, [r4, #18]
}
 8000b56:	bd10      	pop	{r4, pc}

08000b58 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000b58:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000b5c:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000b5e:	fb13 f201 	smulbb	r2, r3, r1
{
 8000b62:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000b66:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000b6a:	4250      	negs	r0, r2
 8000b6c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000b70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000b74:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000b76:	da05      	bge.n	8000b84 <MCM_Clarke+0x2c>
 8000b78:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000b7a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000b7e:	da0c      	bge.n	8000b9a <MCM_Clarke+0x42>
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <MCM_Clarke+0x50>)
 8000b82:	e001      	b.n	8000b88 <MCM_Clarke+0x30>
 8000b84:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f363 000f 	bfi	r0, r3, #0, #16
 8000b90:	b293      	uxth	r3, r2
 8000b92:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MCM_Clarke+0x50>)
 8000b9c:	b20a      	sxth	r2, r1
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	4602      	movlt	r2, r0
 8000ba4:	e7f0      	b.n	8000b88 <MCM_Clarke+0x30>
 8000ba6:	bf00      	nop
 8000ba8:	ffff8001 	.word	0xffff8001

08000bac <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000bac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000bb0:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bb4:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000bb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000bbc:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bbe:	d028      	beq.n	8000c12 <MCM_Trig_Functions+0x66>
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	d816      	bhi.n	8000bf6 <MCM_Trig_Functions+0x4a>
 8000bc8:	b361      	cbz	r1, 8000c24 <MCM_Trig_Functions+0x78>
 8000bca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000bce:	d109      	bne.n	8000be4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bd0:	b2c0      	uxtb	r0, r0
 8000bd2:	43c2      	mvns	r2, r0
 8000bd4:	491a      	ldr	r1, [pc, #104]	; (8000c40 <MCM_Trig_Functions+0x94>)
 8000bd6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bd8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bdc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000be0:	4252      	negs	r2, r2
 8000be2:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	f363 000f 	bfi	r0, r3, #0, #16
 8000bec:	b292      	uxth	r2, r2
 8000bee:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000bf2:	b002      	add	sp, #8
 8000bf4:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bf6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000bfa:	d1f3      	bne.n	8000be4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bfc:	4910      	ldr	r1, [pc, #64]	; (8000c40 <MCM_Trig_Functions+0x94>)
 8000bfe:	b2c0      	uxtb	r0, r0
 8000c00:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c02:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c06:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c08:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c0a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c0e:	b21b      	sxth	r3, r3
      break;
 8000c10:	e7e8      	b.n	8000be4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c12:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c14:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c16:	490a      	ldr	r1, [pc, #40]	; (8000c40 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c18:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c1a:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c1e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000c22:	e7df      	b.n	8000be4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c24:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c26:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c28:	4905      	ldr	r1, [pc, #20]	; (8000c40 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c2a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c2c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c34:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c36:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c38:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c3a:	b21b      	sxth	r3, r3
      break;
 8000c3c:	e7d2      	b.n	8000be4 <MCM_Trig_Functions+0x38>
 8000c3e:	bf00      	nop
 8000c40:	08006228 	.word	0x08006228

08000c44 <MCM_Park>:
{
 8000c44:	b530      	push	{r4, r5, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c4c:	4608      	mov	r0, r1
 8000c4e:	141c      	asrs	r4, r3, #16
{
 8000c50:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c52:	f7ff ffab 	bl	8000bac <MCM_Trig_Functions>
 8000c56:	b22d      	sxth	r5, r5
 8000c58:	fa0f fc80 	sxth.w	ip, r0
 8000c5c:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000c5e:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000c62:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000c66:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000c6a:	da05      	bge.n	8000c78 <MCM_Park+0x34>
 8000c6c:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000c6e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000c72:	da22      	bge.n	8000cba <MCM_Park+0x76>
 8000c74:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <MCM_Park+0x84>)
 8000c76:	e001      	b.n	8000c7c <MCM_Park+0x38>
 8000c78:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000c7c:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000c80:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000c84:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000c88:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000c8c:	da04      	bge.n	8000c98 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000c8e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000c92:	da0c      	bge.n	8000cae <MCM_Park+0x6a>
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MCM_Park+0x84>)
 8000c96:	e001      	b.n	8000c9c <MCM_Park+0x58>
 8000c98:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000c9c:	b28a      	uxth	r2, r1
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f362 000f 	bfi	r0, r2, #0, #16
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000caa:	b005      	add	sp, #20
 8000cac:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MCM_Park+0x84>)
 8000cb0:	b213      	sxth	r3, r2
 8000cb2:	4283      	cmp	r3, r0
 8000cb4:	bfb8      	it	lt
 8000cb6:	4603      	movlt	r3, r0
 8000cb8:	e7f0      	b.n	8000c9c <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cba:	4903      	ldr	r1, [pc, #12]	; (8000cc8 <MCM_Park+0x84>)
 8000cbc:	b212      	sxth	r2, r2
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	bfb8      	it	lt
 8000cc2:	4611      	movlt	r1, r2
 8000cc4:	e7da      	b.n	8000c7c <MCM_Park+0x38>
 8000cc6:	bf00      	nop
 8000cc8:	ffff8001 	.word	0xffff8001

08000ccc <MCM_Rev_Park>:
{
 8000ccc:	b530      	push	{r4, r5, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cd4:	4608      	mov	r0, r1
{
 8000cd6:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cd8:	f7ff ff68 	bl	8000bac <MCM_Trig_Functions>
 8000cdc:	1424      	asrs	r4, r4, #16
 8000cde:	1402      	asrs	r2, r0, #16
 8000ce0:	b22d      	sxth	r5, r5
 8000ce2:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000ce4:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000ce8:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000cec:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000cf0:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000cf4:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f363 000f 	bfi	r0, r3, #0, #16
 8000cfe:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000d02:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000d06:	b005      	add	sp, #20
 8000d08:	bd30      	pop	{r4, r5, pc}
 8000d0a:	bf00      	nop

08000d0c <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000d0c:	2226      	movs	r2, #38	; 0x26
{
 8000d0e:	b538      	push	{r3, r4, r5, lr}
 8000d10:	fb00 f202 	mul.w	r2, r0, r2
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000d16:	2400      	movs	r4, #0
 8000d18:	509c      	str	r4, [r3, r2]
{
 8000d1a:	4605      	mov	r5, r0
 8000d1c:	f102 0108 	add.w	r1, r2, #8
 8000d20:	1898      	adds	r0, r3, r2
 8000d22:	3210      	adds	r2, #16
 8000d24:	4419      	add	r1, r3
 8000d26:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000d2a:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d2c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d30:	604c      	str	r4, [r1, #4]
 8000d32:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d34:	f8c3 4006 	str.w	r4, [r3, #6]
 8000d38:	f8c3 400a 	str.w	r4, [r3, #10]
 8000d3c:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d40:	4621      	mov	r1, r4
 8000d42:	f003 ff97 	bl	8004c74 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <FOC_Clear+0x68>)
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d4e:	f003 ff91 	bl	8004c74 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <FOC_Clear+0x6c>)
 8000d54:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d58:	f004 ff8e 	bl	8005c78 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <FOC_Clear+0x70>)
 8000d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d66:	f004 b99b 	b.w	80050a0 <PWMC_SwitchOffPWM>
 8000d6a:	bf00      	nop
 8000d6c:	200006d4 	.word	0x200006d4
 8000d70:	20000790 	.word	0x20000790
 8000d74:	2000078c 	.word	0x2000078c
 8000d78:	2000079c 	.word	0x2000079c
 8000d7c:	200007a4 	.word	0x200007a4

08000d80 <MCboot>:
{
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000d84:	4e5b      	ldr	r6, [pc, #364]	; (8000ef4 <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d86:	4d5c      	ldr	r5, [pc, #368]	; (8000ef8 <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000d88:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000f40 <MCboot+0x1c0>
  HALL_Init (&HALL_M1);
 8000d8c:	4f5b      	ldr	r7, [pc, #364]	; (8000efc <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d8e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000f44 <MCboot+0x1c4>
  PID_HandleInit(&PIDIqHandle_M1);
 8000d92:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8000f48 <MCboot+0x1c8>
  PID_HandleInit(&PIDIdHandle_M1);
 8000d96:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8000f4c <MCboot+0x1cc>
{
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8000d9e:	4630      	mov	r0, r6
{
 8000da0:	e9cd 3101 	strd	r3, r1, [sp, #4]
  STM_Init(&STM[M1]);
 8000da4:	f005 f822 	bl	8005dec <STM_Init>
  bMCBootCompleted = 0;
 8000da8:	4a55      	ldr	r2, [pc, #340]	; (8000f00 <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 8000daa:	4b56      	ldr	r3, [pc, #344]	; (8000f04 <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000dac:	4856      	ldr	r0, [pc, #344]	; (8000f08 <MCboot+0x188>)
 8000dae:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8000db0:	2400      	movs	r4, #0
 8000db2:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000db4:	4a55      	ldr	r2, [pc, #340]	; (8000f0c <MCboot+0x18c>)
 8000db6:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000db8:	f004 fbf8 	bl	80055ac <R3_1_Init>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dbc:	4d54      	ldr	r5, [pc, #336]	; (8000f10 <MCboot+0x190>)
  startTimers();
 8000dbe:	f003 ffe1 	bl	8004d84 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	f003 ff42 	bl	8004c4c <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dc8:	4b52      	ldr	r3, [pc, #328]	; (8000f14 <MCboot+0x194>)
 8000dca:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000dcc:	f8c9 8000 	str.w	r8, [r9]
  HALL_Init (&HALL_M1);
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	f003 fab5 	bl	8004340 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000dd6:	463a      	mov	r2, r7
 8000dd8:	f8d9 1000 	ldr.w	r1, [r9]
 8000ddc:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000dde:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8000f50 <MCboot+0x1d0>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000de2:	f004 ff31 	bl	8005c48 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000de6:	4658      	mov	r0, fp
 8000de8:	f003 ff30 	bl	8004c4c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000dec:	4650      	mov	r0, sl
 8000dee:	f003 ff2d 	bl	8004c4c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000df2:	4949      	ldr	r1, [pc, #292]	; (8000f18 <MCboot+0x198>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000df4:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <MCboot+0x19c>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000df6:	f8c1 b000 	str.w	fp, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000dfa:	4849      	ldr	r0, [pc, #292]	; (8000f20 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000dfc:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 8000e00:	f8df b150 	ldr.w	fp, [pc, #336]	; 8000f54 <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e04:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8000e08:	f004 fe7c 	bl	8005b04 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e0c:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <MCboot+0x1a4>)
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MCboot+0x1a8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e10:	f8df a144 	ldr.w	sl, [pc, #324]	; 8000f58 <MCboot+0x1d8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e14:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8000e16:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e18:	f8d8 2000 	ldr.w	r2, [r8]
 8000e1c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e20:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000e24:	f003 fece 	bl	8004bc4 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e28:	4940      	ldr	r1, [pc, #256]	; (8000f2c <MCboot+0x1ac>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e2a:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <MCboot+0x1b0>)
 8000e2c:	4841      	ldr	r0, [pc, #260]	; (8000f34 <MCboot+0x1b4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e2e:	f8c1 b000 	str.w	fp, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e32:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000e34:	f004 feb4 	bl	8005ba0 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e38:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ff65 	bl	8000d0c <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e42:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e46:	6828      	ldr	r0, [r5, #0]
 8000e48:	f004 ffba 	bl	8005dc0 <STC_GetDefaultIqdref>
 8000e4c:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e50:	6828      	ldr	r0, [r5, #0]
 8000e52:	f004 ffb5 	bl	8005dc0 <STC_GetDefaultIqdref>
 8000e56:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8000e5a:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e5e:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 8000e60:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8000f5c <MCboot+0x1dc>
 8000e64:	4834      	ldr	r0, [pc, #208]	; (8000f38 <MCboot+0x1b8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e66:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000e68:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	f7ff fd6b 	bl	8000948 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000e72:	f8da 3000 	ldr.w	r3, [sl]
 8000e76:	6828      	ldr	r0, [r5, #0]
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	f004 ff97 	bl	8005dac <STC_GetMecSpeedRefUnitDefault>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	4601      	mov	r1, r0
 8000e82:	4622      	mov	r2, r4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fd6d 	bl	8000964 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000e8a:	9801      	ldr	r0, [sp, #4]
 8000e8c:	f8da 3000 	ldr.w	r3, [sl]
 8000e90:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MCboot+0x178>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e94:	4820      	ldr	r0, [pc, #128]	; (8000f18 <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000e96:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000e98:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000e9c:	4d23      	ldr	r5, [pc, #140]	; (8000f2c <MCboot+0x1ac>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e9e:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000ea2:	481e      	ldr	r0, [pc, #120]	; (8000f1c <MCboot+0x19c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000ea4:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000ea8:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000eaa:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000eae:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MCboot+0x1bc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000eb4:	6800      	ldr	r0, [r0, #0]
 8000eb6:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8000eb8:	e9c3 2609 	strd	r2, r6, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000ebc:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000ec0:	e9c3 580b 	strd	r5, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000ec4:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000ec8:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000ecc:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8000ed0:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <MCboot+0x180>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000ed6:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000ed8:	619f      	str	r7, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000eda:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000ede:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000ee0:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8000ee2:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000ee4:	9902      	ldr	r1, [sp, #8]
 8000ee6:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8000ee8:	f882 b000 	strb.w	fp, [r2]
}
 8000eec:	b007      	add	sp, #28
 8000eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000076c 	.word	0x2000076c
 8000ef8:	200007a4 	.word	0x200007a4
 8000efc:	200000b4 	.word	0x200000b4
 8000f00:	20000772 	.word	0x20000772
 8000f04:	20000784 	.word	0x20000784
 8000f08:	20000314 	.word	0x20000314
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	2000079c 	.word	0x2000079c
 8000f14:	200003d0 	.word	0x200003d0
 8000f18:	20000790 	.word	0x20000790
 8000f1c:	2000078c 	.word	0x2000078c
 8000f20:	200003a8 	.word	0x200003a8
 8000f24:	20000788 	.word	0x20000788
 8000f28:	20000200 	.word	0x20000200
 8000f2c:	200007a0 	.word	0x200007a0
 8000f30:	20000798 	.word	0x20000798
 8000f34:	20000390 	.word	0x20000390
 8000f38:	20000750 	.word	0x20000750
 8000f3c:	200006fc 	.word	0x200006fc
 8000f40:	200001d4 	.word	0x200001d4
 8000f44:	20000794 	.word	0x20000794
 8000f48:	200001a8 	.word	0x200001a8
 8000f4c:	2000017c 	.word	0x2000017c
 8000f50:	20000780 	.word	0x20000780
 8000f54:	20000404 	.word	0x20000404
 8000f58:	200006d4 	.word	0x200006d4
 8000f5c:	2000077c 	.word	0x2000077c

08000f60 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8000f64:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f66:	4c08      	ldr	r4, [pc, #32]	; (8000f88 <FOC_CalcCurrRef+0x24>)
 8000f68:	2326      	movs	r3, #38	; 0x26
 8000f6a:	fb03 4400 	mla	r4, r3, r0, r4
 8000f6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f72:	b103      	cbz	r3, 8000f76 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000f74:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <FOC_CalcCurrRef+0x28>)
 8000f78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f7c:	f004 fee4 	bl	8005d48 <STC_CalcTorqueReference>
 8000f80:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000f82:	8220      	strh	r0, [r4, #16]
}
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	200006d4 	.word	0x200006d4
 8000f8c:	2000079c 	.word	0x2000079c

08000f90 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000f90:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000f92:	8018      	strh	r0, [r3, #0]
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000774 	.word	0x20000774

08000f9c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000f9e:	8818      	ldrh	r0, [r3, #0]
 8000fa0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000fa2:	fab0 f080 	clz	r0, r0
 8000fa6:	0940      	lsrs	r0, r0, #5
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000774 	.word	0x20000774

08000fb0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000fb2:	8018      	strh	r0, [r3, #0]
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000778 	.word	0x20000778

08000fbc <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000fbe:	8818      	ldrh	r0, [r3, #0]
 8000fc0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000fc2:	fab0 f080 	clz	r0, r0
 8000fc6:	0940      	lsrs	r0, r0, #5
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000778 	.word	0x20000778

08000fd0 <TSK_MediumFrequencyTaskM1>:
{
 8000fd0:	b530      	push	{r4, r5, lr}
 8000fd2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000fd4:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000fd6:	f10d 0106 	add.w	r1, sp, #6
 8000fda:	484d      	ldr	r0, [pc, #308]	; (8001110 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8000fdc:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000fe0:	f003 fb04 	bl	80045ec <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000fe4:	4d4b      	ldr	r5, [pc, #300]	; (8001114 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000fe6:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000fe8:	6828      	ldr	r0, [r5, #0]
 8000fea:	f003 fe95 	bl	8004d18 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000fee:	484a      	ldr	r0, [pc, #296]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 8000ff0:	f004 ff92 	bl	8005f18 <STM_GetState>
  switch ( StateM1 )
 8000ff4:	1ec3      	subs	r3, r0, #3
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d80d      	bhi.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
 8000ffa:	e8df f003 	tbb	[pc, r3]
 8000ffe:	2b1f      	.short	0x2b1f
 8001000:	65524330 	.word	0x65524330
 8001004:	0c0c0c08 	.word	0x0c0c0c08
 8001008:	6e0c0c0c 	.word	0x6e0c0c0c
 800100c:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 800100e:	4842      	ldr	r0, [pc, #264]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 8001010:	2100      	movs	r1, #0
 8001012:	f004 ff0d 	bl	8005e30 <STM_NextState>
}
 8001016:	b003      	add	sp, #12
 8001018:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 800101a:	483d      	ldr	r0, [pc, #244]	; (8001110 <TSK_MediumFrequencyTaskM1+0x140>)
 800101c:	f003 fa1e 	bl	800445c <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001020:	483d      	ldr	r0, [pc, #244]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 8001022:	2104      	movs	r1, #4
 8001024:	f004 ff04 	bl	8005e30 <STM_NextState>
 8001028:	2800      	cmp	r0, #0
 800102a:	d0f4      	beq.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fe6d 	bl	8000d0c <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <TSK_MediumFrequencyTaskM1+0x14c>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f004 f997 	bl	8005368 <R3_1_SwitchOnPWM>
 800103a:	e7ec      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <TSK_MediumFrequencyTaskM1+0x14c>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f004 f968 	bl	8005314 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffa3 	bl	8000f90 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800104a:	2110      	movs	r1, #16
 800104c:	4832      	ldr	r0, [pc, #200]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 800104e:	f004 feef 	bl	8005e30 <STM_NextState>
    break;
 8001052:	e7e0      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001054:	2105      	movs	r1, #5
 8001056:	4830      	ldr	r0, [pc, #192]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 8001058:	f004 feea 	bl	8005e30 <STM_NextState>
    break;
 800105c:	e7db      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ff7e 	bl	8000f60 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ff7d 	bl	8000f64 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800106a:	2106      	movs	r1, #6
 800106c:	482a      	ldr	r0, [pc, #168]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 800106e:	f004 fedf 	bl	8005e30 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <TSK_MediumFrequencyTaskM1+0x150>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f004 feb1 	bl	8005ddc <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <TSK_MediumFrequencyTaskM1+0x154>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f7ff fca5 	bl	80009cc <MCI_ExecBufferedCommands>
    break;
 8001082:	e7c8      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <TSK_MediumFrequencyTaskM1+0x154>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f7ff fca0 	bl	80009cc <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff69 	bl	8000f64 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001092:	2c00      	cmp	r4, #0
 8001094:	d1bf      	bne.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001096:	4622      	mov	r2, r4
 8001098:	2120      	movs	r1, #32
 800109a:	481f      	ldr	r0, [pc, #124]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 800109c:	f004 feac 	bl	8005df8 <STM_FaultProcessing>
 80010a0:	e7b9      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <TSK_MediumFrequencyTaskM1+0x14c>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f004 f9a9 	bl	80053fc <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe2e 	bl	8000d0c <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80010b0:	6828      	ldr	r0, [r5, #0]
 80010b2:	f003 fd45 	bl	8004b40 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80010b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010ba:	f7ff ff79 	bl	8000fb0 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80010be:	2108      	movs	r1, #8
 80010c0:	4815      	ldr	r0, [pc, #84]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 80010c2:	f004 feb5 	bl	8005e30 <STM_NextState>
    break;
 80010c6:	e7a6      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80010c8:	f7ff ff78 	bl	8000fbc <TSK_StopPermanencyTimeHasElapsedM1>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d0a2      	beq.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 80010d0:	2109      	movs	r1, #9
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 80010d4:	f004 feac 	bl	8005e30 <STM_NextState>
 80010d8:	e79d      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80010da:	f7ff ff5f 	bl	8000f9c <TSK_ChargeBootCapDelayHasElapsedM1>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d099      	beq.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <TSK_MediumFrequencyTaskM1+0x14c>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f003 ffdc 	bl	80050a4 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80010ec:	2111      	movs	r1, #17
 80010ee:	480a      	ldr	r0, [pc, #40]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 80010f0:	f004 fe9e 	bl	8005e30 <STM_NextState>
 80010f4:	e78f      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <TSK_MediumFrequencyTaskM1+0x14c>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f003 ffd2 	bl	80050a4 <PWMC_CurrentReadingCalibr>
 8001100:	2800      	cmp	r0, #0
 8001102:	d088      	beq.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 8001104:	2112      	movs	r1, #18
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <TSK_MediumFrequencyTaskM1+0x148>)
 8001108:	f004 fe92 	bl	8005e30 <STM_NextState>
 800110c:	e783      	b.n	8001016 <TSK_MediumFrequencyTaskM1+0x46>
 800110e:	bf00      	nop
 8001110:	200000b4 	.word	0x200000b4
 8001114:	20000788 	.word	0x20000788
 8001118:	2000076c 	.word	0x2000076c
 800111c:	200007a4 	.word	0x200007a4
 8001120:	2000079c 	.word	0x2000079c
 8001124:	2000077c 	.word	0x2000077c

08001128 <MC_Scheduler>:
{
 8001128:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MC_Scheduler+0x48>)
 800112c:	781c      	ldrb	r4, [r3, #0]
 800112e:	2c01      	cmp	r4, #1
 8001130:	d000      	beq.n	8001134 <MC_Scheduler+0xc>
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001134:	4d0f      	ldr	r5, [pc, #60]	; (8001174 <MC_Scheduler+0x4c>)
 8001136:	882b      	ldrh	r3, [r5, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	b1ab      	cbz	r3, 8001168 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800113c:	882b      	ldrh	r3, [r5, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <MC_Scheduler+0x50>)
 8001146:	8813      	ldrh	r3, [r2, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	b11b      	cbz	r3, 8001154 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800114c:	8813      	ldrh	r3, [r2, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <MC_Scheduler+0x54>)
 8001156:	8813      	ldrh	r3, [r2, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0e9      	beq.n	8001132 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800115e:	8813      	ldrh	r3, [r2, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	8013      	strh	r3, [r2, #0]
}
 8001166:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001168:	f7ff ff32 	bl	8000fd0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800116c:	802c      	strh	r4, [r5, #0]
 800116e:	e7e9      	b.n	8001144 <MC_Scheduler+0x1c>
 8001170:	20000772 	.word	0x20000772
 8001174:	20000776 	.word	0x20000776
 8001178:	20000774 	.word	0x20000774
 800117c:	20000778 	.word	0x20000778

08001180 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001184:	4830      	ldr	r0, [pc, #192]	; (8001248 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001186:	4f31      	ldr	r7, [pc, #196]	; (800124c <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001188:	4c31      	ldr	r4, [pc, #196]	; (8001250 <TSK_HighFrequencyTask+0xd0>)
{
 800118a:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 800118c:	f003 fa10 	bl	80045b0 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <TSK_HighFrequencyTask+0xd4>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f004 fd6e 	bl	8005c74 <STC_GetSpeedSensor>
 8001198:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800119a:	f004 fd09 	bl	8005bb0 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800119e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80011a0:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f003 fe44 	bl	8004e30 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	f7ff fcd5 	bl	8000b58 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011ae:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80011b0:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011b2:	f7ff fd47 	bl	8000c44 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011b6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011ba:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011bc:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011be:	1ac9      	subs	r1, r1, r3
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <TSK_HighFrequencyTask+0xd8>)
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	f003 fd62 	bl	8004c8c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80011c8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80011cc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80011d0:	1ac9      	subs	r1, r1, r3
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011d4:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f003 fd58 	bl	8004c8c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <TSK_HighFrequencyTask+0xe0>)
 80011de:	f8ad 8008 	strh.w	r8, [sp, #8]
 80011e2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80011e6:	9902      	ldr	r1, [sp, #8]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f003 f84f 	bl	800428c <Circle_Limitation>
 80011ee:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80011f0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80011f2:	fa0f f883 	sxth.w	r8, r3
 80011f6:	141d      	asrs	r5, r3, #16
 80011f8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80011fa:	f004 fce1 	bl	8005bc0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80011fe:	4631      	mov	r1, r6
 8001200:	9802      	ldr	r0, [sp, #8]
 8001202:	f7ff fd63 	bl	8000ccc <MCM_Rev_Park>
 8001206:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001208:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800120a:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800120c:	f003 fe12 	bl	8004e34 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001210:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001212:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001214:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001216:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001218:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 800121a:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 800121c:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001220:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001222:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001224:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001226:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001228:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 800122c:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 800122e:	d003      	beq.n	8001238 <TSK_HighFrequencyTask+0xb8>
}
 8001230:	2000      	movs	r0, #0
 8001232:	b006      	add	sp, #24
 8001234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <TSK_HighFrequencyTask+0xe4>)
 800123c:	f004 fddc 	bl	8005df8 <STM_FaultProcessing>
}
 8001240:	2000      	movs	r0, #0
 8001242:	b006      	add	sp, #24
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001248:	200000b4 	.word	0x200000b4
 800124c:	200007a4 	.word	0x200007a4
 8001250:	200006d4 	.word	0x200006d4
 8001254:	2000079c 	.word	0x2000079c
 8001258:	20000790 	.word	0x20000790
 800125c:	2000078c 	.word	0x2000078c
 8001260:	20000784 	.word	0x20000784
 8001264:	2000076c 	.word	0x2000076c

08001268 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800126c:	4e20      	ldr	r6, [pc, #128]	; (80012f0 <TSK_SafetyTask_PWMOFF+0x88>)
{
 800126e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001270:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001274:	f003 fcb8 	bl	8004be8 <NTC_CalcAvTemp>
 8001278:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800127a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800127e:	f003 ff3b 	bl	80050f8 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001282:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001286:	4328      	orrs	r0, r5
 8001288:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800128a:	b334      	cbz	r4, 80012da <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800128c:	4f19      	ldr	r7, [pc, #100]	; (80012f4 <TSK_SafetyTask_PWMOFF+0x8c>)
 800128e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001292:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001296:	43ea      	mvns	r2, r5
 8001298:	b292      	uxth	r2, r2
 800129a:	4629      	mov	r1, r5
 800129c:	4638      	mov	r0, r7
 800129e:	f004 fdab 	bl	8005df8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80012a2:	4638      	mov	r0, r7
 80012a4:	f004 fe38 	bl	8005f18 <STM_GetState>
 80012a8:	280a      	cmp	r0, #10
 80012aa:	d002      	beq.n	80012b2 <TSK_SafetyTask_PWMOFF+0x4a>
 80012ac:	280b      	cmp	r0, #11
 80012ae:	d00e      	beq.n	80012ce <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80012b6:	f003 fef3 	bl	80050a0 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff fd26 	bl	8000d0c <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <TSK_SafetyTask_PWMOFF+0x90>)
 80012c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80012c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80012ca:	f003 bc39 	b.w	8004b40 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80012d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012d6:	f003 bee3 	b.w	80050a0 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <TSK_SafetyTask_PWMOFF+0x94>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f004 fc29 	bl	8005b34 <RVBS_CalcAvVbus>
 80012e2:	f020 0008 	bic.w	r0, r0, #8
 80012e6:	4305      	orrs	r5, r0
 80012e8:	b2ad      	uxth	r5, r5
 80012ea:	e7cf      	b.n	800128c <TSK_SafetyTask_PWMOFF+0x24>
 80012ec:	200007a0 	.word	0x200007a0
 80012f0:	200007a4 	.word	0x200007a4
 80012f4:	2000076c 	.word	0x2000076c
 80012f8:	20000788 	.word	0x20000788
 80012fc:	20000780 	.word	0x20000780

08001300 <TSK_SafetyTask>:
{
 8001300:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <TSK_SafetyTask+0x1c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d000      	beq.n	800130c <TSK_SafetyTask+0xc>
}
 800130a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ffab 	bl	8001268 <TSK_SafetyTask_PWMOFF>
}
 8001312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001316:	f000 bd81 	b.w	8001e1c <RCM_ExecUserConv>
 800131a:	bf00      	nop
 800131c:	20000772 	.word	0x20000772

08001320 <MC_RunMotorControlTasks>:
{
 8001320:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MC_RunMotorControlTasks+0x1c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b903      	cbnz	r3, 800132a <MC_RunMotorControlTasks+0xa>
}
 8001328:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800132a:	f7ff fefd 	bl	8001128 <MC_Scheduler>
    TSK_SafetyTask();
 800132e:	f7ff ffe7 	bl	8001300 <TSK_SafetyTask>
}
 8001332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001336:	f001 b803 	b.w	8002340 <UI_Scheduler>
 800133a:	bf00      	nop
 800133c:	20000772 	.word	0x20000772

08001340 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <TSK_HardwareFaultTask+0x18>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	f004 f859 	bl	80053fc <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800134a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <TSK_HardwareFaultTask+0x1c>)
 8001350:	2200      	movs	r2, #0
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	f004 bd50 	b.w	8005df8 <STM_FaultProcessing>
 8001358:	200007a4 	.word	0x200007a4
 800135c:	2000076c 	.word	0x2000076c

08001360 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001360:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001362:	4a36      	ldr	r2, [pc, #216]	; (800143c <mc_lock_pins+0xdc>)
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <mc_lock_pins+0xe0>)
 8001366:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001368:	2108      	movs	r1, #8
 800136a:	61d1      	str	r1, [r2, #28]
 800136c:	b08f      	sub	sp, #60	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800136e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001370:	69d3      	ldr	r3, [r2, #28]
 8001372:	930d      	str	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001374:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001378:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 800137c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001380:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001382:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001384:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8001388:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 800138a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138c:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001390:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001394:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001396:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001398:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800139a:	69d9      	ldr	r1, [r3, #28]
 800139c:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 800139e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a0:	4929      	ldr	r1, [pc, #164]	; (8001448 <mc_lock_pins+0xe8>)
 80013a2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80013a8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013aa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ac:	69d9      	ldr	r1, [r3, #28]
 80013ae:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 80013b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b2:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b6:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ba:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013bc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013be:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013c0:	69d9      	ldr	r1, [r3, #28]
 80013c2:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 80013c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ca:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013cc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ce:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013d2:	69d6      	ldr	r6, [r2, #28]
 80013d4:	9608      	str	r6, [sp, #32]
  (void) temp;
 80013d6:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013da:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013dc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013de:	69d8      	ldr	r0, [r3, #28]
 80013e0:	9007      	str	r0, [sp, #28]
  (void) temp;
 80013e2:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e4:	4819      	ldr	r0, [pc, #100]	; (800144c <mc_lock_pins+0xec>)
 80013e6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013e8:	2502      	movs	r5, #2
 80013ea:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ec:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ee:	69d2      	ldr	r2, [r2, #28]
 80013f0:	9206      	str	r2, [sp, #24]
  (void) temp;
 80013f2:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <mc_lock_pins+0xf0>)
 80013f6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013f8:	2680      	movs	r6, #128	; 0x80
 80013fa:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013fc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	9205      	str	r2, [sp, #20]
  (void) temp;
 8001402:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001404:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001406:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001408:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800140a:	69da      	ldr	r2, [r3, #28]
 800140c:	9204      	str	r2, [sp, #16]
  (void) temp;
 800140e:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001410:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001412:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001414:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <mc_lock_pins+0xf4>)
  (void) temp;
 800141c:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800141e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001420:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001422:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001428:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800142c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001434:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001436:	b00f      	add	sp, #60	; 0x3c
 8001438:	bc70      	pop	{r4, r5, r6}
 800143a:	4770      	bx	lr
 800143c:	40020400 	.word	0x40020400
 8001440:	00010008 	.word	0x00010008
 8001444:	40020000 	.word	0x40020000
 8001448:	00010100 	.word	0x00010100
 800144c:	00010002 	.word	0x00010002
 8001450:	00010080 	.word	0x00010080
 8001454:	40020800 	.word	0x40020800

08001458 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	460c      	mov	r4, r1
 800145c:	b08d      	sub	sp, #52	; 0x34
 800145e:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001460:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001462:	0962      	lsrs	r2, r4, #5
{
 8001464:	4605      	mov	r5, r0
 8001466:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001468:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 800146c:	d122      	bne.n	80014b4 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800146e:	2c12      	cmp	r4, #18
 8001470:	d814      	bhi.n	800149c <MCP_ReceivedFrame+0x44>
 8001472:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001476:	0016      	.short	0x0016
 8001478:	00de0205 	.word	0x00de0205
 800147c:	001301f9 	.word	0x001301f9
 8001480:	004c0013 	.word	0x004c0013
 8001484:	008b0076 	.word	0x008b0076
 8001488:	029700bc 	.word	0x029700bc
 800148c:	02cf02a8 	.word	0x02cf02a8
 8001490:	001302bf 	.word	0x001302bf
 8001494:	00130013 	.word	0x00130013
 8001498:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800149c:	2301      	movs	r3, #1
 800149e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80014a2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80014a6:	2301      	movs	r3, #1
 80014a8:	f10d 020e 	add.w	r2, sp, #14
 80014ac:	21ff      	movs	r1, #255	; 0xff
 80014ae:	47a0      	blx	r4
    }
  }
}
 80014b0:	b00d      	add	sp, #52	; 0x34
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80014b4:	3a01      	subs	r2, #1
 80014b6:	f000 ff83 	bl	80023c0 <UI_SetReg>
 80014ba:	b1c8      	cbz	r0, 80014f0 <MCP_ReceivedFrame+0x98>
  switch (Code)
 80014bc:	f004 041f 	and.w	r4, r4, #31
 80014c0:	2c12      	cmp	r4, #18
 80014c2:	f200 82da 	bhi.w	8001a7a <MCP_ReceivedFrame+0x622>
 80014c6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80014ca:	008f      	.short	0x008f
 80014cc:	00b401db 	.word	0x00b401db
 80014d0:	02d801cf 	.word	0x02d801cf
 80014d4:	002202d8 	.word	0x002202d8
 80014d8:	0061004c 	.word	0x0061004c
 80014dc:	026d0092 	.word	0x026d0092
 80014e0:	02a5027e 	.word	0x02a5027e
 80014e4:	02d80295 	.word	0x02d80295
 80014e8:	02d802d8 	.word	0x02d802d8
 80014ec:	008f02d8 	.word	0x008f02d8
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80014f0:	230b      	movs	r3, #11
    if (bNoError)
 80014f2:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80014f6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d0d1      	beq.n	80014a2 <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001504:	461a      	mov	r2, r3
 8001506:	21f0      	movs	r1, #240	; 0xf0
 8001508:	47a0      	blx	r4
}
 800150a:	b00d      	add	sp, #52	; 0x34
 800150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = 0;
 800150e:	ac04      	add	r4, sp, #16
 8001510:	2100      	movs	r1, #0
 8001512:	2220      	movs	r2, #32
 8001514:	4620      	mov	r0, r4
 8001516:	f004 fe73 	bl	8006200 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800151a:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800151e:	f10d 0012 	add.w	r0, sp, #18
 8001522:	1e79      	subs	r1, r7, #1
 8001524:	2300      	movs	r3, #0
 8001526:	e004      	b.n	8001532 <MCP_ReceivedFrame+0xda>
 8001528:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 800152a:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800152e:	f000 82fd 	beq.w	8001b2c <MCP_ReceivedFrame+0x6d4>
 8001532:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001536:	2a09      	cmp	r2, #9
 8001538:	b2de      	uxtb	r6, r3
 800153a:	f103 0301 	add.w	r3, r3, #1
 800153e:	d1f3      	bne.n	8001528 <MCP_ReceivedFrame+0xd0>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001540:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001542:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001544:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001546:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001548:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 800154a:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 800154c:	5cba      	ldrb	r2, [r7, r2]
 800154e:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001552:	5cfb      	ldrb	r3, [r7, r3]
 8001554:	f88d 3011 	strb.w	r3, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001558:	5dbb      	ldrb	r3, [r7, r6]
 800155a:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800155e:	69ee      	ldr	r6, [r5, #28]
 8001560:	e270      	b.n	8001a44 <MCP_ReceivedFrame+0x5ec>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001562:	7871      	ldrb	r1, [r6, #1]
 8001564:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001566:	7970      	ldrb	r0, [r6, #5]
 8001568:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800156a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800156e:	78b1      	ldrb	r1, [r6, #2]
 8001570:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001574:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001576:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800157a:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800157e:	b292      	uxth	r2, r2
 8001580:	4628      	mov	r0, r5
 8001582:	f001 fa1d 	bl	80029c0 <UI_ExecSpeedRamp>
 8001586:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800158a:	e7b6      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800158c:	f10d 000e 	add.w	r0, sp, #14
 8001590:	7831      	ldrb	r1, [r6, #0]
 8001592:	9000      	str	r0, [sp, #0]
 8001594:	ab03      	add	r3, sp, #12
 8001596:	f10d 020a 	add.w	r2, sp, #10
 800159a:	4628      	mov	r0, r5
 800159c:	f001 fa2c 	bl	80029f8 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80015a0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 80015a4:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 80015a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80015ac:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80015b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015b4:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 80015b6:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 80015b8:	f88d 3010 	strb.w	r3, [sp, #16]
      outBuff[1] = (uint8_t)(rpm >> 8);
 80015bc:	f88d 0011 	strb.w	r0, [sp, #17]
      outBuff[2] = (uint8_t)(rpm >> 16);
 80015c0:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 80015c2:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 80015c4:	f88d 0012 	strb.w	r0, [sp, #18]
      outBuff[3] = (uint8_t)(rpm >> 24);
 80015c8:	f88d 3013 	strb.w	r3, [sp, #19]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80015cc:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80015ce:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80015d0:	f88d 0015 	strb.w	r0, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 80015d4:	f88d 2016 	strb.w	r2, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80015d8:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80015dc:	69ec      	ldr	r4, [r5, #28]
 80015de:	69a8      	ldr	r0, [r5, #24]
 80015e0:	2308      	movs	r3, #8
 80015e2:	aa04      	add	r2, sp, #16
 80015e4:	21f0      	movs	r1, #240	; 0xf0
 80015e6:	47a0      	blx	r4
    if (bNoError)
 80015e8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80015ec:	e785      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80015ee:	78b1      	ldrb	r1, [r6, #2]
 80015f0:	7873      	ldrb	r3, [r6, #1]
 80015f2:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80015f4:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80015f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80015fa:	7931      	ldrb	r1, [r6, #4]
 80015fc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001600:	4a9e      	ldr	r2, [pc, #632]	; (800187c <MCP_ReceivedFrame+0x424>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001602:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001606:	fb82 1203 	smull	r1, r2, r2, r3
 800160a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 800160e:	7a31      	ldrb	r1, [r6, #8]
 8001610:	79f2      	ldrb	r2, [r6, #7]
 8001612:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001616:	79b1      	ldrb	r1, [r6, #6]
 8001618:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800161c:	b200      	sxth	r0, r0
 800161e:	7831      	ldrb	r1, [r6, #0]
 8001620:	9000      	str	r0, [sp, #0]
 8001622:	b21b      	sxth	r3, r3
 8001624:	b292      	uxth	r2, r2
 8001626:	4628      	mov	r0, r5
 8001628:	f001 fa04 	bl	8002a34 <UI_SetRevupData>
 800162c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001630:	e763      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001632:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001634:	2303      	movs	r3, #3
 8001636:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800163a:	2988      	cmp	r1, #136	; 0x88
 800163c:	d8d4      	bhi.n	80015e8 <MCP_ReceivedFrame+0x190>
 800163e:	a301      	add	r3, pc, #4	; (adr r3, 8001644 <MCP_ReceivedFrame+0x1ec>)
 8001640:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001644:	08001aeb 	.word	0x08001aeb
 8001648:	08001aa7 	.word	0x08001aa7
 800164c:	08001aeb 	.word	0x08001aeb
 8001650:	08001aeb 	.word	0x08001aeb
 8001654:	08001aa7 	.word	0x08001aa7
 8001658:	08001a57 	.word	0x08001a57
 800165c:	08001a57 	.word	0x08001a57
 8001660:	08001a57 	.word	0x08001a57
 8001664:	08001a57 	.word	0x08001a57
 8001668:	08001a57 	.word	0x08001a57
 800166c:	08001a57 	.word	0x08001a57
 8001670:	08001a57 	.word	0x08001a57
 8001674:	08001a57 	.word	0x08001a57
 8001678:	08001a57 	.word	0x08001a57
 800167c:	08001a57 	.word	0x08001a57
 8001680:	08001a57 	.word	0x08001a57
 8001684:	08001a57 	.word	0x08001a57
 8001688:	08001a57 	.word	0x08001a57
 800168c:	08001a57 	.word	0x08001a57
 8001690:	08001a57 	.word	0x08001a57
 8001694:	08001a57 	.word	0x08001a57
 8001698:	08001a57 	.word	0x08001a57
 800169c:	08001a57 	.word	0x08001a57
 80016a0:	08001a57 	.word	0x08001a57
 80016a4:	08001a57 	.word	0x08001a57
 80016a8:	08001a57 	.word	0x08001a57
 80016ac:	08001a57 	.word	0x08001a57
 80016b0:	08001a57 	.word	0x08001a57
 80016b4:	080015e9 	.word	0x080015e9
 80016b8:	080015e9 	.word	0x080015e9
 80016bc:	08001aa7 	.word	0x08001aa7
 80016c0:	08001a57 	.word	0x08001a57
 80016c4:	08001a57 	.word	0x08001a57
 80016c8:	08001a57 	.word	0x08001a57
 80016cc:	08001aeb 	.word	0x08001aeb
 80016d0:	080015e9 	.word	0x080015e9
 80016d4:	080015e9 	.word	0x080015e9
 80016d8:	080015e9 	.word	0x080015e9
 80016dc:	080015e9 	.word	0x080015e9
 80016e0:	080015e9 	.word	0x080015e9
 80016e4:	080015e9 	.word	0x080015e9
 80016e8:	080015e9 	.word	0x080015e9
 80016ec:	080015e9 	.word	0x080015e9
 80016f0:	080015e9 	.word	0x080015e9
 80016f4:	080015e9 	.word	0x080015e9
 80016f8:	080015e9 	.word	0x080015e9
 80016fc:	080015e9 	.word	0x080015e9
 8001700:	080015e9 	.word	0x080015e9
 8001704:	080015e9 	.word	0x080015e9
 8001708:	080015e9 	.word	0x080015e9
 800170c:	080015e9 	.word	0x080015e9
 8001710:	080015e9 	.word	0x080015e9
 8001714:	080015e9 	.word	0x080015e9
 8001718:	080015e9 	.word	0x080015e9
 800171c:	080015e9 	.word	0x080015e9
 8001720:	080015e9 	.word	0x080015e9
 8001724:	080015e9 	.word	0x080015e9
 8001728:	080015e9 	.word	0x080015e9
 800172c:	080015e9 	.word	0x080015e9
 8001730:	080015e9 	.word	0x080015e9
 8001734:	080015e9 	.word	0x080015e9
 8001738:	080015e9 	.word	0x080015e9
 800173c:	080015e9 	.word	0x080015e9
 8001740:	080015e9 	.word	0x080015e9
 8001744:	080015e9 	.word	0x080015e9
 8001748:	08001a57 	.word	0x08001a57
 800174c:	080015e9 	.word	0x080015e9
 8001750:	080015e9 	.word	0x080015e9
 8001754:	080015e9 	.word	0x080015e9
 8001758:	080015e9 	.word	0x080015e9
 800175c:	08001aa7 	.word	0x08001aa7
 8001760:	08001aa7 	.word	0x08001aa7
 8001764:	08001aa7 	.word	0x08001aa7
 8001768:	08001a57 	.word	0x08001a57
 800176c:	08001a57 	.word	0x08001a57
 8001770:	08001a57 	.word	0x08001a57
 8001774:	08001a57 	.word	0x08001a57
 8001778:	08001aeb 	.word	0x08001aeb
 800177c:	08001aa7 	.word	0x08001aa7
 8001780:	08001a57 	.word	0x08001a57
 8001784:	08001a57 	.word	0x08001a57
 8001788:	08001a57 	.word	0x08001a57
 800178c:	08001a57 	.word	0x08001a57
 8001790:	08001a57 	.word	0x08001a57
 8001794:	08001a57 	.word	0x08001a57
 8001798:	08001a57 	.word	0x08001a57
 800179c:	08001a57 	.word	0x08001a57
 80017a0:	08001a57 	.word	0x08001a57
 80017a4:	08001a57 	.word	0x08001a57
 80017a8:	08001a57 	.word	0x08001a57
 80017ac:	08001aeb 	.word	0x08001aeb
 80017b0:	08001aa7 	.word	0x08001aa7
 80017b4:	080015e9 	.word	0x080015e9
 80017b8:	08001a57 	.word	0x08001a57
 80017bc:	08001a57 	.word	0x08001a57
 80017c0:	08001a57 	.word	0x08001a57
 80017c4:	08001a57 	.word	0x08001a57
 80017c8:	08001a57 	.word	0x08001a57
 80017cc:	080015e9 	.word	0x080015e9
 80017d0:	080015e9 	.word	0x080015e9
 80017d4:	08001a57 	.word	0x08001a57
 80017d8:	08001a57 	.word	0x08001a57
 80017dc:	08001aeb 	.word	0x08001aeb
 80017e0:	08001aeb 	.word	0x08001aeb
 80017e4:	08001aa7 	.word	0x08001aa7
 80017e8:	08001aa7 	.word	0x08001aa7
 80017ec:	08001aa7 	.word	0x08001aa7
 80017f0:	08001aa7 	.word	0x08001aa7
 80017f4:	08001aa7 	.word	0x08001aa7
 80017f8:	08001aeb 	.word	0x08001aeb
 80017fc:	08001a57 	.word	0x08001a57
 8001800:	08001a57 	.word	0x08001a57
 8001804:	08001aa7 	.word	0x08001aa7
 8001808:	080015e9 	.word	0x080015e9
 800180c:	08001a57 	.word	0x08001a57
 8001810:	08001a57 	.word	0x08001a57
 8001814:	08001aeb 	.word	0x08001aeb
 8001818:	08001aa7 	.word	0x08001aa7
 800181c:	08001aa7 	.word	0x08001aa7
 8001820:	08001aa7 	.word	0x08001aa7
 8001824:	08001aa7 	.word	0x08001aa7
 8001828:	08001aa7 	.word	0x08001aa7
 800182c:	08001aa7 	.word	0x08001aa7
 8001830:	08001aa7 	.word	0x08001aa7
 8001834:	08001aa7 	.word	0x08001aa7
 8001838:	08001aa7 	.word	0x08001aa7
 800183c:	08001aa7 	.word	0x08001aa7
 8001840:	08001aa7 	.word	0x08001aa7
 8001844:	08001aeb 	.word	0x08001aeb
 8001848:	080015e9 	.word	0x080015e9
 800184c:	08001aeb 	.word	0x08001aeb
 8001850:	08001aa7 	.word	0x08001aa7
 8001854:	08001aa7 	.word	0x08001aa7
 8001858:	08001aa7 	.word	0x08001aa7
 800185c:	08001a57 	.word	0x08001a57
 8001860:	08001a57 	.word	0x08001a57
 8001864:	08001a57 	.word	0x08001a57
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001868:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800186a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800186c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001870:	4628      	mov	r0, r5
 8001872:	f001 f869 	bl	8002948 <UI_ExecCmd>
 8001876:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800187a:	e63e      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
 800187c:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001880:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001882:	2305      	movs	r3, #5
 8001884:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001888:	2988      	cmp	r1, #136	; 0x88
 800188a:	f200 80fc 	bhi.w	8001a86 <MCP_ReceivedFrame+0x62e>
 800188e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001892:	0145      	.short	0x0145
 8001894:	00fa00fa 	.word	0x00fa00fa
 8001898:	00fa013e 	.word	0x00fa013e
 800189c:	01000100 	.word	0x01000100
 80018a0:	01000100 	.word	0x01000100
 80018a4:	01000100 	.word	0x01000100
 80018a8:	01000100 	.word	0x01000100
 80018ac:	01000100 	.word	0x01000100
 80018b0:	011c0100 	.word	0x011c0100
 80018b4:	00fa011c 	.word	0x00fa011c
 80018b8:	010000fa 	.word	0x010000fa
 80018bc:	01000100 	.word	0x01000100
 80018c0:	01000100 	.word	0x01000100
 80018c4:	00fa00fa 	.word	0x00fa00fa
 80018c8:	00de00fa 	.word	0x00de00fa
 80018cc:	00fa00de 	.word	0x00fa00de
 80018d0:	00fa00fa 	.word	0x00fa00fa
 80018d4:	00fa00fa 	.word	0x00fa00fa
 80018d8:	00fa00fa 	.word	0x00fa00fa
 80018dc:	00fa00fa 	.word	0x00fa00fa
 80018e0:	00fa00fa 	.word	0x00fa00fa
 80018e4:	00fa00fa 	.word	0x00fa00fa
 80018e8:	00fa00fa 	.word	0x00fa00fa
 80018ec:	00fa00fa 	.word	0x00fa00fa
 80018f0:	00fa00fa 	.word	0x00fa00fa
 80018f4:	00fa00fa 	.word	0x00fa00fa
 80018f8:	00fa00fa 	.word	0x00fa00fa
 80018fc:	00fa00fa 	.word	0x00fa00fa
 8001900:	00fa00fa 	.word	0x00fa00fa
 8001904:	00fa00fa 	.word	0x00fa00fa
 8001908:	00fa00fa 	.word	0x00fa00fa
 800190c:	00fa00fa 	.word	0x00fa00fa
 8001910:	00fa00fa 	.word	0x00fa00fa
 8001914:	00fa0100 	.word	0x00fa0100
 8001918:	00fa00fa 	.word	0x00fa00fa
 800191c:	011c00fa 	.word	0x011c00fa
 8001920:	011c011c 	.word	0x011c011c
 8001924:	00fa00fa 	.word	0x00fa00fa
 8001928:	00fa00fa 	.word	0x00fa00fa
 800192c:	00fa00fa 	.word	0x00fa00fa
 8001930:	00fa0100 	.word	0x00fa0100
 8001934:	00fa00fa 	.word	0x00fa00fa
 8001938:	01000100 	.word	0x01000100
 800193c:	01000100 	.word	0x01000100
 8001940:	01000100 	.word	0x01000100
 8001944:	00fa0100 	.word	0x00fa0100
 8001948:	00fa011c 	.word	0x00fa011c
 800194c:	00fa00fa 	.word	0x00fa00fa
 8001950:	00fa00fa 	.word	0x00fa00fa
 8001954:	00fa0100 	.word	0x00fa0100
 8001958:	010000fa 	.word	0x010000fa
 800195c:	00fa0100 	.word	0x00fa0100
 8001960:	00fa00fa 	.word	0x00fa00fa
 8001964:	00fa00fa 	.word	0x00fa00fa
 8001968:	00fa00fa 	.word	0x00fa00fa
 800196c:	00fa00fa 	.word	0x00fa00fa
 8001970:	00fa00fa 	.word	0x00fa00fa
 8001974:	00fa00fa 	.word	0x00fa00fa
 8001978:	013e00fa 	.word	0x013e00fa
 800197c:	011c011c 	.word	0x011c011c
 8001980:	011c011c 	.word	0x011c011c
 8001984:	00fa011c 	.word	0x00fa011c
 8001988:	00fa00fa 	.word	0x00fa00fa
 800198c:	011c011c 	.word	0x011c011c
 8001990:	00fa00fa 	.word	0x00fa00fa
 8001994:	00fa00fa 	.word	0x00fa00fa
 8001998:	00fa00fa 	.word	0x00fa00fa
 800199c:	010000fa 	.word	0x010000fa
 80019a0:	01000100 	.word	0x01000100
      hIdRef = buffer[2] + (buffer[3] << 8);
 80019a4:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80019a6:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80019a8:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80019aa:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80019ac:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 80019b0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80019b4:	b212      	sxth	r2, r2
 80019b6:	b209      	sxth	r1, r1
 80019b8:	4628      	mov	r0, r5
 80019ba:	f001 f857 	bl	8002a6c <UI_SetCurrentReferences>
      bNoError = true;
 80019be:	2301      	movs	r3, #1
 80019c0:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 80019c4:	e59b      	b.n	80014fe <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80019c6:	4c5b      	ldr	r4, [pc, #364]	; (8001b34 <MCP_ReceivedFrame+0x6dc>)
      stepList.data = buffer;
 80019c8:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80019ca:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80019cc:	4621      	mov	r1, r4
 80019ce:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80019d0:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80019d4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80019d8:	f001 f856 	bl	8002a88 <UI_GetMPInfo>
 80019dc:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80019e0:	2800      	cmp	r0, #0
 80019e2:	f43f ad5e 	beq.w	80014a2 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80019e6:	69ee      	ldr	r6, [r5, #28]
 80019e8:	7923      	ldrb	r3, [r4, #4]
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	69a8      	ldr	r0, [r5, #24]
 80019ee:	21f0      	movs	r1, #240	; 0xf0
 80019f0:	47b0      	blx	r6
  if (RequireAck)
 80019f2:	e55d      	b.n	80014b0 <MCP_ReceivedFrame+0x58>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019f4:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019f6:	7973      	ldrb	r3, [r6, #5]
 80019f8:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019fa:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019fc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a00:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001a04:	b292      	uxth	r2, r2
 8001a06:	b209      	sxth	r1, r1
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f000 ffeb 	bl	80029e4 <UI_ExecTorqueRamp>
 8001a0e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a12:	e572      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
 8001a14:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001a18:	ac04      	add	r4, sp, #16
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e004      	b.n	8001a2c <MCP_ReceivedFrame+0x5d4>
 8001a22:	3001      	adds	r0, #1
 8001a24:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001a26:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001a2a:	d00a      	beq.n	8001a42 <MCP_ReceivedFrame+0x5ea>
 8001a2c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001a30:	b2c6      	uxtb	r6, r0
 8001a32:	2900      	cmp	r1, #0
 8001a34:	d1f5      	bne.n	8001a22 <MCP_ReceivedFrame+0x5ca>
        outBuff[i] = 0;
 8001a36:	f1c6 0220 	rsb	r2, r6, #32
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	4420      	add	r0, r4
 8001a3e:	f004 fbdf 	bl	8006200 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a42:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a44:	69a8      	ldr	r0, [r5, #24]
 8001a46:	2320      	movs	r3, #32
 8001a48:	4622      	mov	r2, r4
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	47b0      	blx	r6
      bNoError = true;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001a54:	e553      	b.n	80014fe <MCP_ReceivedFrame+0xa6>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a56:	f10d 0209 	add.w	r2, sp, #9
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 fd70 	bl	8002540 <UI_GetReg>
          if ( bNoError == true )
 8001a60:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a64:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f43f ad1b 	beq.w	80014a2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001a6c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a70:	2302      	movs	r3, #2
 8001a72:	aa04      	add	r2, sp, #16
 8001a74:	21f0      	movs	r1, #240	; 0xf0
 8001a76:	47a0      	blx	r4
  if (RequireAck)
 8001a78:	e51a      	b.n	80014b0 <MCP_ReceivedFrame+0x58>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a7a:	2301      	movs	r3, #1
    if (bNoError)
 8001a7c:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a80:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001a84:	e539      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a86:	2302      	movs	r3, #2
    if (bNoError)
 8001a88:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a8c:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001a90:	e533      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001a92:	78b2      	ldrb	r2, [r6, #2]
 8001a94:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a96:	4628      	mov	r0, r5
 8001a98:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001a9c:	f000 fc90 	bl	80023c0 <UI_SetReg>
 8001aa0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001aa4:	e529      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001aa6:	f10d 0209 	add.w	r2, sp, #9
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f000 fd48 	bl	8002540 <UI_GetReg>
          if ( bNoError == true )
 8001ab0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001ab4:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f43f acf3 	beq.w	80014a2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001abc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	aa04      	add	r2, sp, #16
 8001ac4:	21f0      	movs	r1, #240	; 0xf0
 8001ac6:	47a0      	blx	r4
  if (RequireAck)
 8001ac8:	e4f2      	b.n	80014b0 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aca:	78b2      	ldrb	r2, [r6, #2]
 8001acc:	7873      	ldrb	r3, [r6, #1]
 8001ace:	78f0      	ldrb	r0, [r6, #3]
 8001ad0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ad4:	7932      	ldrb	r2, [r6, #4]
 8001ad6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ada:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 fc6e 	bl	80023c0 <UI_SetReg>
 8001ae4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ae8:	e507      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001aea:	f10d 0209 	add.w	r2, sp, #9
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 fd26 	bl	8002540 <UI_GetReg>
           if ( bNoError == true )
 8001af4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001af8:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f43f acd1 	beq.w	80014a2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001b00:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001b04:	2301      	movs	r3, #1
 8001b06:	aa04      	add	r2, sp, #16
 8001b08:	21f0      	movs	r1, #240	; 0xf0
 8001b0a:	47a0      	blx	r4
  if (RequireAck)
 8001b0c:	e4d0      	b.n	80014b0 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001b0e:	7872      	ldrb	r2, [r6, #1]
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 fc55 	bl	80023c0 <UI_SetReg>
 8001b16:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b1a:	e4ee      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001b1c:	7872      	ldrb	r2, [r6, #1]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4628      	mov	r0, r5
 8001b22:	f000 fc4d 	bl	80023c0 <UI_SetReg>
 8001b26:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b2a:	e4e6      	b.n	80014fa <MCP_ReceivedFrame+0xa2>
 8001b2c:	2626      	movs	r6, #38	; 0x26
 8001b2e:	2324      	movs	r3, #36	; 0x24
 8001b30:	2222      	movs	r2, #34	; 0x22
 8001b32:	e50b      	b.n	800154c <MCP_ReceivedFrame+0xf4>
 8001b34:	200007a8 	.word	0x200007a8

08001b38 <MCP_WaitNextFrame>:
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b3c:	6980      	ldr	r0, [r0, #24]
 8001b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b40:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b48:	6a23      	ldr	r3, [r4, #32]
 8001b4a:	69a0      	ldr	r0, [r4, #24]
}
 8001b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b50:	4718      	bx	r3
 8001b52:	bf00      	nop

08001b54 <MCP_Init>:
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	4604      	mov	r4, r0
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8001b5e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8001b64:	61a1      	str	r1, [r4, #24]
{
 8001b66:	4608      	mov	r0, r1
 8001b68:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <MCP_Init+0x38>)
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MCP_Init+0x3c>)
 8001b70:	4621      	mov	r1, r4
 8001b72:	f002 fbc7 	bl	8004304 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001b76:	9b06      	ldr	r3, [sp, #24]
 8001b78:	6263      	str	r3, [r4, #36]	; 0x24
  pHandle->fFcpReceive = fFcpReceive;
 8001b7a:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff ffda 	bl	8001b38 <MCP_WaitNextFrame>
}
 8001b84:	b002      	add	sp, #8
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	08001b95 	.word	0x08001b95
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001459 	.word	0x08001459

08001b94 <MCP_OnTimeOut>:
{
 8001b94:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001b96:	f7ff ffcf 	bl	8001b38 <MCP_WaitNextFrame>
}
 8001b9a:	bd08      	pop	{r3, pc}

08001b9c <MCP_SentFrame>:
{
 8001b9c:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001b9e:	f7ff ffcb 	bl	8001b38 <MCP_WaitNextFrame>
}
 8001ba2:	bd08      	pop	{r3, pc}

08001ba4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001ba4:	b530      	push	{r4, r5, lr}
 8001ba6:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001ba8:	f001 fe28 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001bae:	4d0c      	ldr	r5, [pc, #48]	; (8001be0 <MX_MotorControl_Init+0x3c>)
 8001bb0:	4c0c      	ldr	r4, [pc, #48]	; (8001be4 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001bb2:	fba3 3000 	umull	r3, r0, r3, r0
 8001bb6:	09c0      	lsrs	r0, r0, #7
 8001bb8:	f001 fa58 	bl	800306c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff f8de 	bl	8000d80 <MCboot>
  mc_lock_pins();
 8001bc4:	f7ff fbcc 	bl	8001360 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_MotorControl_Init+0x44>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_MotorControl_Init+0x48>)
 8001bce:	462b      	mov	r3, r5
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	f000 fb72 	bl	80022bc <UI_TaskInit>
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	bd30      	pop	{r4, r5, pc}
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	200007b4 	.word	0x200007b4
 8001be4:	200007b0 	.word	0x200007b0
 8001be8:	08006498 	.word	0x08006498
 8001bec:	20000568 	.word	0x20000568

08001bf0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <RCM_RegisterRegConv+0x1b0>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d02f      	beq.n	8001c5c <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bfc:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001c00:	7910      	ldrb	r0, [r2, #4]
 8001c02:	4584      	cmp	ip, r0
 8001c04:	d01d      	beq.n	8001c42 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c06:	685c      	ldr	r4, [r3, #4]
 8001c08:	2c00      	cmp	r4, #0
 8001c0a:	f000 80ac 	beq.w	8001d66 <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c0e:	7922      	ldrb	r2, [r4, #4]
 8001c10:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8001c12:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c16:	d02b      	beq.n	8001c70 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c18:	689c      	ldr	r4, [r3, #8]
 8001c1a:	2c00      	cmp	r4, #0
 8001c1c:	f000 808f 	beq.w	8001d3e <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c20:	7922      	ldrb	r2, [r4, #4]
 8001c22:	4562      	cmp	r2, ip
 8001c24:	d02a      	beq.n	8001c7c <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c26:	68dc      	ldr	r4, [r3, #12]
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	f000 8091 	beq.w	8001d50 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c2e:	7922      	ldrb	r2, [r4, #4]
 8001c30:	4562      	cmp	r2, ip
 8001c32:	f000 8092 	beq.w	8001d5a <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001c36:	2803      	cmp	r0, #3
 8001c38:	bf88      	it	hi
 8001c3a:	20ff      	movhi	r0, #255	; 0xff
 8001c3c:	f240 80a1 	bls.w	8001d82 <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c42:	6810      	ldr	r0, [r2, #0]
 8001c44:	680a      	ldr	r2, [r1, #0]
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d01e      	beq.n	8001c88 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c4a:	685c      	ldr	r4, [r3, #4]
 8001c4c:	2c00      	cmp	r4, #0
 8001c4e:	d1de      	bne.n	8001c0e <RCM_RegisterRegConv+0x1e>
 8001c50:	689c      	ldr	r4, [r3, #8]
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	f000 809a 	beq.w	8001d8c <RCM_RegisterRegConv+0x19c>
      i++;
 8001c58:	2001      	movs	r0, #1
 8001c5a:	e7e1      	b.n	8001c20 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c5c:	685c      	ldr	r4, [r3, #4]
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	f000 808d 	beq.w	8001d7e <RCM_RegisterRegConv+0x18e>
 8001c64:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8001c68:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c6a:	7922      	ldrb	r2, [r4, #4]
 8001c6c:	4562      	cmp	r2, ip
 8001c6e:	d1d3      	bne.n	8001c18 <RCM_RegisterRegConv+0x28>
 8001c70:	6824      	ldr	r4, [r4, #0]
 8001c72:	680a      	ldr	r2, [r1, #0]
 8001c74:	4294      	cmp	r4, r2
 8001c76:	d1cf      	bne.n	8001c18 <RCM_RegisterRegConv+0x28>
      i++;
 8001c78:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 8001c7a:	e006      	b.n	8001c8a <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c7c:	6824      	ldr	r4, [r4, #0]
 8001c7e:	680a      	ldr	r2, [r1, #0]
 8001c80:	4294      	cmp	r4, r2
 8001c82:	d1d0      	bne.n	8001c26 <RCM_RegisterRegConv+0x36>
      i++;
 8001c84:	2002      	movs	r0, #2
 8001c86:	e000      	b.n	8001c8a <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 8001c88:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8001c8a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001c8e:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c90:	4c44      	ldr	r4, [pc, #272]	; (8001da4 <RCM_RegisterRegConv+0x1b4>)
 8001c92:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c94:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c96:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c9a:	d411      	bmi.n	8001cc0 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001c9c:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001c9e:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001ca2:	f023 0320 	bic.w	r3, r3, #32
 8001ca6:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001ca8:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001caa:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001cac:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb4:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001cb6:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001cb8:	6893      	ldr	r3, [r2, #8]
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001cc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001cc8:	790b      	ldrb	r3, [r1, #4]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d82d      	bhi.n	8001d2a <RCM_RegisterRegConv+0x13a>
 8001cce:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001cd2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001ce2:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001ce6:	fab4 f484 	clz	r4, r4
 8001cea:	fa2e fe04 	lsr.w	lr, lr, r4
 8001cee:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8001cf0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001cf4:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8001cf8:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8001cfc:	fa9c f5ac 	rbit	r5, ip
 8001d00:	fab5 f585 	clz	r5, r5
 8001d04:	fa9c fcac 	rbit	ip, ip
 8001d08:	688e      	ldr	r6, [r1, #8]
 8001d0a:	fabc fc8c 	clz	ip, ip
 8001d0e:	fa23 f105 	lsr.w	r1, r3, r5
 8001d12:	fa23 f30c 	lsr.w	r3, r3, ip
 8001d16:	fa06 f503 	lsl.w	r5, r6, r3
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	408b      	lsls	r3, r1
 8001d1e:	ea24 0303 	bic.w	r3, r4, r3
 8001d22:	432b      	orrs	r3, r5
 8001d24:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d2a:	2403      	movs	r4, #3
 8001d2c:	f06f 051d 	mvn.w	r5, #29
 8001d30:	fb14 5403 	smlabb	r4, r4, r3, r5
 8001d34:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d38:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8001d3c:	e7cf      	b.n	8001cde <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d3e:	2804      	cmp	r0, #4
 8001d40:	d917      	bls.n	8001d72 <RCM_RegisterRegConv+0x182>
 8001d42:	68dc      	ldr	r4, [r3, #12]
 8001d44:	b114      	cbz	r4, 8001d4c <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d46:	7922      	ldrb	r2, [r4, #4]
 8001d48:	4562      	cmp	r2, ip
 8001d4a:	d01c      	beq.n	8001d86 <RCM_RegisterRegConv+0x196>
 8001d4c:	680a      	ldr	r2, [r1, #0]
 8001d4e:	e799      	b.n	8001c84 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d50:	2804      	cmp	r0, #4
 8001d52:	680a      	ldr	r2, [r1, #0]
 8001d54:	d999      	bls.n	8001c8a <RCM_RegisterRegConv+0x9a>
      i++;
 8001d56:	2003      	movs	r0, #3
 8001d58:	e797      	b.n	8001c8a <RCM_RegisterRegConv+0x9a>
 8001d5a:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d5c:	6824      	ldr	r4, [r4, #0]
 8001d5e:	4294      	cmp	r4, r2
 8001d60:	f47f af69 	bne.w	8001c36 <RCM_RegisterRegConv+0x46>
 8001d64:	e7f7      	b.n	8001d56 <RCM_RegisterRegConv+0x166>
      i++;
 8001d66:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d68:	689c      	ldr	r4, [r3, #8]
 8001d6a:	b11c      	cbz	r4, 8001d74 <RCM_RegisterRegConv+0x184>
 8001d6c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001d70:	e756      	b.n	8001c20 <RCM_RegisterRegConv+0x30>
 8001d72:	4620      	mov	r0, r4
 8001d74:	68dc      	ldr	r4, [r3, #12]
 8001d76:	b124      	cbz	r4, 8001d82 <RCM_RegisterRegConv+0x192>
 8001d78:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001d7c:	e757      	b.n	8001c2e <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 8001d7e:	4620      	mov	r0, r4
 8001d80:	e7f2      	b.n	8001d68 <RCM_RegisterRegConv+0x178>
 8001d82:	680a      	ldr	r2, [r1, #0]
 8001d84:	e781      	b.n	8001c8a <RCM_RegisterRegConv+0x9a>
 8001d86:	680a      	ldr	r2, [r1, #0]
      i++;
 8001d88:	2002      	movs	r0, #2
 8001d8a:	e7e7      	b.n	8001d5c <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d8c:	68dc      	ldr	r4, [r3, #12]
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	f43f af72 	beq.w	8001c78 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d94:	7920      	ldrb	r0, [r4, #4]
 8001d96:	4560      	cmp	r0, ip
 8001d98:	f47f af6e 	bne.w	8001c78 <RCM_RegisterRegConv+0x88>
      i++;
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	e7dd      	b.n	8001d5c <RCM_RegisterRegConv+0x16c>
 8001da0:	200007dc 	.word	0x200007dc
 8001da4:	200007b8 	.word	0x200007b8

08001da8 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <RCM_ExecRegularConv+0x70>)
 8001daa:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dae:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	d827      	bhi.n	8001e06 <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001db6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001dba:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001dc6:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001dca:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8001dce:	fab1 f181 	clz	r1, r1
 8001dd2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8001dd6:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8001de2:	f021 011f 	bic.w	r1, r1, #31
 8001de6:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001de8:	0151      	lsls	r1, r2, #5
 8001dea:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8001dee:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001df2:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001df4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001df6:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001dfa:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001dfc:	079b      	lsls	r3, r3, #30
 8001dfe:	d5fc      	bpl.n	8001dfa <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001e00:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001e02:	b280      	uxth	r0, r0
 8001e04:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e06:	2103      	movs	r1, #3
 8001e08:	f06f 001d 	mvn.w	r0, #29
 8001e0c:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e10:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001e14:	e7d5      	b.n	8001dc2 <RCM_ExecRegularConv+0x1a>
 8001e16:	bf00      	nop
 8001e18:	200007dc 	.word	0x200007dc

08001e1c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001e1e:	4c0f      	ldr	r4, [pc, #60]	; (8001e5c <RCM_ExecUserConv+0x40>)
 8001e20:	7823      	ldrb	r3, [r4, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d000      	beq.n	8001e28 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e28:	4d0d      	ldr	r5, [pc, #52]	; (8001e60 <RCM_ExecUserConv+0x44>)
 8001e2a:	7828      	ldrb	r0, [r5, #0]
 8001e2c:	f7ff ffbc 	bl	8001da8 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e30:	f895 c000 	ldrb.w	ip, [r5]
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e38:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e3c:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e3e:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e40:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e42:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e44:	2d00      	cmp	r5, #0
 8001e46:	d0ee      	beq.n	8001e26 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e48:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001e4c:	4660      	mov	r0, ip
 8001e4e:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e54:	462b      	mov	r3, r5
}
 8001e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e5a:	4718      	bx	r3
 8001e5c:	200007d9 	.word	0x200007d9
 8001e60:	200007d8 	.word	0x200007d8
 8001e64:	200007b8 	.word	0x200007b8
 8001e68:	200007da 	.word	0x200007da

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_MspInit+0x38>)
 8001e70:	2100      	movs	r1, #0
 8001e72:	9100      	str	r1, [sp, #0]
 8001e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e82:	9200      	str	r2, [sp, #0]
 8001e84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	9101      	str	r1, [sp, #4]
 8001e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e9a:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e9e:	f001 b887 	b.w	8002fb0 <HAL_NVIC_SetPriorityGrouping>
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_ADC_MspInit+0x80>)
 8001eac:	6802      	ldr	r2, [r0, #0]
{
 8001eae:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001eb2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001eb8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001ebc:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8001ebe:	d001      	beq.n	8001ec4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec0:	b00a      	add	sp, #40	; 0x28
 8001ec2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ec8:	9401      	str	r4, [sp, #4]
 8001eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001eda:	9201      	str	r2, [sp, #4]
 8001edc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	9402      	str	r4, [sp, #8]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	f042 0204 	orr.w	r2, r2, #4
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eea:	f002 0204 	and.w	r2, r2, #4
 8001eee:	9202      	str	r2, [sp, #8]
 8001ef0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	9403      	str	r4, [sp, #12]
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8001f04:	2603      	movs	r6, #3
 8001f06:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f08:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8001f0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f001 f8cc 	bl	80030ac <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	4806      	ldr	r0, [pc, #24]	; (8001f30 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8001f1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f001 f8c5 	bl	80030ac <HAL_GPIO_Init>
}
 8001f22:	b00a      	add	sp, #40	; 0x28
 8001f24:	bdd0      	pop	{r4, r6, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	492b      	ldr	r1, [pc, #172]	; (8001fe8 <HAL_TIM_Base_MspInit+0xb4>)
{
 8001f3a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8001f3e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f44:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001f48:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8001f4a:	d004      	beq.n	8001f56 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001f4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001f50:	d00e      	beq.n	8001f70 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f52:	b00a      	add	sp, #40	; 0x28
 8001f54:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f56:	4a25      	ldr	r2, [pc, #148]	; (8001fec <HAL_TIM_Base_MspInit+0xb8>)
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	9b00      	ldr	r3, [sp, #0]
}
 8001f6c:	b00a      	add	sp, #40	; 0x28
 8001f6e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f70:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7a:	f041 0101 	orr.w	r1, r1, #1
 8001f7e:	6411      	str	r1, [r2, #64]	; 0x40
 8001f80:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001f82:	f001 0101 	and.w	r1, r1, #1
 8001f86:	9101      	str	r1, [sp, #4]
 8001f88:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f8e:	f041 0102 	orr.w	r1, r1, #2
 8001f92:	6311      	str	r1, [r2, #48]	; 0x30
 8001f94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f96:	f001 0102 	and.w	r1, r1, #2
 8001f9a:	9102      	str	r1, [sp, #8]
 8001f9c:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001faa:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4023      	ands	r3, r4
 8001fae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8001fb0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fbc:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbe:	e9cd 3407 	strd	r3, r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f001 f872 	bl	80030ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <HAL_TIM_Base_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001fda:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f001 f864 	bl	80030ac <HAL_GPIO_Init>
}
 8001fe4:	b00a      	add	sp, #40	; 0x28
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <HAL_TIM_MspPostInit+0x80>)
 8001ffc:	6801      	ldr	r1, [r0, #0]
{
 8001ffe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002002:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002008:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800200c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800200e:	d001      	beq.n	8002014 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002010:	b008      	add	sp, #32
 8002012:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	f041 0101 	orr.w	r1, r1, #1
 8002022:	6311      	str	r1, [r2, #48]	; 0x30
 8002024:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002026:	f001 0101 	and.w	r1, r1, #1
 800202a:	9100      	str	r1, [sp, #0]
 800202c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002042:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002046:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800204a:	2302      	movs	r3, #2
 800204c:	2602      	movs	r6, #2
 800204e:	2702      	movs	r7, #2
 8002050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002054:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002058:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f001 f827 	bl	80030ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800205e:	2203      	movs	r2, #3
 8002060:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002064:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002068:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800206c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f001 f81c 	bl	80030ac <HAL_GPIO_Init>
}
 8002074:	b008      	add	sp, #32
 8002076:	bdd0      	pop	{r4, r6, r7, pc}
 8002078:	40010000 	.word	0x40010000
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	00000000 	.word	0x00000000

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800208a:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_UART_MspInit+0x70>)
 800208c:	6801      	ldr	r1, [r0, #0]
{
 800208e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002092:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002098:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800209c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 800209e:	d002      	beq.n	80020a6 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a0:	b009      	add	sp, #36	; 0x24
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80020ae:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80020b2:	6410      	str	r0, [r2, #64]	; 0x40
 80020b4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80020b6:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 80020ba:	9000      	str	r0, [sp, #0]
 80020bc:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	480e      	ldr	r0, [pc, #56]	; (80020fc <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80020cc:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80020f0 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80020da:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f000 ffe3 	bl	80030ac <HAL_GPIO_Init>
}
 80020e6:	b009      	add	sp, #36	; 0x24
 80020e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ec:	f3af 8000 	nop.w
 80020f0:	0000000c 	.word	0x0000000c
 80020f4:	00000002 	.word	0x00000002
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40020000 	.word	0x40020000

08002100 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <ADC_IRQHandler+0x18>)
 8002102:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002104:	0752      	lsls	r2, r2, #29
 8002106:	d400      	bmi.n	800210a <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002108:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f022 020c 	bic.w	r2, r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002112:	f7ff b835 	b.w	8001180 <TSK_HighFrequencyTask>
 8002116:	bf00      	nop
 8002118:	40012000 	.word	0x40012000

0800211c <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800211e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002120:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002122:	f06f 0201 	mvn.w	r2, #1
 8002126:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002128:	f003 bb6c 	b.w	8005804 <R3_1_TIMx_UP_IRQHandler>
 800212c:	20000314 	.word	0x20000314

08002130 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002132:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002134:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002136:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	0612      	lsls	r2, r2, #24
 800213c:	d504      	bpl.n	8002148 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800213e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002142:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8002144:	f003 fb7c 	bl	8005840 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800214c:	f7fe bfec 	b.w	8001128 <MC_Scheduler>
 8002150:	20000314 	.word	0x20000314

08002154 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002154:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002156:	4c0c      	ldr	r4, [pc, #48]	; (8002188 <TIM2_IRQHandler+0x34>)
 8002158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	07d1      	lsls	r1, r2, #31
 800215e:	d40b      	bmi.n	8002178 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	0792      	lsls	r2, r2, #30
 8002164:	d507      	bpl.n	8002176 <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002166:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800216a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <TIM2_IRQHandler+0x34>)
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	f002 ba85 	b.w	8004680 <HALL_TIMx_CC_IRQHandler>
}
 8002176:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002178:	f06f 0201 	mvn.w	r2, #1
 800217c:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 800217e:	4620      	mov	r0, r4
 8002180:	f002 fc24 	bl	80049cc <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8002184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002186:	e7eb      	b.n	8002160 <TIM2_IRQHandler+0xc>
 8002188:	200000b4 	.word	0x200000b4

0800218c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800218c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800218e:	4c1f      	ldr	r4, [pc, #124]	; (800220c <USART2_IRQHandler+0x80>)
 8002190:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	0691      	lsls	r1, r2, #26
{
 8002198:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800219a:	d407      	bmi.n	80021ac <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800219c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800219e:	0612      	lsls	r2, r2, #24
 80021a0:	d413      	bmi.n	80021ca <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80021a2:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	d418      	bmi.n	80021da <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80021a8:	b002      	add	sp, #8
 80021aa:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021ac:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80021ae:	4620      	mov	r0, r4
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	f003 ff5d 	bl	8006070 <UFCP_RX_IRQ_Handler>
 80021b6:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d021      	beq.n	8002200 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d01c      	beq.n	80021fa <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	0612      	lsls	r2, r2, #24
 80021c8:	d5eb      	bpl.n	80021a2 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 80021ca:	4810      	ldr	r0, [pc, #64]	; (800220c <USART2_IRQHandler+0x80>)
 80021cc:	f003 feba 	bl	8005f44 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	071b      	lsls	r3, r3, #28
 80021d8:	d5e6      	bpl.n	80021a8 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <USART2_IRQHandler+0x80>)
 80021dc:	f003 ffac 	bl	8006138 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80021e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80021e8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80021ee:	9b01      	ldr	r3, [sp, #4]
}
 80021f0:	b002      	add	sp, #8
 80021f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 80021f6:	f000 b8c5 	b.w	8002384 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 80021fa:	f000 f8c3 	bl	8002384 <UI_SerialCommunicationTimeOutStop>
 80021fe:	e7df      	b.n	80021c0 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8002200:	f000 f8c6 	bl	8002390 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002204:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002208:	e7c8      	b.n	800219c <USART2_IRQHandler+0x10>
 800220a:	bf00      	nop
 800220c:	2000042c 	.word	0x2000042c

08002210 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002210:	b510      	push	{r4, lr}
 8002212:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002214:	f7ff f894 	bl	8001340 <TSK_HardwareFaultTask>
 8002218:	4c1b      	ldr	r4, [pc, #108]	; (8002288 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800221a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	0712      	lsls	r2, r2, #28
 8002222:	d41d      	bmi.n	8002260 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002224:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002226:	0610      	lsls	r0, r2, #24
 8002228:	d40f      	bmi.n	800224a <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800222a:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800222c:	0692      	lsls	r2, r2, #26
 800222e:	d5f6      	bpl.n	800221e <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002230:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002232:	4620      	mov	r0, r4
 8002234:	b2c9      	uxtb	r1, r1
 8002236:	f003 ff1b 	bl	8006070 <UFCP_RX_IRQ_Handler>
 800223a:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800223c:	2b01      	cmp	r3, #1
 800223e:	d01f      	beq.n	8002280 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002240:	2b02      	cmp	r3, #2
 8002242:	d1ea      	bne.n	800221a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002244:	f000 f89e 	bl	8002384 <UI_SerialCommunicationTimeOutStop>
 8002248:	e7e7      	b.n	800221a <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 800224a:	4620      	mov	r0, r4
 800224c:	f003 fe7a 	bl	8005f44 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002250:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	0691      	lsls	r1, r2, #26
 8002258:	d4ea      	bmi.n	8002230 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800225a:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800225c:	0712      	lsls	r2, r2, #28
 800225e:	d5e1      	bpl.n	8002224 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002260:	4620      	mov	r0, r4
 8002262:	f003 ff69 	bl	8006138 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002266:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800226e:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002274:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002276:	f000 f885 	bl	8002384 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800227a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800227e:	e7d1      	b.n	8002224 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8002280:	f000 f886 	bl	8002390 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002284:	e7c9      	b.n	800221a <HardFault_Handler+0xa>
 8002286:	bf00      	nop
 8002288:	2000042c 	.word	0x2000042c

0800228c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800228c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800228e:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <SysTick_Handler+0x2c>)
 8002290:	7823      	ldrb	r3, [r4, #0]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d006      	beq.n	80022a4 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002296:	3301      	adds	r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80022a0:	f7ff b83e 	b.w	8001320 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80022a4:	f000 fc3e 	bl	8002b24 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80022a8:	f000 fefc 	bl	80030a4 <HAL_SYSTICK_IRQHandler>
 80022ac:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80022ae:	7023      	strb	r3, [r4, #0]
}
 80022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80022b4:	f7ff b834 	b.w	8001320 <MC_RunMotorControlTasks>
 80022b8:	2000056c 	.word	0x2000056c

080022bc <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80022bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 80022c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002334 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 80022c4:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002338 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 80022c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800233c <UI_TaskInit+0x80>
{
 80022cc:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <UI_TaskInit+0x68>)
 80022d0:	f8c8 3000 	str.w	r3, [r8]
{
 80022d4:	4607      	mov	r7, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 80022da:	469c      	mov	ip, r3
 80022dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80022e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80022e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 80022e8:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 80022ea:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 80022ee:	4648      	mov	r0, r9
{
 80022f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    UFCP_Init( & pUSART );
 80022f4:	f003 fe24 	bl	8005f40 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <UI_TaskInit+0x6c>)
 80022fa:	f8d8 0000 	ldr.w	r0, [r8]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4649      	mov	r1, r9
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <UI_TaskInit+0x70>)
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <UI_TaskInit+0x74>)
 8002306:	f8cd a004 	str.w	sl, [sp, #4]
 800230a:	f7ff fc23 	bl	8001b54 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800230e:	f8d8 0000 	ldr.w	r0, [r8]
 8002312:	970a      	str	r7, [sp, #40]	; 0x28
 8002314:	4633      	mov	r3, r6
 8002316:	462a      	mov	r2, r5
 8002318:	4621      	mov	r1, r4

}
 800231a:	b002      	add	sp, #8
 800231c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002320:	f000 b83c 	b.w	800239c <UI_Init>
 8002324:	200007ec 	.word	0x200007ec
 8002328:	08006159 	.word	0x08006159
 800232c:	08005fa1 	.word	0x08005fa1
 8002330:	08005fc1 	.word	0x08005fc1
 8002334:	200008a0 	.word	0x200008a0
 8002338:	200006bc 	.word	0x200006bc
 800233c:	2000042c 	.word	0x2000042c

08002340 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <UI_Scheduler+0x38>)
 8002342:	8813      	ldrh	r3, [r2, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	b11b      	cbz	r3, 8002350 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002348:	8813      	ldrh	r3, [r2, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	b29b      	uxth	r3, r3
 800234e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <UI_Scheduler+0x3c>)
 8002352:	8813      	ldrh	r3, [r2, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d903      	bls.n	8002362 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800235a:	8813      	ldrh	r3, [r2, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <UI_Scheduler+0x40>)
 8002364:	8813      	ldrh	r3, [r2, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d903      	bls.n	8002374 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 800236c:	8813      	ldrh	r3, [r2, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	8013      	strh	r3, [r2, #0]
  }
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	2000089e 	.word	0x2000089e
 800237c:	2000089c 	.word	0x2000089c
 8002380:	2000056e 	.word	0x2000056e

08002384 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002386:	2200      	movs	r2, #0
 8002388:	801a      	strh	r2, [r3, #0]
}
 800238a:	4770      	bx	lr
 800238c:	2000089c 	.word	0x2000089c

08002390 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002390:	4b01      	ldr	r3, [pc, #4]	; (8002398 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002392:	224f      	movs	r2, #79	; 0x4f
 8002394:	801a      	strh	r2, [r3, #0]
}
 8002396:	4770      	bx	lr
 8002398:	2000089c 	.word	0x2000089c

0800239c <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 800239c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 80023a0:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80023a2:	9b00      	ldr	r3, [sp, #0]
 80023a4:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80023a6:	2100      	movs	r1, #0
 80023a8:	7501      	strb	r1, [r0, #20]
}
 80023aa:	4770      	bx	lr

080023ac <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80023ac:	7903      	ldrb	r3, [r0, #4]
 80023ae:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80023b0:	bf86      	itte	hi
 80023b2:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 80023b4:	2001      	movhi	r0, #1
    retVal = false;
 80023b6:	2000      	movls	r0, #0
  }
  return retVal;
}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80023bc:	7d00      	ldrb	r0, [r0, #20]
 80023be:	4770      	bx	lr

080023c0 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80023c0:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80023c2:	6884      	ldr	r4, [r0, #8]
 80023c4:	7d03      	ldrb	r3, [r0, #20]
 80023c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 80023ca:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80023cc:	68c2      	ldr	r2, [r0, #12]
{
 80023ce:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 80023d4:	295b      	cmp	r1, #91	; 0x5b
 80023d6:	d82f      	bhi.n	8002438 <UI_SetReg+0x78>
 80023d8:	e8df f001 	tbb	[pc, r1]
 80023dc:	412e2e3d 	.word	0x412e2e3d
 80023e0:	544e482e 	.word	0x544e482e
 80023e4:	726c665a 	.word	0x726c665a
 80023e8:	908a8478 	.word	0x908a8478
 80023ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80023f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80023f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80023f8:	2e2e2e2e 	.word	0x2e2e2e2e
 80023fc:	2e2e2e2e 	.word	0x2e2e2e2e
 8002400:	2e2e2e2e 	.word	0x2e2e2e2e
 8002404:	2e2e2e2e 	.word	0x2e2e2e2e
 8002408:	2e2e2e2e 	.word	0x2e2e2e2e
 800240c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002410:	2e2e2e2e 	.word	0x2e2e2e2e
 8002414:	2e2e2e2e 	.word	0x2e2e2e2e
 8002418:	2e2e2e2e 	.word	0x2e2e2e2e
 800241c:	2e2e962e 	.word	0x2e2e962e
 8002420:	2e2e2e2e 	.word	0x2e2e2e2e
 8002424:	2e2e2e2e 	.word	0x2e2e2e2e
 8002428:	2e2e2e2e 	.word	0x2e2e2e2e
 800242c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002430:	2e2e2e2e 	.word	0x2e2e2e2e
 8002434:	312e2e2e 	.word	0x312e2e2e
 8002438:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800243a:	b003      	add	sp, #12
 800243c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800243e:	493f      	ldr	r1, [pc, #252]	; (800253c <UI_SetReg+0x17c>)
 8002440:	fb81 3104 	smull	r3, r1, r1, r4
 8002444:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002448:	4628      	mov	r0, r5
 800244a:	2200      	movs	r2, #0
 800244c:	b209      	sxth	r1, r1
 800244e:	f7fe fa89 	bl	8000964 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002452:	2001      	movs	r0, #1
    break;
 8002454:	e7f1      	b.n	800243a <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002456:	b2e1      	uxtb	r1, r4
 8002458:	f7ff ffa8 	bl	80023ac <UI_SelectMC>
    break;
 800245c:	e7ed      	b.n	800243a <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800245e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002462:	d057      	beq.n	8002514 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002464:	2c01      	cmp	r4, #1
 8002466:	d05f      	beq.n	8002528 <UI_SetReg+0x168>
  bool retVal = true;
 8002468:	2001      	movs	r0, #1
 800246a:	e7e6      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	b221      	sxth	r1, r4
 8002470:	f002 fbf4 	bl	8004c5c <PID_SetKP>
  bool retVal = true;
 8002474:	2001      	movs	r0, #1
    break;
 8002476:	e7e0      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	b221      	sxth	r1, r4
 800247c:	f002 fbf0 	bl	8004c60 <PID_SetKI>
  bool retVal = true;
 8002480:	2001      	movs	r0, #1
    break;
 8002482:	e7da      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	b221      	sxth	r1, r4
 8002488:	f002 fbfa 	bl	8004c80 <PID_SetKD>
  bool retVal = true;
 800248c:	2001      	movs	r0, #1
    break;
 800248e:	e7d4      	b.n	800243a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002490:	4628      	mov	r0, r5
 8002492:	f7fe fb1f 	bl	8000ad4 <MCI_GetIqdref>
 8002496:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002498:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800249c:	4628      	mov	r0, r5
 800249e:	9901      	ldr	r1, [sp, #4]
 80024a0:	f7fe fa74 	bl	800098c <MCI_SetCurrentReferences>
  bool retVal = true;
 80024a4:	2001      	movs	r0, #1
    break;
 80024a6:	e7c8      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	b221      	sxth	r1, r4
 80024ac:	f002 fbd6 	bl	8004c5c <PID_SetKP>
  bool retVal = true;
 80024b0:	2001      	movs	r0, #1
    break;
 80024b2:	e7c2      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80024b4:	6858      	ldr	r0, [r3, #4]
 80024b6:	b221      	sxth	r1, r4
 80024b8:	f002 fbd2 	bl	8004c60 <PID_SetKI>
  bool retVal = true;
 80024bc:	2001      	movs	r0, #1
    break;
 80024be:	e7bc      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80024c0:	6858      	ldr	r0, [r3, #4]
 80024c2:	b221      	sxth	r1, r4
 80024c4:	f002 fbdc 	bl	8004c80 <PID_SetKD>
  bool retVal = true;
 80024c8:	2001      	movs	r0, #1
    break;
 80024ca:	e7b6      	b.n	800243a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 80024cc:	4628      	mov	r0, r5
 80024ce:	f7fe fb01 	bl	8000ad4 <MCI_GetIqdref>
 80024d2:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80024d4:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80024d8:	4628      	mov	r0, r5
 80024da:	9901      	ldr	r1, [sp, #4]
 80024dc:	f7fe fa56 	bl	800098c <MCI_SetCurrentReferences>
  bool retVal = true;
 80024e0:	2001      	movs	r0, #1
    break;
 80024e2:	e7aa      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80024e4:	6898      	ldr	r0, [r3, #8]
 80024e6:	b221      	sxth	r1, r4
 80024e8:	f002 fbb8 	bl	8004c5c <PID_SetKP>
  bool retVal = true;
 80024ec:	2001      	movs	r0, #1
    break;
 80024ee:	e7a4      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80024f0:	6898      	ldr	r0, [r3, #8]
 80024f2:	b221      	sxth	r1, r4
 80024f4:	f002 fbb4 	bl	8004c60 <PID_SetKI>
  bool retVal = true;
 80024f8:	2001      	movs	r0, #1
    break;
 80024fa:	e79e      	b.n	800243a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80024fc:	6898      	ldr	r0, [r3, #8]
 80024fe:	b221      	sxth	r1, r4
 8002500:	f002 fbbe 	bl	8004c80 <PID_SetKD>
  bool retVal = true;
 8002504:	2001      	movs	r0, #1
    break;
 8002506:	e798      	b.n	800243a <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002508:	4628      	mov	r0, r5
 800250a:	b221      	sxth	r1, r4
 800250c:	f7fe fb10 	bl	8000b30 <MCI_SetIdref>
  bool retVal = true;
 8002510:	2001      	movs	r0, #1
    break;
 8002512:	e792      	b.n	800243a <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002514:	4628      	mov	r0, r5
 8002516:	f7fe fb07 	bl	8000b28 <MCI_GetTeref>
 800251a:	4622      	mov	r2, r4
 800251c:	4601      	mov	r1, r0
 800251e:	4628      	mov	r0, r5
 8002520:	f7fe fa2a 	bl	8000978 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002524:	2001      	movs	r0, #1
 8002526:	e788      	b.n	800243a <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002528:	4628      	mov	r0, r5
 800252a:	f7fe faa5 	bl	8000a78 <MCI_GetMecSpeedRefUnit>
 800252e:	2200      	movs	r2, #0
 8002530:	4601      	mov	r1, r0
 8002532:	4628      	mov	r0, r5
 8002534:	f7fe fa16 	bl	8000964 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002538:	4620      	mov	r0, r4
 800253a:	e77e      	b.n	800243a <UI_SetReg+0x7a>
 800253c:	2aaaaaab 	.word	0x2aaaaaab

08002540 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002540:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002542:	68c4      	ldr	r4, [r0, #12]
 8002544:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002546:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002548:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800254c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002550:	b08d      	sub	sp, #52	; 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002552:	2a00      	cmp	r2, #0
 8002554:	f000 808b 	beq.w	800266e <UI_GetReg+0x12e>
  {
    *success = true;
 8002558:	f04f 0c01 	mov.w	ip, #1
 800255c:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8002560:	2981      	cmp	r1, #129	; 0x81
 8002562:	f200 8101 	bhi.w	8002768 <UI_GetReg+0x228>
 8002566:	e8df f011 	tbh	[pc, r1, lsl #1]
 800256a:	0143      	.short	0x0143
 800256c:	016f013d 	.word	0x016f013d
 8002570:	0164016b 	.word	0x0164016b
 8002574:	015c0160 	.word	0x015c0160
 8002578:	01020158 	.word	0x01020158
 800257c:	01aa01a2 	.word	0x01aa01a2
 8002580:	00fa01a6 	.word	0x00fa01a6
 8002584:	01b201b6 	.word	0x01b201b6
 8002588:	00ff01ae 	.word	0x00ff01ae
 800258c:	00ff00ff 	.word	0x00ff00ff
 8002590:	00ff00ff 	.word	0x00ff00ff
 8002594:	00ff00ff 	.word	0x00ff00ff
 8002598:	00ff00ff 	.word	0x00ff00ff
 800259c:	01540116 	.word	0x01540116
 80025a0:	00ff0150 	.word	0x00ff0150
 80025a4:	01d700ff 	.word	0x01d700ff
 80025a8:	0107010c 	.word	0x0107010c
 80025ac:	01d000ff 	.word	0x01d000ff
 80025b0:	01bc01cb 	.word	0x01bc01cb
 80025b4:	0146014b 	.word	0x0146014b
 80025b8:	0107010c 	.word	0x0107010c
 80025bc:	00fa0102 	.word	0x00fa0102
 80025c0:	01c60111 	.word	0x01c60111
 80025c4:	019d01c1 	.word	0x019d01c1
 80025c8:	01730188 	.word	0x01730188
 80025cc:	00ff00ff 	.word	0x00ff00ff
 80025d0:	00ff00ff 	.word	0x00ff00ff
 80025d4:	00ff00ff 	.word	0x00ff00ff
 80025d8:	00ff00ff 	.word	0x00ff00ff
 80025dc:	00ff00ff 	.word	0x00ff00ff
 80025e0:	00ff00ff 	.word	0x00ff00ff
 80025e4:	00ff00ff 	.word	0x00ff00ff
 80025e8:	012f0136 	.word	0x012f0136
 80025ec:	00ff00fa 	.word	0x00ff00fa
 80025f0:	00ff00ff 	.word	0x00ff00ff
 80025f4:	00ff00ff 	.word	0x00ff00ff
 80025f8:	00ff00ff 	.word	0x00ff00ff
 80025fc:	00ff00ff 	.word	0x00ff00ff
 8002600:	00ff00ff 	.word	0x00ff00ff
 8002604:	00ff00ff 	.word	0x00ff00ff
 8002608:	00ff00ff 	.word	0x00ff00ff
 800260c:	00ff00ff 	.word	0x00ff00ff
 8002610:	00ff00ff 	.word	0x00ff00ff
 8002614:	00ff00ff 	.word	0x00ff00ff
 8002618:	00ff00ff 	.word	0x00ff00ff
 800261c:	00ff00ff 	.word	0x00ff00ff
 8002620:	00ff011e 	.word	0x00ff011e
 8002624:	00ff00ff 	.word	0x00ff00ff
 8002628:	00ff00ff 	.word	0x00ff00ff
 800262c:	00ff00ff 	.word	0x00ff00ff
 8002630:	00ff00ff 	.word	0x00ff00ff
 8002634:	00ff00ff 	.word	0x00ff00ff
 8002638:	00ff00ff 	.word	0x00ff00ff
 800263c:	00ff00ff 	.word	0x00ff00ff
 8002640:	00ff00ff 	.word	0x00ff00ff
 8002644:	011a00ff 	.word	0x011a00ff
 8002648:	01ba012b 	.word	0x01ba012b
 800264c:	00f700ff 	.word	0x00f700ff
 8002650:	00ff00f7 	.word	0x00ff00f7
 8002654:	00ff00ff 	.word	0x00ff00ff
 8002658:	00ff00ff 	.word	0x00ff00ff
 800265c:	00ff00ff 	.word	0x00ff00ff
 8002660:	00ff00ff 	.word	0x00ff00ff
 8002664:	00ff00ff 	.word	0x00ff00ff
 8002668:	00ff00ff 	.word	0x00ff00ff
 800266c:	00f7      	.short	0x00f7
 800266e:	2970      	cmp	r1, #112	; 0x70
 8002670:	d872      	bhi.n	8002758 <UI_GetReg+0x218>
 8002672:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002676:	00bd      	.short	0x00bd
 8002678:	00e900b7 	.word	0x00e900b7
 800267c:	00de00e5 	.word	0x00de00e5
 8002680:	00d600da 	.word	0x00d600da
 8002684:	007c00d2 	.word	0x007c00d2
 8002688:	0124011c 	.word	0x0124011c
 800268c:	00740120 	.word	0x00740120
 8002690:	012c0130 	.word	0x012c0130
 8002694:	00710128 	.word	0x00710128
 8002698:	00710071 	.word	0x00710071
 800269c:	00710071 	.word	0x00710071
 80026a0:	00710071 	.word	0x00710071
 80026a4:	00710071 	.word	0x00710071
 80026a8:	00ce0090 	.word	0x00ce0090
 80026ac:	007100ca 	.word	0x007100ca
 80026b0:	01510071 	.word	0x01510071
 80026b4:	00810086 	.word	0x00810086
 80026b8:	014a0071 	.word	0x014a0071
 80026bc:	01360145 	.word	0x01360145
 80026c0:	00c000c5 	.word	0x00c000c5
 80026c4:	00810086 	.word	0x00810086
 80026c8:	0074007c 	.word	0x0074007c
 80026cc:	0140008b 	.word	0x0140008b
 80026d0:	0117013b 	.word	0x0117013b
 80026d4:	00ed0102 	.word	0x00ed0102
 80026d8:	00710071 	.word	0x00710071
 80026dc:	00710071 	.word	0x00710071
 80026e0:	00710071 	.word	0x00710071
 80026e4:	00710071 	.word	0x00710071
 80026e8:	00710071 	.word	0x00710071
 80026ec:	00710071 	.word	0x00710071
 80026f0:	00710071 	.word	0x00710071
 80026f4:	00a900b0 	.word	0x00a900b0
 80026f8:	00710074 	.word	0x00710074
 80026fc:	00710071 	.word	0x00710071
 8002700:	00710071 	.word	0x00710071
 8002704:	00710071 	.word	0x00710071
 8002708:	00710071 	.word	0x00710071
 800270c:	00710071 	.word	0x00710071
 8002710:	00710071 	.word	0x00710071
 8002714:	00710071 	.word	0x00710071
 8002718:	00710071 	.word	0x00710071
 800271c:	00710071 	.word	0x00710071
 8002720:	00710071 	.word	0x00710071
 8002724:	00710071 	.word	0x00710071
 8002728:	00710071 	.word	0x00710071
 800272c:	00710098 	.word	0x00710098
 8002730:	00710071 	.word	0x00710071
 8002734:	00710071 	.word	0x00710071
 8002738:	00710071 	.word	0x00710071
 800273c:	00710071 	.word	0x00710071
 8002740:	00710071 	.word	0x00710071
 8002744:	00710071 	.word	0x00710071
 8002748:	00710071 	.word	0x00710071
 800274c:	00710071 	.word	0x00710071
 8002750:	00940071 	.word	0x00940071
 8002754:	013400a5 	.word	0x013400a5
  int32_t bRetVal = 0;
 8002758:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 800275a:	b00d      	add	sp, #52	; 0x34
 800275c:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800275e:	4628      	mov	r0, r5
 8002760:	f7fe f9b8 	bl	8000ad4 <MCI_GetIqdref>
 8002764:	1400      	asrs	r0, r0, #16
    break;
 8002766:	e7f8      	b.n	800275a <UI_GetReg+0x21a>
        *success = false;
 8002768:	2000      	movs	r0, #0
 800276a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800276c:	e7f5      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800276e:	4628      	mov	r0, r5
 8002770:	f7fe f9b0 	bl	8000ad4 <MCI_GetIqdref>
 8002774:	b200      	sxth	r0, r0
    break;
 8002776:	e7f0      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002778:	4628      	mov	r0, r5
 800277a:	f7fe f99d 	bl	8000ab8 <MCI_GetIqd>
 800277e:	1400      	asrs	r0, r0, #16
    break;
 8002780:	e7eb      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002782:	4628      	mov	r0, r5
 8002784:	f7fe f998 	bl	8000ab8 <MCI_GetIqd>
 8002788:	b200      	sxth	r0, r0
    break;
 800278a:	e7e6      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).q;
 800278c:	4628      	mov	r0, r5
 800278e:	f7fe f9af 	bl	8000af0 <MCI_GetVqd>
 8002792:	b200      	sxth	r0, r0
    break;
 8002794:	e7e1      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002796:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002798:	f001 fd72 	bl	8004280 <VBS_GetAvBusVoltage_V>
    break;
 800279c:	e7dd      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800279e:	6820      	ldr	r0, [r4, #0]
 80027a0:	f002 fa6a 	bl	8004c78 <PID_GetKPDivisor>
    break;
 80027a4:	e7d9      	b.n	800275a <UI_GetReg+0x21a>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe f950 	bl	8000a4c <MCI_GetControlMode>
 80027ac:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80027ae:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80027b0:	f000 80c1 	beq.w	8002936 <UI_GetReg+0x3f6>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80027b4:	f7fe f960 	bl	8000a78 <MCI_GetMecSpeedRefUnit>
 80027b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027bc:	0040      	lsls	r0, r0, #1
 80027be:	e7cc      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	f002 fa5b 	bl	8004c7c <PID_GetKIDivisor>
    break;
 80027c6:	e7c8      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80027c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027ca:	f003 faf5 	bl	8005db8 <STC_GetMinAppNegativeMecSpeedUnit>
 80027ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027d2:	0040      	lsls	r0, r0, #1
    break;
 80027d4:	e7c1      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80027d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027d8:	f003 faec 	bl	8005db4 <STC_GetMaxAppPositiveMecSpeedUnit>
 80027dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027e0:	0040      	lsls	r0, r0, #1
    break;
 80027e2:	e7ba      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80027e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80027e6:	b00d      	add	sp, #52	; 0x34
 80027e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80027ec:	f003 bba2 	b.w	8005f34 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80027f0:	f7ff fde4 	bl	80023bc <UI_GetSelectedMC>
    break;
 80027f4:	e7b1      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe f950 	bl	8000a9c <MCI_GetIalphabeta>
 80027fc:	1400      	asrs	r0, r0, #16
    break;
 80027fe:	e7ac      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002800:	4628      	mov	r0, r5
 8002802:	f7fe f94b 	bl	8000a9c <MCI_GetIalphabeta>
 8002806:	b200      	sxth	r0, r0
    break;
 8002808:	e7a7      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800280a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800280c:	f002 f9c4 	bl	8004b98 <MPM_GetAvrgElMotorPowerW>
    break;
 8002810:	e7a3      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002812:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002814:	f002 fa04 	bl	8004c20 <NTC_GetAvTemp_C>
    break;
 8002818:	e79f      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f002 fa32 	bl	8004c84 <PID_GetKD>
    break;
 8002820:	e79b      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002822:	6820      	ldr	r0, [r4, #0]
 8002824:	f002 fa22 	bl	8004c6c <PID_GetKI>
    break;
 8002828:	e797      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	f002 fa1a 	bl	8004c64 <PID_GetKP>
    break;
 8002830:	e793      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002832:	4628      	mov	r0, r5
 8002834:	f7fe f920 	bl	8000a78 <MCI_GetMecSpeedRefUnit>
 8002838:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800283c:	0040      	lsls	r0, r0, #1
    break;
 800283e:	e78c      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002840:	4628      	mov	r0, r5
 8002842:	f7fe f903 	bl	8000a4c <MCI_GetControlMode>
    break;
 8002846:	e788      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002848:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800284a:	f003 fb65 	bl	8005f18 <STM_GetState>
	break;
 800284e:	e784      	b.n	800275a <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002850:	6902      	ldr	r2, [r0, #16]
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002856:	0f1a      	lsrs	r2, r3, #28
 8002858:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800285a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800285e:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002860:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002864:	d963      	bls.n	800292e <UI_GetReg+0x3ee>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002866:	2b01      	cmp	r3, #1
 8002868:	f63f af76 	bhi.w	8002758 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 800286c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800286e:	2800      	cmp	r0, #0
 8002870:	f43f af72 	beq.w	8002758 <UI_GetReg+0x218>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002874:	f003 f9de 	bl	8005c34 <SPD_GetS16Speed>
 8002878:	e76f      	b.n	800275a <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800287a:	6902      	ldr	r2, [r0, #16]
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002880:	0f1a      	lsrs	r2, r3, #28
 8002882:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002884:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002888:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800288a:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800288e:	d94a      	bls.n	8002926 <UI_GetReg+0x3e6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002890:	2b01      	cmp	r3, #1
 8002892:	f63f af61 	bhi.w	8002758 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 8002896:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002898:	2800      	cmp	r0, #0
 800289a:	f43f af5d 	beq.w	8002758 <UI_GetReg+0x218>
        bRetVal = SPD_GetElAngle(pSPD);
 800289e:	f003 f987 	bl	8005bb0 <SPD_GetElAngle>
 80028a2:	e75a      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7fe f931 	bl	8000b0c <MCI_GetValphabeta>
 80028aa:	1400      	asrs	r0, r0, #16
    break;
 80028ac:	e755      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	f002 f9d8 	bl	8004c64 <PID_GetKP>
    break;
 80028b4:	e751      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80028b6:	6860      	ldr	r0, [r4, #4]
 80028b8:	f002 f9e4 	bl	8004c84 <PID_GetKD>
    break;
 80028bc:	e74d      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80028be:	6860      	ldr	r0, [r4, #4]
 80028c0:	f002 f9d4 	bl	8004c6c <PID_GetKI>
    break;
 80028c4:	e749      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80028c6:	68a0      	ldr	r0, [r4, #8]
 80028c8:	f002 f9dc 	bl	8004c84 <PID_GetKD>
    break;
 80028cc:	e745      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80028ce:	68a0      	ldr	r0, [r4, #8]
 80028d0:	f002 f9cc 	bl	8004c6c <PID_GetKI>
    break;
 80028d4:	e741      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80028d6:	68a0      	ldr	r0, [r4, #8]
 80028d8:	f002 f9c4 	bl	8004c64 <PID_GetKP>
    break;
 80028dc:	e73d      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)(MC_UID);
 80028de:	4819      	ldr	r0, [pc, #100]	; (8002944 <UI_GetReg+0x404>)
 80028e0:	e73b      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).b;
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7fe f8cc 	bl	8000a80 <MCI_GetIab>
 80028e8:	1400      	asrs	r0, r0, #16
    break;
 80028ea:	e736      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80028ec:	4628      	mov	r0, r5
 80028ee:	f7fe f90d 	bl	8000b0c <MCI_GetValphabeta>
 80028f2:	b200      	sxth	r0, r0
    break;
 80028f4:	e731      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).d;
 80028f6:	4628      	mov	r0, r5
 80028f8:	f7fe f8fa 	bl	8000af0 <MCI_GetVqd>
 80028fc:	1400      	asrs	r0, r0, #16
    break;
 80028fe:	e72c      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).a;
 8002900:	4628      	mov	r0, r5
 8002902:	f7fe f8bd 	bl	8000a80 <MCI_GetIab>
 8002906:	b200      	sxth	r0, r0
    break;
 8002908:	e727      	b.n	800275a <UI_GetReg+0x21a>
      if (pMCT->pRevupCtrl)
 800290a:	6960      	ldr	r0, [r4, #20]
 800290c:	2800      	cmp	r0, #0
 800290e:	f43f af23 	beq.w	8002758 <UI_GetReg+0x218>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002912:	f003 fc4d 	bl	80061b0 <RUC_GetNumberOfPhases>
 8002916:	e720      	b.n	800275a <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002918:	4628      	mov	r0, r5
 800291a:	f7fe f8a5 	bl	8000a68 <MCI_GetAvrgMecSpeedUnit>
 800291e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002922:	0040      	lsls	r0, r0, #1
    break;
 8002924:	e719      	b.n	800275a <UI_GetReg+0x21a>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002926:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002928:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292a:	d8b5      	bhi.n	8002898 <UI_GetReg+0x358>
 800292c:	e7b3      	b.n	8002896 <UI_GetReg+0x356>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292e:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002930:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002932:	d89c      	bhi.n	800286e <UI_GetReg+0x32e>
 8002934:	e79a      	b.n	800286c <UI_GetReg+0x32c>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002936:	f7fe f88b 	bl	8000a50 <MCI_GetLastRampFinalSpeed>
 800293a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800293e:	0040      	lsls	r0, r0, #1
 8002940:	e70b      	b.n	800275a <UI_GetReg+0x21a>
 8002942:	bf00      	nop
 8002944:	34a6847a 	.word	0x34a6847a

08002948 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002948:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800294a:	6883      	ldr	r3, [r0, #8]
 800294c:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 800294e:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002950:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002954:	290d      	cmp	r1, #13
 8002956:	d808      	bhi.n	800296a <UI_ExecCmd+0x22>
 8002958:	e8df f001 	tbb	[pc, r1]
 800295c:	0e091419 	.word	0x0e091419
 8002960:	231e100e 	.word	0x231e100e
 8002964:	07070728 	.word	0x07070728
 8002968:	1407      	.short	0x1407
 800296a:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 800296c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 800296e:	4620      	mov	r0, r4
 8002970:	f7fe f868 	bl	8000a44 <MCI_GetSTMState>
 8002974:	2806      	cmp	r0, #6
 8002976:	d01e      	beq.n	80029b6 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002978:	2001      	movs	r0, #1
}
 800297a:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 800297c:	4620      	mov	r0, r4
 800297e:	f7fe f861 	bl	8000a44 <MCI_GetSTMState>
 8002982:	b120      	cbz	r0, 800298e <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe f815 	bl	80009b4 <MCI_StopMotor>
  bool retVal = true;
 800298a:	2001      	movs	r0, #1
}
 800298c:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 800298e:	4620      	mov	r0, r4
 8002990:	f7fe f806 	bl	80009a0 <MCI_StartMotor>
  bool retVal = true;
 8002994:	2001      	movs	r0, #1
}
 8002996:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002998:	4620      	mov	r0, r4
 800299a:	f7fe f80f 	bl	80009bc <MCI_FaultAcknowledged>
  bool retVal = true;
 800299e:	2001      	movs	r0, #1
}
 80029a0:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7fe f80e 	bl	80009c4 <MCI_EncoderAlign>
  bool retVal = true;
 80029a8:	2001      	movs	r0, #1
}
 80029aa:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f8c9 	bl	8000b44 <MCI_Clear_Iqdref>
  bool retVal = true;
 80029b2:	2001      	movs	r0, #1
}
 80029b4:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe f852 	bl	8000a60 <MCI_StopRamp>
  bool retVal = true;
 80029bc:	2001      	movs	r0, #1
}
 80029be:	bd10      	pop	{r4, pc}

080029c0 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80029c0:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029c4:	f890 c014 	ldrb.w	ip, [r0, #20]
 80029c8:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80029ca:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 80029ce:	fb83 c301 	smull	ip, r3, r3, r1
 80029d2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80029d6:	b209      	sxth	r1, r1
 80029d8:	f7fd ffc4 	bl	8000964 <MCI_ExecSpeedRamp>
  return true;
}
 80029dc:	2001      	movs	r0, #1
 80029de:	bd08      	pop	{r3, pc}
 80029e0:	2aaaaaab 	.word	0x2aaaaaab

080029e4 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80029e4:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029e6:	6883      	ldr	r3, [r0, #8]
 80029e8:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80029ec:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80029f0:	f7fd ffc2 	bl	8000978 <MCI_ExecTorqueRamp>
  return true;
}
 80029f4:	2001      	movs	r0, #1
 80029f6:	bd08      	pop	{r3, pc}

080029f8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	4617      	mov	r7, r2
 80029fc:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029fe:	7d02      	ldrb	r2, [r0, #20]
 8002a00:	68c3      	ldr	r3, [r0, #12]
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002a08:	b18c      	cbz	r4, 8002a2e <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	f003 fbb9 	bl	8006184 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a12:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a14:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a16:	4620      	mov	r0, r4
 8002a18:	f003 fbba 	bl	8006190 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a1c:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a1e:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a20:	4620      	mov	r0, r4
 8002a22:	f003 fbbd 	bl	80061a0 <RUC_GetPhaseFinalTorque>
 8002a26:	9b06      	ldr	r3, [sp, #24]
 8002a28:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002a2a:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002a2e:	4620      	mov	r0, r4
}
 8002a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a32:	bf00      	nop

08002a34 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a38:	7d06      	ldrb	r6, [r0, #20]
 8002a3a:	68c3      	ldr	r3, [r0, #12]
{
 8002a3c:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a3e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8002a42:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a46:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002a48:	9001      	str	r0, [sp, #4]
{
 8002a4a:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002a4c:	f003 fb88 	bl	8006160 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002a50:	9801      	ldr	r0, [sp, #4]
 8002a52:	462a      	mov	r2, r5
 8002a54:	4621      	mov	r1, r4
 8002a56:	f003 fb89 	bl	800616c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002a5a:	9801      	ldr	r0, [sp, #4]
 8002a5c:	4632      	mov	r2, r6
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f003 fb8a 	bl	8006178 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002a64:	2001      	movs	r0, #1
 8002a66:	b002      	add	sp, #8
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
 8002a6a:	bf00      	nop

08002a6c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002a6c:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a6e:	f890 c014 	ldrb.w	ip, [r0, #20]
 8002a72:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002a74:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002a78:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a7c:	9901      	ldr	r1, [sp, #4]
 8002a7e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002a82:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a84:	f7fd bf82 	b.w	800098c <MCI_SetCurrentReferences>

08002a88 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002a88:	2000      	movs	r0, #0
 8002a8a:	4770      	bx	lr

08002a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <SystemInit+0x18>)
 8002a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a96:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a9e:	6099      	str	r1, [r3, #8]
#endif
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_InitTick+0x3c>)
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_InitTick+0x40>)
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
{
 8002ab2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab8:	fbb0 f0f2 	udiv	r0, r0, r2
 8002abc:	fbb3 f0f0 	udiv	r0, r3, r0
 8002ac0:	f000 fad4 	bl	800306c <HAL_SYSTICK_Config>
 8002ac4:	b908      	cbnz	r0, 8002aca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	2d0f      	cmp	r5, #15
 8002ac8:	d901      	bls.n	8002ace <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002acc:	bd38      	pop	{r3, r4, r5, pc}
 8002ace:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 fa7c 	bl	8002fd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_InitTick+0x44>)
 8002ade:	4620      	mov	r0, r4
 8002ae0:	601d      	str	r5, [r3, #0]
}
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	20000574 	.word	0x20000574
 8002ae8:	20000570 	.word	0x20000570
 8002aec:	20000578 	.word	0x20000578

08002af0 <HAL_Init>:
{
 8002af0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_Init+0x30>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 fa4f 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b12:	2004      	movs	r0, #4
 8002b14:	f7ff ffc8 	bl	8002aa8 <HAL_InitTick>
  HAL_MspInit();
 8002b18:	f7ff f9a8 	bl	8001e6c <HAL_MspInit>
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	bd08      	pop	{r3, pc}
 8002b20:	40023c00 	.word	0x40023c00

08002b24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <HAL_IncTick+0x10>)
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_IncTick+0x14>)
 8002b28:	6811      	ldr	r1, [r2, #0]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	440b      	add	r3, r1
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	200008a4 	.word	0x200008a4
 8002b38:	20000574 	.word	0x20000574

08002b3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <HAL_GetTick+0x8>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200008a4 	.word	0x200008a4

08002b48 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	f000 809f 	beq.w	8002c8c <HAL_ADC_Init+0x144>
{
 8002b4e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b50:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002b52:	4604      	mov	r4, r0
 8002b54:	b13d      	cbz	r5, 8002b66 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b58:	06db      	lsls	r3, r3, #27
 8002b5a:	d50c      	bpl.n	8002b76 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8002b62:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002b66:	f7ff f99f 	bl	8001ea8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002b6e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b72:	06db      	lsls	r3, r3, #27
 8002b74:	d4f2      	bmi.n	8002b5c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b7e:	f023 0302 	bic.w	r3, r3, #2
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b8a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b8c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8002b90:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b92:	6851      	ldr	r1, [r2, #4]
 8002b94:	6860      	ldr	r0, [r4, #4]
 8002b96:	4301      	orrs	r1, r0
 8002b98:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b9a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b9c:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b9e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002bac:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8002bb4:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bbc:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bbe:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bc0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002bc4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bc6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bce:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_ADC_Init+0x158>)
 8002bd0:	4291      	cmp	r1, r2
 8002bd2:	d052      	beq.n	8002c7a <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd4:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bd6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd8:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8002bdc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4311      	orrs	r1, r2
 8002be2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002bea:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	432a      	orrs	r2, r5
 8002bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f022 0202 	bic.w	r2, r2, #2
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	7e21      	ldrb	r1, [r4, #24]
 8002bfe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002c02:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c04:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002c08:	2a00      	cmp	r2, #0
 8002c0a:	d041      	beq.n	8002c90 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c0c:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c10:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002c14:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c16:	6858      	ldr	r0, [r3, #4]
 8002c18:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002c1c:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c1e:	1e51      	subs	r1, r2, #1
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002c26:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c2a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c2c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	3901      	subs	r1, #1
 8002c38:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c3e:	6899      	ldr	r1, [r3, #8]
 8002c40:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002c44:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002c4c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8002c50:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c58:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c5a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c5e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002c62:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002c64:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c68:	f023 0303 	bic.w	r3, r3, #3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002c72:	2300      	movs	r3, #0
 8002c74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002c78:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	e7b2      	b.n	8002bf2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
}
 8002c8e:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e7c6      	b.n	8002c28 <HAL_ADC_Init+0xe0>
 8002c9a:	bf00      	nop
 8002c9c:	40012300 	.word	0x40012300
 8002ca0:	0f000001 	.word	0x0f000001

08002ca4 <HAL_ADC_ConfigChannel>:
{
 8002ca4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8002ca6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002caa:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002cac:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002cae:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002cb0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002cb2:	f000 809c 	beq.w	8002dee <HAL_ADC_ConfigChannel+0x14a>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cbc:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cbe:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cc0:	2c09      	cmp	r4, #9
 8002cc2:	d82d      	bhi.n	8002d20 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc4:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cc6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8002ccc:	f04f 0c07 	mov.w	ip, #7
 8002cd0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002cd4:	ea25 050c 	bic.w	r5, r5, ip
 8002cd8:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cda:	691d      	ldr	r5, [r3, #16]
 8002cdc:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ce0:	432a      	orrs	r2, r5
 8002ce2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8002ce4:	684a      	ldr	r2, [r1, #4]
 8002ce6:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ce8:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8002cea:	d82f      	bhi.n	8002d4c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf2:	3a05      	subs	r2, #5
 8002cf4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cf8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cfc:	fa0e f202 	lsl.w	r2, lr, r2
 8002d00:	ea21 0202 	bic.w	r2, r1, r2
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d08:	ea4c 0202 	orr.w	r2, ip, r2
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d0e:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <HAL_ADC_ConfigChannel+0x150>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d030      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8002d14:	2300      	movs	r3, #0
 8002d16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002d1a:	4618      	mov	r0, r3
}
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d20:	fa1f fc84 	uxth.w	ip, r4
 8002d24:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8002d28:	68dd      	ldr	r5, [r3, #12]
 8002d2a:	f1a2 0e1e 	sub.w	lr, r2, #30
 8002d2e:	2207      	movs	r2, #7
 8002d30:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d34:	ea25 0202 	bic.w	r2, r5, r2
 8002d38:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d3a:	688a      	ldr	r2, [r1, #8]
 8002d3c:	68dd      	ldr	r5, [r3, #12]
 8002d3e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d42:	432a      	orrs	r2, r5
 8002d44:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002d46:	684a      	ldr	r2, [r1, #4]
 8002d48:	2a06      	cmp	r2, #6
 8002d4a:	d9cf      	bls.n	8002cec <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8002d4c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8002d52:	d836      	bhi.n	8002dc2 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d56:	3a23      	subs	r2, #35	; 0x23
 8002d58:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d5a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d5e:	fa05 f202 	lsl.w	r2, r5, r2
 8002d62:	ea21 0202 	bic.w	r2, r1, r2
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6a:	ea4c 0202 	orr.w	r2, ip, r2
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_ADC_ConfigChannel+0x150>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d1ce      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
 8002d76:	2c12      	cmp	r4, #18
 8002d78:	d032      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d7a:	f1a4 0310 	sub.w	r3, r4, #16
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d8c8      	bhi.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_ADC_ConfigChannel+0x154>)
 8002d84:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d86:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d8e:	d1c1      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_ADC_ConfigChannel+0x158>)
 8002d92:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002d9c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	0c9b      	lsrs	r3, r3, #18
 8002da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0af      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8002db4:	9b01      	ldr	r3, [sp, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002dba:	9b01      	ldr	r3, [sp, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x110>
 8002dc0:	e7a8      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc4:	3a41      	subs	r2, #65	; 0x41
 8002dc6:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dc8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dcc:	fa05 f202 	lsl.w	r2, r5, r2
 8002dd0:	ea21 0202 	bic.w	r2, r1, r2
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	ea4c 0202 	orr.w	r2, ip, r2
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dde:	e796      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002de0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dec:	e792      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002dee:	2002      	movs	r0, #2
}
 8002df0:	b003      	add	sp, #12
 8002df2:	bd30      	pop	{r4, r5, pc}
 8002df4:	40012000 	.word	0x40012000
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	20000570 	.word	0x20000570

08002e00 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e06:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	f000 80c8 	beq.w	8002f9e <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002e14:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002e16:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002e18:	2d09      	cmp	r5, #9
 8002e1a:	d868      	bhi.n	8002eee <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e1c:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e1e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e20:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002e24:	2707      	movs	r7, #7
 8002e26:	fa07 f70c 	lsl.w	r7, r7, ip
 8002e2a:	ea24 0407 	bic.w	r4, r4, r7
 8002e2e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e30:	691c      	ldr	r4, [r3, #16]
 8002e32:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e36:	4322      	orrs	r2, r4
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e3e:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e42:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002e44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e4a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002e4c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8002e50:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e54:	1ce2      	adds	r2, r4, #3
 8002e56:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e5a:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002e60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e64:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e68:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e6c:	fa0e f202 	lsl.w	r2, lr, r2
 8002e70:	ea27 0202 	bic.w	r2, r7, r2
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e78:	ea4c 0202 	orr.w	r2, ip, r2
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e7e:	4a49      	ldr	r2, [pc, #292]	; (8002fa4 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8002e80:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002e8a:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e8c:	d066      	beq.n	8002f5c <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002e8e:	4316      	orrs	r6, r2
 8002e90:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002e92:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002e94:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002e96:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	4332      	orrs	r2, r6
 8002ea0:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002ea2:	7d4a      	ldrb	r2, [r1, #21]
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d034      	beq.n	8002f12 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eae:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002eb0:	7d0a      	ldrb	r2, [r1, #20]
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d034      	beq.n	8002f20 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002eb6:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8002eb8:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ebe:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002ec0:	d034      	beq.n	8002f2c <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8002ec2:	2c03      	cmp	r4, #3
 8002ec4:	d059      	beq.n	8002f7a <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8002ec6:	2c01      	cmp	r4, #1
 8002ec8:	d04c      	beq.n	8002f64 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002eca:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002ecc:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002ece:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002ed2:	f022 020f 	bic.w	r2, r2, #15
 8002ed6:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002ede:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d030      	beq.n	8002f46 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eea:	4618      	mov	r0, r3
}
 8002eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002eee:	fa1f fc85 	uxth.w	ip, r5
 8002ef2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8002ef6:	f1a2 041e 	sub.w	r4, r2, #30
 8002efa:	2707      	movs	r7, #7
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	40a7      	lsls	r7, r4
 8002f00:	ea22 0207 	bic.w	r2, r2, r7
 8002f04:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002f06:	688a      	ldr	r2, [r1, #8]
 8002f08:	40a2      	lsls	r2, r4
 8002f0a:	68dc      	ldr	r4, [r3, #12]
 8002f0c:	4322      	orrs	r2, r4
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	e794      	b.n	8002e3c <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f1a:	7d0a      	ldrb	r2, [r1, #20]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	d1ca      	bne.n	8002eb6 <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002f20:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002f22:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f28:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002f2a:	d1ca      	bne.n	8002ec2 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002f2c:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002f2e:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002f30:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f34:	f022 020f 	bic.w	r2, r2, #15
 8002f38:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d1ce      	bne.n	8002ee4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8002f46:	2d12      	cmp	r5, #18
 8002f48:	d022      	beq.n	8002f90 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002f4a:	3d10      	subs	r5, #16
 8002f4c:	2d01      	cmp	r5, #1
 8002f4e:	d8c9      	bhi.n	8002ee4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	e7c3      	b.n	8002ee4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002f5c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	e79e      	b.n	8002ea2 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002f64:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002f66:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002f68:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f6c:	f022 020f 	bic.w	r2, r2, #15
 8002f70:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	615a      	str	r2, [r3, #20]
      break;
 8002f78:	e7b1      	b.n	8002ede <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002f7a:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002f7c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002f7e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f82:	f022 020f 	bic.w	r2, r2, #15
 8002f86:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	61da      	str	r2, [r3, #28]
      break;
 8002f8e:	e7a6      	b.n	8002ede <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f90:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f98:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002f9c:	e7a2      	b.n	8002ee4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8002f9e:	2002      	movs	r0, #2
}
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000f0001 	.word	0x000f0001
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	40012300 	.word	0x40012300

08002fb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb0:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002fb2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002fca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_NVIC_SetPriority+0x74>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fdc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fde:	f1c3 0e07 	rsb	lr, r3, #7
 8002fe2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fea:	bf28      	it	cs
 8002fec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff0:	f1bc 0f06 	cmp.w	ip, #6
 8002ff4:	d91b      	bls.n	800302e <HAL_NVIC_SetPriority+0x5a>
 8002ff6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8002ffc:	fa0c fc03 	lsl.w	ip, ip, r3
 8003000:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 3cff 	mov.w	ip, #4294967295
 8003008:	fa0c fc0e 	lsl.w	ip, ip, lr
 800300c:	ea21 010c 	bic.w	r1, r1, ip
 8003010:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003012:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003018:	db0c      	blt.n	8003034 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800301e:	0109      	lsls	r1, r1, #4
 8003020:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003024:	b2c9      	uxtb	r1, r1
 8003026:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800302a:	f85d fb04 	ldr.w	pc, [sp], #4
 800302e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003030:	4613      	mov	r3, r2
 8003032:	e7e7      	b.n	8003004 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_NVIC_SetPriority+0x78>)
 8003036:	f000 000f 	and.w	r0, r0, #15
 800303a:	0109      	lsls	r1, r1, #4
 800303c:	4403      	add	r3, r0
 800303e:	b2c9      	uxtb	r1, r1
 8003040:	7619      	strb	r1, [r3, #24]
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00
 800304c:	e000ecfc 	.word	0xe000ecfc

08003050 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003050:	2800      	cmp	r0, #0
 8003052:	db08      	blt.n	8003066 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003054:	0941      	lsrs	r1, r0, #5
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_NVIC_EnableIRQ+0x18>)
 8003058:	f000 001f 	and.w	r0, r0, #31
 800305c:	2301      	movs	r3, #1
 800305e:	fa03 f000 	lsl.w	r0, r3, r0
 8003062:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100

0800306c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800306c:	3801      	subs	r0, #1
 800306e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003072:	d210      	bcs.n	8003096 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003074:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	4c08      	ldr	r4, [pc, #32]	; (800309c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003082:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003086:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003088:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800308a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800308c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800308e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003092:	6119      	str	r1, [r3, #16]
 8003094:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2001      	movs	r0, #1
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <HAL_SYSTICK_IRQHandler>:
{
 80030a4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80030a6:	f7ff fffb 	bl	80030a0 <HAL_SYSTICK_Callback>
}
 80030aa:	bd08      	pop	{r3, pc}

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b0:	680d      	ldr	r5, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 80032ac <HAL_GPIO_Init+0x200>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b6:	4e78      	ldr	r6, [pc, #480]	; (8003298 <HAL_GPIO_Init+0x1ec>)
{
 80030b8:	b085      	sub	sp, #20
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	2200      	movs	r2, #0
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030bc:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80030be:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	46a9      	mov	r9, r5
 80030c4:	9101      	str	r1, [sp, #4]
 80030c6:	e005      	b.n	80030d4 <HAL_GPIO_Init+0x28>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c8:	3301      	adds	r3, #1
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	f102 0202 	add.w	r2, r2, #2
 80030d0:	f000 808f 	beq.w	80031f2 <HAL_GPIO_Init+0x146>
    ioposition = 0x01U << position;
 80030d4:	fa0a f403 	lsl.w	r4, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d8:	ea04 0509 	and.w	r5, r4, r9
    if(iocurrent == ioposition)
 80030dc:	ea34 0109 	bics.w	r1, r4, r9
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e0:	9500      	str	r5, [sp, #0]
    if(iocurrent == ioposition)
 80030e2:	d1f1      	bne.n	80030c8 <HAL_GPIO_Init+0x1c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e4:	9901      	ldr	r1, [sp, #4]
 80030e6:	684d      	ldr	r5, [r1, #4]
 80030e8:	f025 0c10 	bic.w	ip, r5, #16
 80030ec:	f10c 34ff 	add.w	r4, ip, #4294967295
 80030f0:	2c01      	cmp	r4, #1
 80030f2:	f240 8081 	bls.w	80031f8 <HAL_GPIO_Init+0x14c>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f6:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 80030f8:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fa:	fa04 fe02 	lsl.w	lr, r4, r2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030fe:	2403      	movs	r4, #3
 8003100:	fa04 fc02 	lsl.w	ip, r4, r2
 8003104:	ea27 070c 	bic.w	r7, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	ea4e 0707 	orr.w	r7, lr, r7
      GPIOx->PUPDR = temp;
 800310c:	60c7      	str	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310e:	ea6f 040c 	mvn.w	r4, ip
      temp = GPIOx->MODER;
 8003112:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003114:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003116:	f005 0403 	and.w	r4, r5, #3
 800311a:	4094      	lsls	r4, r2
 800311c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311e:	00e9      	lsls	r1, r5, #3
      GPIOx->MODER = temp;
 8003120:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003122:	d5d1      	bpl.n	80030c8 <HAL_GPIO_Init+0x1c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003124:	2100      	movs	r1, #0
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312c:	495b      	ldr	r1, [pc, #364]	; (800329c <HAL_GPIO_Init+0x1f0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003132:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 8003136:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
 800313a:	f023 0703 	bic.w	r7, r3, #3
 800313e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003142:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003146:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800314a:	9403      	str	r4, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800314c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003150:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003156:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800315a:	240f      	movs	r4, #15
 800315c:	fa04 f40c 	lsl.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003160:	4288      	cmp	r0, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003162:	ea2e 0404 	bic.w	r4, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003166:	d016      	beq.n	8003196 <HAL_GPIO_Init+0xea>
 8003168:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800316c:	4288      	cmp	r0, r1
 800316e:	d07f      	beq.n	8003270 <HAL_GPIO_Init+0x1c4>
 8003170:	494b      	ldr	r1, [pc, #300]	; (80032a0 <HAL_GPIO_Init+0x1f4>)
 8003172:	4288      	cmp	r0, r1
 8003174:	f000 8081 	beq.w	800327a <HAL_GPIO_Init+0x1ce>
 8003178:	494a      	ldr	r1, [pc, #296]	; (80032a4 <HAL_GPIO_Init+0x1f8>)
 800317a:	4288      	cmp	r0, r1
 800317c:	f000 8084 	beq.w	8003288 <HAL_GPIO_Init+0x1dc>
 8003180:	4949      	ldr	r1, [pc, #292]	; (80032a8 <HAL_GPIO_Init+0x1fc>)
 8003182:	4288      	cmp	r0, r1
 8003184:	bf0c      	ite	eq
 8003186:	f04f 0e04 	moveq.w	lr, #4
 800318a:	f04f 0e07 	movne.w	lr, #7
 800318e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003192:	ea44 040c 	orr.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
 8003196:	9900      	ldr	r1, [sp, #0]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003198:	60bc      	str	r4, [r7, #8]
        temp = EXTI->IMR;
 800319a:	6834      	ldr	r4, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800319c:	ea6f 0c01 	mvn.w	ip, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a0:	03ef      	lsls	r7, r5, #15
        {
          temp |= iocurrent;
 80031a2:	bf4c      	ite	mi
 80031a4:	430c      	orrmi	r4, r1
        temp &= ~((uint32_t)iocurrent);
 80031a6:	ea0c 0404 	andpl.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80031aa:	6034      	str	r4, [r6, #0]

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ac:	03af      	lsls	r7, r5, #14
        {
          temp |= iocurrent;
 80031ae:	bf48      	it	mi
 80031b0:	9900      	ldrmi	r1, [sp, #0]
        temp = EXTI->EMR;
 80031b2:	6874      	ldr	r4, [r6, #4]
          temp |= iocurrent;
 80031b4:	bf4c      	ite	mi
 80031b6:	430c      	orrmi	r4, r1
        temp &= ~((uint32_t)iocurrent);
 80031b8:	ea0c 0404 	andpl.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80031bc:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031be:	02ec      	lsls	r4, r5, #11
        {
          temp |= iocurrent;
 80031c0:	bf48      	it	mi
 80031c2:	9900      	ldrmi	r1, [sp, #0]
        temp = EXTI->RTSR;
 80031c4:	68b7      	ldr	r7, [r6, #8]
          temp |= iocurrent;
 80031c6:	bf4c      	ite	mi
 80031c8:	430f      	orrmi	r7, r1
        temp &= ~((uint32_t)iocurrent);
 80031ca:	ea0c 0707 	andpl.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 80031ce:	60b7      	str	r7, [r6, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	02a9      	lsls	r1, r5, #10
        temp = EXTI->FTSR;
 80031d2:	68f4      	ldr	r4, [r6, #12]
        {
          temp |= iocurrent;
 80031d4:	bf48      	it	mi
 80031d6:	9900      	ldrmi	r1, [sp, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d8:	f103 0301 	add.w	r3, r3, #1
          temp |= iocurrent;
 80031dc:	bf4a      	itet	mi
 80031de:	4321      	orrmi	r1, r4
        temp &= ~((uint32_t)iocurrent);
 80031e0:	ea0c 0404 	andpl.w	r4, ip, r4
          temp |= iocurrent;
 80031e4:	460c      	movmi	r4, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80031e8:	60f4      	str	r4, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	f102 0202 	add.w	r2, r2, #2
 80031ee:	f47f af71 	bne.w	80030d4 <HAL_GPIO_Init+0x28>
      }
    }
  }
}
 80031f2:	b005      	add	sp, #20
 80031f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80031f8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fa:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	f04f 0803 	mov.w	r8, #3
 8003200:	fa08 f802 	lsl.w	r8, r8, r2
 8003204:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003208:	4094      	lsls	r4, r2
 800320a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800320c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800320e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003210:	9c00      	ldr	r4, [sp, #0]
 8003212:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003216:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800321a:	409c      	lsls	r4, r3
 800321c:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 800321e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003220:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003222:	ea27 0e08 	bic.w	lr, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003226:	688f      	ldr	r7, [r1, #8]
 8003228:	4097      	lsls	r7, r2
 800322a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322e:	f1bc 0f02 	cmp.w	ip, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003232:	ea6f 0408 	mvn.w	r4, r8
      GPIOx->PUPDR = temp;
 8003236:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003238:	f47f af6b 	bne.w	8003112 <HAL_GPIO_Init+0x66>
        temp = GPIOx->AFR[position >> 3U];
 800323c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8003240:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003244:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003248:	f8dc 7020 	ldr.w	r7, [ip, #32]
 800324c:	4639      	mov	r1, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800324e:	9f01      	ldr	r7, [sp, #4]
 8003250:	693f      	ldr	r7, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003256:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800325a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325e:	fa08 fe0e 	lsl.w	lr, r8, lr
 8003262:	ea21 0e0e 	bic.w	lr, r1, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003266:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	f8cc 7020 	str.w	r7, [ip, #32]
 800326e:	e750      	b.n	8003112 <HAL_GPIO_Init+0x66>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003270:	fa0a fc0c 	lsl.w	ip, sl, ip
 8003274:	ea44 040c 	orr.w	r4, r4, ip
 8003278:	e78d      	b.n	8003196 <HAL_GPIO_Init+0xea>
 800327a:	f04f 0e02 	mov.w	lr, #2
 800327e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003282:	ea44 040c 	orr.w	r4, r4, ip
 8003286:	e786      	b.n	8003196 <HAL_GPIO_Init+0xea>
 8003288:	f04f 0e03 	mov.w	lr, #3
 800328c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003290:	ea44 040c 	orr.w	r4, r4, ip
 8003294:	e77f      	b.n	8003196 <HAL_GPIO_Init+0xea>
 8003296:	bf00      	nop
 8003298:	40013c00 	.word	0x40013c00
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f000 819c 	beq.w	80035ee <HAL_RCC_OscConfig+0x33e>
{
 80032b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	07dd      	lsls	r5, r3, #31
{
 80032be:	b082      	sub	sp, #8
 80032c0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	d52f      	bpl.n	8003324 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c4:	499e      	ldr	r1, [pc, #632]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80032c6:	688a      	ldr	r2, [r1, #8]
 80032c8:	f002 020c 	and.w	r2, r2, #12
 80032cc:	2a04      	cmp	r2, #4
 80032ce:	f000 80ed 	beq.w	80034ac <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	688a      	ldr	r2, [r1, #8]
 80032d4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d8:	2a08      	cmp	r2, #8
 80032da:	f000 80e3 	beq.w	80034a4 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032de:	6863      	ldr	r3, [r4, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	f000 80ec 	beq.w	80034c0 <HAL_RCC_OscConfig+0x210>
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	f000 816f 	beq.w	80035ce <HAL_RCC_OscConfig+0x31e>
 80032f0:	4d93      	ldr	r5, [pc, #588]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80032f2:	682a      	ldr	r2, [r5, #0]
 80032f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	682a      	ldr	r2, [r5, #0]
 80032fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003300:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 80e1 	bne.w	80034ca <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7ff fc18 	bl	8002b3c <HAL_GetTick>
 800330c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e005      	b.n	800331c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7ff fc14 	bl	8002b3c <HAL_GetTick>
 8003314:	1b80      	subs	r0, r0, r6
 8003316:	2864      	cmp	r0, #100	; 0x64
 8003318:	f200 8101 	bhi.w	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	039b      	lsls	r3, r3, #14
 8003320:	d4f6      	bmi.n	8003310 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	079f      	lsls	r7, r3, #30
 8003326:	d528      	bpl.n	800337a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003328:	4a85      	ldr	r2, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 800332a:	6891      	ldr	r1, [r2, #8]
 800332c:	f011 0f0c 	tst.w	r1, #12
 8003330:	f000 8090 	beq.w	8003454 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003334:	6891      	ldr	r1, [r2, #8]
 8003336:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	2908      	cmp	r1, #8
 800333c:	f000 8086 	beq.w	800344c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003340:	68e3      	ldr	r3, [r4, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 810e 	beq.w	8003564 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b7e      	ldr	r3, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4e7d      	ldr	r6, [pc, #500]	; (8003540 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003350:	f7ff fbf4 	bl	8002b3c <HAL_GetTick>
 8003354:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	e005      	b.n	8003364 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003358:	f7ff fbf0 	bl	8002b3c <HAL_GetTick>
 800335c:	1b40      	subs	r0, r0, r5
 800335e:	2802      	cmp	r0, #2
 8003360:	f200 80dd 	bhi.w	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	6833      	ldr	r3, [r6, #0]
 8003366:	0798      	lsls	r0, r3, #30
 8003368:	d5f6      	bpl.n	8003358 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	6833      	ldr	r3, [r6, #0]
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003372:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003376:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	071a      	lsls	r2, r3, #28
 800337c:	d451      	bmi.n	8003422 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337e:	0758      	lsls	r0, r3, #29
 8003380:	d52f      	bpl.n	80033e2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003382:	4a6f      	ldr	r2, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 8003384:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003386:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800338a:	d07f      	beq.n	800348c <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 800338c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4e6e      	ldr	r6, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x298>)
 8003390:	6833      	ldr	r3, [r6, #0]
 8003392:	05d9      	lsls	r1, r3, #23
 8003394:	f140 80b3 	bpl.w	80034fe <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	68a3      	ldr	r3, [r4, #8]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f000 80c3 	beq.w	8003526 <HAL_RCC_OscConfig+0x276>
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	f000 8126 	beq.w	80035f2 <HAL_RCC_OscConfig+0x342>
 80033a6:	4e66      	ldr	r6, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80033a8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	6732      	str	r2, [r6, #112]	; 0x70
 80033b0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 80b9 	bne.w	8003530 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7ff fbbd 	bl	8002b3c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80033c6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	e005      	b.n	80033d6 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7ff fbb7 	bl	8002b3c <HAL_GetTick>
 80033ce:	1bc0      	subs	r0, r0, r7
 80033d0:	4540      	cmp	r0, r8
 80033d2:	f200 80a4 	bhi.w	800351e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80033d8:	0798      	lsls	r0, r3, #30
 80033da:	d4f6      	bmi.n	80033ca <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033dc:	2d00      	cmp	r5, #0
 80033de:	f040 8100 	bne.w	80035e2 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	69a0      	ldr	r0, [r4, #24]
 80033e4:	b1c8      	cbz	r0, 800341a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e6:	4d56      	ldr	r5, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80033e8:	68ab      	ldr	r3, [r5, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	f000 80c9 	beq.w	8003586 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_OscConfig+0x294>)
 80033f6:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	f000 8103 	beq.w	8003606 <HAL_RCC_OscConfig+0x356>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fb9c 	bl	8002b3c <HAL_GetTick>
 8003404:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	e005      	b.n	8003414 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7ff fb98 	bl	8002b3c <HAL_GetTick>
 800340c:	1b00      	subs	r0, r0, r4
 800340e:	2802      	cmp	r0, #2
 8003410:	f200 8085 	bhi.w	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	d4f6      	bmi.n	8003408 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2000      	movs	r0, #0
}
 800341c:	b002      	add	sp, #8
 800341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003422:	6963      	ldr	r3, [r4, #20]
 8003424:	b30b      	cbz	r3, 800346a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003428:	4e45      	ldr	r6, [pc, #276]	; (8003540 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800342a:	2201      	movs	r2, #1
 800342c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003430:	f7ff fb84 	bl	8002b3c <HAL_GetTick>
 8003434:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	e004      	b.n	8003442 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003438:	f7ff fb80 	bl	8002b3c <HAL_GetTick>
 800343c:	1b40      	subs	r0, r0, r5
 800343e:	2802      	cmp	r0, #2
 8003440:	d86d      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003444:	079b      	lsls	r3, r3, #30
 8003446:	d5f7      	bpl.n	8003438 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	e798      	b.n	800337e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344c:	6852      	ldr	r2, [r2, #4]
 800344e:	0256      	lsls	r6, r2, #9
 8003450:	f53f af76 	bmi.w	8003340 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003454:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	0795      	lsls	r5, r2, #30
 800345a:	d544      	bpl.n	80034e6 <HAL_RCC_OscConfig+0x236>
 800345c:	68e2      	ldr	r2, [r4, #12]
 800345e:	2a01      	cmp	r2, #1
 8003460:	d041      	beq.n	80034e6 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8003462:	2001      	movs	r0, #1
}
 8003464:	b002      	add	sp, #8
 8003466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800346a:	4a36      	ldr	r2, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4e34      	ldr	r6, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800346e:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003472:	f7ff fb63 	bl	8002b3c <HAL_GetTick>
 8003476:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	e004      	b.n	8003484 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347a:	f7ff fb5f 	bl	8002b3c <HAL_GetTick>
 800347e:	1b40      	subs	r0, r0, r5
 8003480:	2802      	cmp	r0, #2
 8003482:	d84c      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003486:	079f      	lsls	r7, r3, #30
 8003488:	d4f7      	bmi.n	800347a <HAL_RCC_OscConfig+0x1ca>
 800348a:	e7dd      	b.n	8003448 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034a0:	2501      	movs	r5, #1
 80034a2:	e774      	b.n	800338e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a4:	684a      	ldr	r2, [r1, #4]
 80034a6:	0250      	lsls	r0, r2, #9
 80034a8:	f57f af19 	bpl.w	80032de <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	0391      	lsls	r1, r2, #14
 80034b2:	f57f af37 	bpl.w	8003324 <HAL_RCC_OscConfig+0x74>
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	2a00      	cmp	r2, #0
 80034ba:	f47f af33 	bne.w	8003324 <HAL_RCC_OscConfig+0x74>
 80034be:	e7d0      	b.n	8003462 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034ca:	f7ff fb37 	bl	8002b3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4e1c      	ldr	r6, [pc, #112]	; (8003540 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80034d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e004      	b.n	80034de <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d4:	f7ff fb32 	bl	8002b3c <HAL_GetTick>
 80034d8:	1b40      	subs	r0, r0, r5
 80034da:	2864      	cmp	r0, #100	; 0x64
 80034dc:	d81f      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	6833      	ldr	r3, [r6, #0]
 80034e0:	039a      	lsls	r2, r3, #14
 80034e2:	d5f7      	bpl.n	80034d4 <HAL_RCC_OscConfig+0x224>
 80034e4:	e71d      	b.n	8003322 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80034e8:	6920      	ldr	r0, [r4, #16]
 80034ea:	680a      	ldr	r2, [r1, #0]
 80034ec:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80034f0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80034f4:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	071a      	lsls	r2, r3, #28
 80034f8:	f57f af41 	bpl.w	800337e <HAL_RCC_OscConfig+0xce>
 80034fc:	e791      	b.n	8003422 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	6833      	ldr	r3, [r6, #0]
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003506:	f7ff fb19 	bl	8002b3c <HAL_GetTick>
 800350a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	6833      	ldr	r3, [r6, #0]
 800350e:	05da      	lsls	r2, r3, #23
 8003510:	f53f af42 	bmi.w	8003398 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7ff fb12 	bl	8002b3c <HAL_GetTick>
 8003518:	1bc0      	subs	r0, r0, r7
 800351a:	2802      	cmp	r0, #2
 800351c:	d9f6      	bls.n	800350c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800351e:	2003      	movs	r0, #3
}
 8003520:	b002      	add	sp, #8
 8003522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003526:	4a06      	ldr	r2, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 8003528:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003530:	f7ff fb04 	bl	8002b3c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4f02      	ldr	r7, [pc, #8]	; (8003540 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003536:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x2a6>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7ff faf6 	bl	8002b3c <HAL_GetTick>
 8003550:	1b80      	subs	r0, r0, r6
 8003552:	4540      	cmp	r0, r8
 8003554:	d8e3      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003558:	079b      	lsls	r3, r3, #30
 800355a:	d5f7      	bpl.n	800354c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 800355c:	2d00      	cmp	r5, #0
 800355e:	f43f af40 	beq.w	80033e2 <HAL_RCC_OscConfig+0x132>
 8003562:	e03e      	b.n	80035e2 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 8003564:	4a3e      	ldr	r2, [pc, #248]	; (8003660 <HAL_RCC_OscConfig+0x3b0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4e3f      	ldr	r6, [pc, #252]	; (8003664 <HAL_RCC_OscConfig+0x3b4>)
        __HAL_RCC_HSI_DISABLE();
 8003568:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800356a:	f7ff fae7 	bl	8002b3c <HAL_GetTick>
 800356e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003570:	e004      	b.n	800357c <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7ff fae3 	bl	8002b3c <HAL_GetTick>
 8003576:	1b40      	subs	r0, r0, r5
 8003578:	2802      	cmp	r0, #2
 800357a:	d8d0      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357c:	6833      	ldr	r3, [r6, #0]
 800357e:	0799      	lsls	r1, r3, #30
 8003580:	d4f7      	bmi.n	8003572 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	e6f9      	b.n	800337a <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003586:	2801      	cmp	r0, #1
 8003588:	f43f af48 	beq.w	800341c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 800358c:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	69e2      	ldr	r2, [r4, #28]
 8003590:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003594:	4291      	cmp	r1, r2
 8003596:	f47f af64 	bne.w	8003462 <HAL_RCC_OscConfig+0x1b2>
 800359a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800359c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	4291      	cmp	r1, r2
 80035a2:	f47f af5e 	bne.w	8003462 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035a8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80035ac:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ae:	428a      	cmp	r2, r1
 80035b0:	f47f af57 	bne.w	8003462 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035ba:	4291      	cmp	r1, r2
 80035bc:	f47f af51 	bne.w	8003462 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035c2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 80035c6:	1a18      	subs	r0, r3, r0
 80035c8:	bf18      	it	ne
 80035ca:	2001      	movne	r0, #1
 80035cc:	e726      	b.n	800341c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x3b4>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035de:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e0:	e773      	b.n	80034ca <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4a20      	ldr	r2, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x3b4>)
 80035e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
 80035ec:	e6f9      	b.n	80033e2 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80035ee:	2001      	movs	r0, #1
}
 80035f0:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_RCC_OscConfig+0x3b4>)
 80035f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035f6:	f042 0204 	orr.w	r2, r2, #4
 80035fa:	671a      	str	r2, [r3, #112]	; 0x70
 80035fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003604:	e794      	b.n	8003530 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8003606:	f7ff fa99 	bl	8002b3c <HAL_GetTick>
 800360a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	e004      	b.n	8003618 <HAL_RCC_OscConfig+0x368>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7ff fa95 	bl	8002b3c <HAL_GetTick>
 8003612:	1b80      	subs	r0, r0, r6
 8003614:	2802      	cmp	r0, #2
 8003616:	d882      	bhi.n	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	0199      	lsls	r1, r3, #6
 800361c:	d4f7      	bmi.n	800360e <HAL_RCC_OscConfig+0x35e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800361e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003622:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003624:	430b      	orrs	r3, r1
 8003626:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800362a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003634:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003636:	490a      	ldr	r1, [pc, #40]	; (8003660 <HAL_RCC_OscConfig+0x3b0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800363c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003640:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003642:	f7ff fa7b 	bl	8002b3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4d07      	ldr	r5, [pc, #28]	; (8003664 <HAL_RCC_OscConfig+0x3b4>)
        tickstart = HAL_GetTick();
 8003648:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	e005      	b.n	8003658 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7ff fa76 	bl	8002b3c <HAL_GetTick>
 8003650:	1b00      	subs	r0, r0, r4
 8003652:	2802      	cmp	r0, #2
 8003654:	f63f af63 	bhi.w	800351e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	019a      	lsls	r2, r3, #6
 800365c:	d5f6      	bpl.n	800364c <HAL_RCC_OscConfig+0x39c>
 800365e:	e6dc      	b.n	800341a <HAL_RCC_OscConfig+0x16a>
 8003660:	42470000 	.word	0x42470000
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <HAL_RCC_EnableCSS+0x8>)
 800366a:	2201      	movs	r2, #1
 800366c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800366e:	4770      	bx	lr
 8003670:	42470000 	.word	0x42470000

08003674 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003674:	4910      	ldr	r1, [pc, #64]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8003676:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003678:	688b      	ldr	r3, [r1, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d001      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003682:	480e      	ldr	r0, [pc, #56]	; (80036bc <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003684:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003686:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003688:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	6849      	ldr	r1, [r1, #4]
 800368c:	480b      	ldr	r0, [pc, #44]	; (80036bc <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003696:	bf18      	it	ne
 8003698:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800369a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	f7fc fd99 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x44>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80036b2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80036b6:	bd08      	pop	{r3, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400

080036c0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80036c0:	2800      	cmp	r0, #0
 80036c2:	f000 8087 	beq.w	80037d4 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c6:	4a48      	ldr	r2, [pc, #288]	; (80037e8 <HAL_RCC_ClockConfig+0x128>)
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	428b      	cmp	r3, r1
{
 80036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d4:	460d      	mov	r5, r1
 80036d6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	d209      	bcs.n	80036ee <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	b2cb      	uxtb	r3, r1
 80036dc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	428b      	cmp	r3, r1
 80036e6:	d002      	beq.n	80036ee <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
}
 80036ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	0798      	lsls	r0, r3, #30
 80036f2:	d514      	bpl.n	800371e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	0759      	lsls	r1, r3, #29
 80036f6:	d504      	bpl.n	8003702 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	493c      	ldr	r1, [pc, #240]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 80036fa:	688a      	ldr	r2, [r1, #8]
 80036fc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003700:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	071a      	lsls	r2, r3, #28
 8003704:	d504      	bpl.n	8003710 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003706:	4939      	ldr	r1, [pc, #228]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 8003708:	688a      	ldr	r2, [r1, #8]
 800370a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800370e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4936      	ldr	r1, [pc, #216]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 8003712:	68a0      	ldr	r0, [r4, #8]
 8003714:	688a      	ldr	r2, [r1, #8]
 8003716:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800371a:	4302      	orrs	r2, r0
 800371c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	07df      	lsls	r7, r3, #31
 8003720:	d521      	bpl.n	8003766 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	6862      	ldr	r2, [r4, #4]
 8003724:	2a01      	cmp	r2, #1
 8003726:	d057      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003728:	1e93      	subs	r3, r2, #2
 800372a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 800372e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003730:	d94d      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	0799      	lsls	r1, r3, #30
 8003734:	d5d8      	bpl.n	80036e8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4e2d      	ldr	r6, [pc, #180]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 8003738:	68b3      	ldr	r3, [r6, #8]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	4313      	orrs	r3, r2
 8003740:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003742:	f7ff f9fb 	bl	8002b3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003746:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800374a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374c:	e004      	b.n	8003758 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7ff f9f5 	bl	8002b3c <HAL_GetTick>
 8003752:	1bc0      	subs	r0, r0, r7
 8003754:	4540      	cmp	r0, r8
 8003756:	d844      	bhi.n	80037e2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003758:	68b3      	ldr	r3, [r6, #8]
 800375a:	6862      	ldr	r2, [r4, #4]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003764:	d1f3      	bne.n	800374e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003766:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <HAL_RCC_ClockConfig+0x128>)
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	42ab      	cmp	r3, r5
 8003770:	d906      	bls.n	8003780 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	b2eb      	uxtb	r3, r5
 8003774:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	42ab      	cmp	r3, r5
 800377e:	d1b3      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	075a      	lsls	r2, r3, #29
 8003784:	d506      	bpl.n	8003794 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003786:	4919      	ldr	r1, [pc, #100]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 8003788:	68e0      	ldr	r0, [r4, #12]
 800378a:	688a      	ldr	r2, [r1, #8]
 800378c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003790:	4302      	orrs	r2, r0
 8003792:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	d507      	bpl.n	80037a8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 800379a:	6921      	ldr	r1, [r4, #16]
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80037a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80037a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a8:	f7ff ff64 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80037ac:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 80037ae:	4c10      	ldr	r4, [pc, #64]	; (80037f0 <HAL_RCC_ClockConfig+0x130>)
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	4910      	ldr	r1, [pc, #64]	; (80037f4 <HAL_RCC_ClockConfig+0x134>)
 80037b4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80037b8:	4603      	mov	r3, r0
 80037ba:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80037bc:	480e      	ldr	r0, [pc, #56]	; (80037f8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80037c0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c2:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80037c4:	f7ff f970 	bl	8002aa8 <HAL_InitTick>
  return HAL_OK;
 80037c8:	2000      	movs	r0, #0
}
 80037ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	0198      	lsls	r0, r3, #6
 80037d0:	d4b1      	bmi.n	8003736 <HAL_RCC_ClockConfig+0x76>
 80037d2:	e789      	b.n	80036e8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
}
 80037d6:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCC_ClockConfig+0x12c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	039e      	lsls	r6, r3, #14
 80037de:	d4aa      	bmi.n	8003736 <HAL_RCC_ClockConfig+0x76>
 80037e0:	e782      	b.n	80036e8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	e781      	b.n	80036ea <HAL_RCC_ClockConfig+0x2a>
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080064b8 	.word	0x080064b8
 80037f4:	20000570 	.word	0x20000570
 80037f8:	20000578 	.word	0x20000578

080037fc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80037fc:	4b01      	ldr	r3, [pc, #4]	; (8003804 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000570 	.word	0x20000570

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800380a:	4905      	ldr	r1, [pc, #20]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003810:	6808      	ldr	r0, [r1, #0]
 8003812:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003816:	5cd3      	ldrb	r3, [r2, r3]
}
 8003818:	40d8      	lsrs	r0, r3
 800381a:	4770      	bx	lr
 800381c:	40023800 	.word	0x40023800
 8003820:	20000570 	.word	0x20000570
 8003824:	080064c8 	.word	0x080064c8

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800382a:	4905      	ldr	r1, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003830:	6808      	ldr	r0, [r1, #0]
 8003832:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003836:	5cd3      	ldrb	r3, [r2, r3]
}
 8003838:	40d8      	lsrs	r0, r3
 800383a:	4770      	bx	lr
 800383c:	40023800 	.word	0x40023800
 8003840:	20000570 	.word	0x20000570
 8003844:	080064c8 	.word	0x080064c8

08003848 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	2800      	cmp	r0, #0
 800384a:	d064      	beq.n	8003916 <HAL_TIM_Base_Init+0xce>
{
 800384c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003852:	4604      	mov	r4, r0
 8003854:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003858:	2b00      	cmp	r3, #0
 800385a:	d043      	beq.n	80038e4 <HAL_TIM_Base_Init+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385e:	492f      	ldr	r1, [pc, #188]	; (800391c <HAL_TIM_Base_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003866:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003868:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386a:	d040      	beq.n	80038ee <HAL_TIM_Base_Init+0xa6>
 800386c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003870:	d021      	beq.n	80038b6 <HAL_TIM_Base_Init+0x6e>
 8003872:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003876:	428a      	cmp	r2, r1
 8003878:	d01d      	beq.n	80038b6 <HAL_TIM_Base_Init+0x6e>
 800387a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800387e:	428a      	cmp	r2, r1
 8003880:	d019      	beq.n	80038b6 <HAL_TIM_Base_Init+0x6e>
 8003882:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003886:	428a      	cmp	r2, r1
 8003888:	d015      	beq.n	80038b6 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800388e:	428a      	cmp	r2, r1
 8003890:	d015      	beq.n	80038be <HAL_TIM_Base_Init+0x76>
 8003892:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003896:	428a      	cmp	r2, r1
 8003898:	d011      	beq.n	80038be <HAL_TIM_Base_Init+0x76>
 800389a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800389e:	428a      	cmp	r2, r1
 80038a0:	d00d      	beq.n	80038be <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a2:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038aa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80038ac:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ae:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038b2:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	e010      	b.n	80038d8 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80038b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038bc:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ce:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80038d0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80038d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038d6:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	2301      	movs	r3, #1
 80038da:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80038e0:	2000      	movs	r0, #0
}
 80038e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80038e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80038e8:	f7fe fb24 	bl	8001f34 <HAL_TIM_Base_MspInit>
 80038ec:	e7b6      	b.n	800385c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80038ee:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038f6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fe:	69a1      	ldr	r1, [r4, #24]
 8003900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003904:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003906:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	68e3      	ldr	r3, [r4, #12]
 800390a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	6963      	ldr	r3, [r4, #20]
 8003912:	6313      	str	r3, [r2, #48]	; 0x30
 8003914:	e7e0      	b.n	80038d8 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000

08003920 <HAL_TIM_PWM_MspInit>:
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003924:	2800      	cmp	r0, #0
 8003926:	d064      	beq.n	80039f2 <HAL_TIM_PWM_Init+0xce>
{
 8003928:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800392e:	4604      	mov	r4, r0
 8003930:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_TIM_PWM_Init+0x9c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003938:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393a:	492f      	ldr	r1, [pc, #188]	; (80039f8 <HAL_TIM_PWM_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003942:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003944:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003946:	d040      	beq.n	80039ca <HAL_TIM_PWM_Init+0xa6>
 8003948:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800394c:	d021      	beq.n	8003992 <HAL_TIM_PWM_Init+0x6e>
 800394e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003952:	428a      	cmp	r2, r1
 8003954:	d01d      	beq.n	8003992 <HAL_TIM_PWM_Init+0x6e>
 8003956:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800395a:	428a      	cmp	r2, r1
 800395c:	d019      	beq.n	8003992 <HAL_TIM_PWM_Init+0x6e>
 800395e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003962:	428a      	cmp	r2, r1
 8003964:	d015      	beq.n	8003992 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800396a:	428a      	cmp	r2, r1
 800396c:	d015      	beq.n	800399a <HAL_TIM_PWM_Init+0x76>
 800396e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003972:	428a      	cmp	r2, r1
 8003974:	d011      	beq.n	800399a <HAL_TIM_PWM_Init+0x76>
 8003976:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800397a:	428a      	cmp	r2, r1
 800397c:	d00d      	beq.n	800399a <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800397e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003986:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003988:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800398a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800398e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003990:	e010      	b.n	80039b4 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003992:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003998:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800399c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039aa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80039ac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80039ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039b2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80039b4:	2301      	movs	r3, #1
 80039b6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039bc:	2000      	movs	r0, #0
}
 80039be:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80039c4:	f7ff ffac 	bl	8003920 <HAL_TIM_PWM_MspInit>
 80039c8:	e7b6      	b.n	8003938 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80039ca:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039cc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039d2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039da:	69a1      	ldr	r1, [r4, #24]
 80039dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80039e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	68e3      	ldr	r3, [r4, #12]
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	6963      	ldr	r3, [r4, #20]
 80039ee:	6313      	str	r3, [r2, #48]	; 0x30
 80039f0:	e7e0      	b.n	80039b4 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80039fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f000 80b7 	beq.w	8003b74 <HAL_TIM_PWM_ConfigChannel+0x178>
 8003a06:	f04f 0c01 	mov.w	ip, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	2302      	movs	r3, #2
{
 8003a0c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003a0e:	f880 c03c 	strb.w	ip, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003a16:	2a0c      	cmp	r2, #12
 8003a18:	d82d      	bhi.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x7a>
 8003a1a:	e8df f002 	tbb	[pc, r2]
 8003a1e:	2c07      	.short	0x2c07
 8003a20:	2c5d2c2c 	.word	0x2c5d2c2c
 8003a24:	2c852c2c 	.word	0x2c852c2c
 8003a28:	2c2c      	.short	0x2c2c
 8003a2a:	35          	.byte	0x35
 8003a2b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2c:	6803      	ldr	r3, [r0, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003a38:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003a3a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a3c:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a3e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a42:	4334      	orrs	r4, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a44:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003a46:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8003a4a:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a4c:	4e63      	ldr	r6, [pc, #396]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003a4e:	42b3      	cmp	r3, r6
 8003a50:	f000 8092 	beq.w	8003b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a56:	619c      	str	r4, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a58:	684c      	ldr	r4, [r1, #4]
 8003a5a:	635c      	str	r4, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a5e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a60:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a62:	f044 0408 	orr.w	r4, r4, #8
 8003a66:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	f021 0104 	bic.w	r1, r1, #4
 8003a6e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	432a      	orrs	r2, r5
 8003a74:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003a76:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003a82:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003a84:	4618      	mov	r0, r3
}
 8003a86:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a88:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a92:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003a94:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003a96:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003a98:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a9a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa2:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	4e4b      	ldr	r6, [pc, #300]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003aae:	42b3      	cmp	r3, r6
 8003ab0:	d07e      	beq.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab4:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab6:	684c      	ldr	r4, [r1, #4]
 8003ab8:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003abc:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003abe:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003ac4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003acc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003ad4:	61da      	str	r2, [r3, #28]
      break;
 8003ad6:	e7ce      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ada:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f022 0210 	bic.w	r2, r2, #16
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ae6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ae8:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aea:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aee:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af2:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003af4:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	4e37      	ldr	r6, [pc, #220]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003afe:	42b3      	cmp	r3, r6
 8003b00:	d047      	beq.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CR2 = tmpcr2;
 8003b02:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b04:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b06:	684c      	ldr	r4, [r1, #4]
 8003b08:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003b0a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b0e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b10:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003b14:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b16:	6999      	ldr	r1, [r3, #24]
 8003b18:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b1c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003b24:	619a      	str	r2, [r3, #24]
      break;
 8003b26:	e7a6      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b28:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003b2a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b32:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003b34:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b36:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b38:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003b3e:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b40:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003b42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b46:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b4a:	4e24      	ldr	r6, [pc, #144]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003b4c:	42b3      	cmp	r3, r6
 8003b4e:	d035      	beq.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8003b50:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b52:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b54:	684c      	ldr	r4, [r1, #4]
 8003b56:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003b58:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5e:	f044 0408 	orr.w	r4, r4, #8
 8003b62:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b64:	69d9      	ldr	r1, [r3, #28]
 8003b66:	f021 0104 	bic.w	r1, r1, #4
 8003b6a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	432a      	orrs	r2, r5
 8003b70:	61da      	str	r2, [r3, #28]
      break;
 8003b72:	e780      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_LOCK(htim);
 8003b74:	2002      	movs	r0, #2
}
 8003b76:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003b78:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b7a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003b7e:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b80:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b84:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b88:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8e:	4335      	orrs	r5, r6
 8003b90:	e760      	b.n	8003a54 <HAL_TIM_PWM_ConfigChannel+0x58>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b92:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b98:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b9c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba0:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003baa:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8003bae:	e7a8      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bb2:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb6:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8003bba:	e77a      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0xb6>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bc6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bca:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bce:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bd4:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8003bd8:	e7ba      	b.n	8003b50 <HAL_TIM_PWM_ConfigChannel+0x154>
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000

08003be0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003be0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d074      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xf2>
{
 8003be8:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8003bea:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003bec:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003bf0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003bfa:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003c00:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003c04:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003c06:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c08:	d065      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xf6>
 8003c0a:	d831      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x90>
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d048      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0xc2>
 8003c10:	d921      	bls.n	8003c56 <HAL_TIM_ConfigClockSource+0x76>
 8003c12:	2b50      	cmp	r3, #80	; 0x50
 8003c14:	d116      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	684c      	ldr	r4, [r1, #4]
 8003c18:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1a:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003c20:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c22:	6a14      	ldr	r4, [r2, #32]
 8003c24:	f024 0401 	bic.w	r4, r4, #1
 8003c28:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c34:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003c36:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c38:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c3e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003c44:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	2201      	movs	r2, #1
 8003c48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003c50:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003c52:	4618      	mov	r0, r3
}
 8003c54:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d002      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x80>
 8003c5a:	d91e      	bls.n	8003c9a <HAL_TIM_ConfigClockSource+0xba>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d1f1      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003c60:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003c6c:	6093      	str	r3, [r2, #8]
}
 8003c6e:	e7e9      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d049      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0x128>
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d1e4      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c7e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c80:	432b      	orrs	r3, r5
 8003c82:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003c8c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c90:	6893      	ldr	r3, [r2, #8]
 8003c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c96:	6093      	str	r3, [r2, #8]
      break;
 8003c98:	e7d4      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003c9a:	f033 0110 	bics.w	r1, r3, #16
 8003c9e:	d1d1      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
 8003ca0:	e7de      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x80>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	684c      	ldr	r4, [r1, #4]
 8003ca4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ca6:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003cac:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cae:	6a14      	ldr	r4, [r2, #32]
 8003cb0:	f024 0401 	bic.w	r4, r4, #1
 8003cb4:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003cc0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003cc2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003cc4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003cce:	6093      	str	r3, [r2, #8]
}
 8003cd0:	e7b8      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8003cd2:	2002      	movs	r0, #2
}
 8003cd4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd8:	68cb      	ldr	r3, [r1, #12]
 8003cda:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	f024 0410 	bic.w	r4, r4, #16
 8003ce0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce8:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8003cec:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003cee:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003cf8:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003cfa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d00:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003d04:	6093      	str	r3, [r2, #8]
}
 8003d06:	e79d      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d08:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003d0c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0e:	432b      	orrs	r3, r5
 8003d10:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d12:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d1a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d1c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003d1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d24:	6093      	str	r3, [r2, #8]
      break;
 8003d26:	e78d      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x64>

08003d28 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003d28:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003d2c:	2a01      	cmp	r2, #1
 8003d2e:	d049      	beq.n	8003dc4 <HAL_TIM_SlaveConfigSynchro+0x9c>
 8003d30:	4603      	mov	r3, r0
{
 8003d32:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003d36:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003d42:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d44:	684d      	ldr	r5, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d46:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d4c:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d4e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d52:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 8003d54:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003d56:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003d58:	d04d      	beq.n	8003df6 <HAL_TIM_SlaveConfigSynchro+0xce>
 8003d5a:	d825      	bhi.n	8003da8 <HAL_TIM_SlaveConfigSynchro+0x80>
 8003d5c:	2d40      	cmp	r5, #64	; 0x40
 8003d5e:	d033      	beq.n	8003dc8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 8003d60:	2d50      	cmp	r5, #80	; 0x50
 8003d62:	d110      	bne.n	8003d86 <HAL_TIM_SlaveConfigSynchro+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d64:	6888      	ldr	r0, [r1, #8]
 8003d66:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8003d68:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d6a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003d6e:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d70:	6a20      	ldr	r0, [r4, #32]
 8003d72:	f020 0001 	bic.w	r0, r0, #1
 8003d76:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d78:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d7e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d82:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003d84:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d86:	68e2      	ldr	r2, [r4, #12]
 8003d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8c:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d8e:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8003d90:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d98:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003d9a:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d9e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8003da2:	4608      	mov	r0, r1
}
 8003da4:	bc70      	pop	{r4, r5, r6}
 8003da6:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8003da8:	2d70      	cmp	r5, #112	; 0x70
 8003daa:	d1ec      	bne.n	8003d86 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dac:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8003db0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db2:	432a      	orrs	r2, r5
 8003db4:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003dbe:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003dc0:	60a2      	str	r2, [r4, #8]
 8003dc2:	e7e0      	b.n	8003d86 <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8003dc4:	2002      	movs	r0, #2
}
 8003dc6:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003dc8:	2e05      	cmp	r6, #5
 8003dca:	d00d      	beq.n	8003de8 <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8003dcc:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003dce:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dd0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003dd2:	f020 0001 	bic.w	r0, r0, #1
 8003dd6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003dd8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dde:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003de2:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8003de4:	6225      	str	r5, [r4, #32]
      break;
 8003de6:	e7ce      	b.n	8003d86 <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8003de8:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8003dea:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003df2:	bc70      	pop	{r4, r5, r6}
 8003df4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df6:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df8:	690a      	ldr	r2, [r1, #16]
 8003dfa:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfc:	f020 0010 	bic.w	r0, r0, #16
 8003e00:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e04:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e08:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8003e0c:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0e:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003e18:	6222      	str	r2, [r4, #32]
 8003e1a:	e7b4      	b.n	8003d86 <HAL_TIM_SlaveConfigSynchro+0x5e>

08003e1c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8003e1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	4290      	cmp	r0, r2
{
 8003e22:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	d039      	beq.n	8003e9a <TIM_Base_SetConfig+0x7e>
 8003e26:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e2a:	d021      	beq.n	8003e70 <TIM_Base_SetConfig+0x54>
 8003e2c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003e30:	4290      	cmp	r0, r2
 8003e32:	d01d      	beq.n	8003e70 <TIM_Base_SetConfig+0x54>
 8003e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e38:	4290      	cmp	r0, r2
 8003e3a:	d019      	beq.n	8003e70 <TIM_Base_SetConfig+0x54>
 8003e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e40:	4290      	cmp	r0, r2
 8003e42:	d015      	beq.n	8003e70 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e44:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003e48:	4290      	cmp	r0, r2
 8003e4a:	d015      	beq.n	8003e78 <TIM_Base_SetConfig+0x5c>
 8003e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e50:	4290      	cmp	r0, r2
 8003e52:	d011      	beq.n	8003e78 <TIM_Base_SetConfig+0x5c>
 8003e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e58:	4290      	cmp	r0, r2
 8003e5a:	d00d      	beq.n	8003e78 <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003e60:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e66:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003e68:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e6c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6e:	e010      	b.n	8003e92 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8003e70:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e76:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e78:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e80:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e86:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003e8a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003e8c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e90:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003e92:	2301      	movs	r3, #1
}
 8003e94:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003e96:	6143      	str	r3, [r0, #20]
}
 8003e98:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003e9a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ea2:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eaa:	694a      	ldr	r2, [r1, #20]
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003eb2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb4:	688b      	ldr	r3, [r1, #8]
 8003eb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003eb8:	680b      	ldr	r3, [r1, #0]
 8003eba:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebc:	690b      	ldr	r3, [r1, #16]
 8003ebe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ec0:	2301      	movs	r3, #1
}
 8003ec2:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003ec4:	6143      	str	r3, [r0, #20]
}
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000

08003ecc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	6a03      	ldr	r3, [r0, #32]
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003ed4:	6a03      	ldr	r3, [r0, #32]
{
 8003ed6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8003ed8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003eda:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003edc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ede:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef0:	4d0c      	ldr	r5, [pc, #48]	; (8003f24 <TIM_OC2_SetConfig+0x58>)
 8003ef2:	42a8      	cmp	r0, r5
 8003ef4:	d006      	beq.n	8003f04 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ef8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003efa:	6182      	str	r2, [r0, #24]
}
 8003efc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8003efe:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003f00:	6203      	str	r3, [r0, #32]
}
 8003f02:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f0a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f0e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f12:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f1c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003f20:	e7e9      	b.n	8003ef6 <TIM_OC2_SetConfig+0x2a>
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000

08003f28 <TIM_TI1_SetConfig>:
{
 8003f28:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f2c:	4e17      	ldr	r6, [pc, #92]	; (8003f8c <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	f025 0501 	bic.w	r5, r5, #1
 8003f32:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f34:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f38:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f3a:	d015      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
 8003f3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f40:	d012      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
 8003f42:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003f46:	42b0      	cmp	r0, r6
 8003f48:	d00e      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
 8003f4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f4e:	42b0      	cmp	r0, r6
 8003f50:	d00a      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
 8003f52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f56:	42b0      	cmp	r0, r6
 8003f58:	d006      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
 8003f5a:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8003f5e:	42b0      	cmp	r0, r6
 8003f60:	d002      	beq.n	8003f68 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f62:	f044 0201 	orr.w	r2, r4, #1
 8003f66:	e002      	b.n	8003f6e <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f68:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003f6c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f6e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f70:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f78:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f7a:	f001 010a 	and.w	r1, r1, #10
 8003f7e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f80:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	6183      	str	r3, [r0, #24]
}
 8003f84:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8003f86:	6201      	str	r1, [r0, #32]
}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000

08003f90 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop

08003f94 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d056      	beq.n	8004046 <HAL_TIMEx_HallSensor_Init+0xb2>
{
 8003f98:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d047      	beq.n	800403c <HAL_TIMEx_HallSensor_Init+0xa8>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003fb8:	f7ff ff30 	bl	8003e1c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003fbc:	68ab      	ldr	r3, [r5, #8]
 8003fbe:	6829      	ldr	r1, [r5, #0]
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	f7ff ffb0 	bl	8003f28 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fc8:	6823      	ldr	r3, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003fca:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fcc:	6999      	ldr	r1, [r3, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003fce:	68e8      	ldr	r0, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fd0:	f021 010c 	bic.w	r1, r1, #12
 8003fd4:	6199      	str	r1, [r3, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	4332      	orrs	r2, r6
 8003fda:	619a      	str	r2, [r3, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003fe4:	689a      	ldr	r2, [r3, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003fe6:	9002      	str	r0, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003fe8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	f022 0207 	bic.w	r2, r2, #7
 8003ffc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	f042 0204 	orr.w	r2, r2, #4
 8004004:	609a      	str	r2, [r3, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004006:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004008:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800400a:	2270      	movs	r2, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800400c:	4618      	mov	r0, r3
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800400e:	9201      	str	r2, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004010:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004014:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004018:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800401a:	f7ff ff57 	bl	8003ecc <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004026:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004028:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 800402a:	2101      	movs	r1, #1
  return HAL_OK;
 800402c:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800402e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004032:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004034:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004038:	b008      	add	sp, #32
 800403a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800403c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004040:	f7ff ffa6 	bl	8003f90 <HAL_TIMEx_HallSensor_MspInit>
 8004044:	e7b2      	b.n	8003fac <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004046:	2001      	movs	r0, #1
}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d02f      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004054:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004056:	2202      	movs	r2, #2
{
 8004058:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800405a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800405e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004060:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004062:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004064:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800406a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406c:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d012      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d00f      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004078:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004090:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004094:	4293      	cmp	r3, r2
 8004096:	d104      	bne.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004098:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80040a2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	2201      	movs	r2, #1
 80040a6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80040ae:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80040b0:	4618      	mov	r0, r3
}
 80040b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80040b4:	2002      	movs	r0, #2
}
 80040b6:	4770      	bx	lr
 80040b8:	40010000 	.word	0x40010000

080040bc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d023      	beq.n	800410c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80040c4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040c6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	4602      	mov	r2, r0
 80040d0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040d4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040e2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ea:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ec:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040f8:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 80040fa:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040fc:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80040fe:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004100:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004104:	4608      	mov	r0, r1
}
 8004106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800410a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800410c:	2002      	movs	r0, #2
}
 800410e:	4770      	bx	lr

08004110 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	2800      	cmp	r0, #0
 8004112:	f000 80af 	beq.w	8004274 <HAL_UART_Init+0x164>
{
 8004116:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004118:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800411c:	4604      	mov	r4, r0
 800411e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 809e 	beq.w	8004264 <HAL_UART_Init+0x154>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004128:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412a:	68e0      	ldr	r0, [r4, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412c:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800413e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004144:	4301      	orrs	r1, r0
 8004146:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004148:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414a:	69e0      	ldr	r0, [r4, #28]
 800414c:	432a      	orrs	r2, r5
 800414e:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004150:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004154:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004156:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800415c:	430a      	orrs	r2, r1
 800415e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	69a1      	ldr	r1, [r4, #24]
 8004164:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004168:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416e:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004170:	4a41      	ldr	r2, [pc, #260]	; (8004278 <HAL_UART_Init+0x168>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004172:	d04f      	beq.n	8004214 <HAL_UART_Init+0x104>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004174:	4293      	cmp	r3, r2
 8004176:	d032      	beq.n	80041de <HAL_UART_Init+0xce>
 8004178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800417c:	4293      	cmp	r3, r2
 800417e:	d02e      	beq.n	80041de <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff fb42 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	4d3d      	ldr	r5, [pc, #244]	; (800427c <HAL_UART_Init+0x16c>)
 8004188:	2119      	movs	r1, #25
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	fba0 0101 	umull	r0, r1, r0, r1
 8004190:	0f9b      	lsrs	r3, r3, #30
 8004192:	f7fc f821 	bl	80001d8 <__aeabi_uldivmod>
 8004196:	fba5 3100 	umull	r3, r1, r5, r0
 800419a:	0949      	lsrs	r1, r1, #5
 800419c:	2264      	movs	r2, #100	; 0x64
 800419e:	fb02 0211 	mls	r2, r2, r1, r0
 80041a2:	0112      	lsls	r2, r2, #4
 80041a4:	3232      	adds	r2, #50	; 0x32
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	fba5 0202 	umull	r0, r2, r5, r2
 80041ac:	0109      	lsls	r1, r1, #4
 80041ae:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 80041b2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80041c4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80041c8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80041ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ce:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041d2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041d6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 80041da:	4628      	mov	r0, r5
}
 80041dc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80041de:	f7ff fb23 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	2119      	movs	r1, #25
 80041e6:	009a      	lsls	r2, r3, #2
 80041e8:	fba0 0101 	umull	r0, r1, r0, r1
 80041ec:	0f9b      	lsrs	r3, r3, #30
 80041ee:	f7fb fff3 	bl	80001d8 <__aeabi_uldivmod>
 80041f2:	4922      	ldr	r1, [pc, #136]	; (800427c <HAL_UART_Init+0x16c>)
 80041f4:	fba1 3200 	umull	r3, r2, r1, r0
 80041f8:	0952      	lsrs	r2, r2, #5
 80041fa:	2564      	movs	r5, #100	; 0x64
 80041fc:	fb05 0012 	mls	r0, r5, r2, r0
 8004200:	0100      	lsls	r0, r0, #4
 8004202:	3032      	adds	r0, #50	; 0x32
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	fba1 1000 	umull	r1, r0, r1, r0
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8004210:	6098      	str	r0, [r3, #8]
 8004212:	e7cf      	b.n	80041b4 <HAL_UART_Init+0xa4>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004214:	4293      	cmp	r3, r2
 8004216:	d02a      	beq.n	800426e <HAL_UART_Init+0x15e>
 8004218:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800421c:	4293      	cmp	r3, r2
 800421e:	d026      	beq.n	800426e <HAL_UART_Init+0x15e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7ff faf2 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004224:	6862      	ldr	r2, [r4, #4]
 8004226:	2119      	movs	r1, #25
 8004228:	1892      	adds	r2, r2, r2
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	415b      	adcs	r3, r3
 8004230:	fba0 0101 	umull	r0, r1, r0, r1
 8004234:	f7fb ffd0 	bl	80001d8 <__aeabi_uldivmod>
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_UART_Init+0x16c>)
 800423a:	fba3 2100 	umull	r2, r1, r3, r0
 800423e:	094d      	lsrs	r5, r1, #5
 8004240:	2264      	movs	r2, #100	; 0x64
 8004242:	fb02 0215 	mls	r2, r2, r5, r0
 8004246:	00d2      	lsls	r2, r2, #3
 8004248:	3232      	adds	r2, #50	; 0x32
 800424a:	fba3 3202 	umull	r3, r2, r3, r2
 800424e:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004252:	0912      	lsrs	r2, r2, #4
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800425a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800425e:	440a      	add	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	e7a7      	b.n	80041b4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004264:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004268:	f7fd ff0e 	bl	8002088 <HAL_UART_MspInit>
 800426c:	e75c      	b.n	8004128 <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 800426e:	f7ff fadb 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004272:	e7d7      	b.n	8004224 <HAL_UART_Init+0x114>
    return HAL_ERROR;
 8004274:	2001      	movs	r0, #1
}
 8004276:	4770      	bx	lr
 8004278:	40011000 	.word	0x40011000
 800427c:	51eb851f 	.word	0x51eb851f

08004280 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004280:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004282:	8840      	ldrh	r0, [r0, #2]
 8004284:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004288:	0c00      	lsrs	r0, r0, #16
 800428a:	4770      	bx	lr

0800428c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800428c:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800428e:	8802      	ldrh	r2, [r0, #0]
 8004290:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004292:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004296:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800429a:	fb02 f202 	mul.w	r2, r2, r2
 800429e:	4562      	cmp	r2, ip
{
 80042a0:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80042a2:	d21a      	bcs.n	80042da <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80042a4:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80042a8:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80042ac:	fa5f fc8c 	uxtb.w	ip, ip
 80042b0:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80042b4:	8882      	ldrh	r2, [r0, #4]
 80042b6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80042ba:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80042c0:	bfbc      	itt	lt
 80042c2:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80042c6:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bfbc      	itt	lt
 80042cc:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80042d0:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80042d2:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80042d6:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80042da:	b289      	uxth	r1, r1
 80042dc:	2000      	movs	r0, #0
 80042de:	f361 000f 	bfi	r0, r1, #0, #16
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr

080042ec <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80042f0:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80042f2:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80042f6:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80042fa:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 80042fe:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8004302:	4770      	bx	lr

08004304 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004304:	b120      	cbz	r0, 8004310 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004306:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800430a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800430c:	9b00      	ldr	r3, [sp, #0]
 800430e:	60c3      	str	r3, [r0, #12]
  }
}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004314:	b190      	cbz	r0, 800433c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004316:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004318:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800431a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800431c:	b151      	cbz	r1, 8004334 <FCP_CalcCRC+0x20>
 800431e:	1c82      	adds	r2, r0, #2
 8004320:	3901      	subs	r1, #1
 8004322:	3001      	adds	r0, #1
 8004324:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8004328:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800432c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800432e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8004330:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004332:	d1f9      	bne.n	8004328 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004334:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8004338:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004340:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004342:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8004346:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8004348:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800434c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800434e:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8004352:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004356:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 800435a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800435e:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8004360:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004364:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004366:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 800436a:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 800436e:	d96d      	bls.n	800444c <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8004370:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8004374:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004378:	f242 7410 	movw	r4, #10000	; 0x2710
 800437c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004380:	fbb4 fcfc 	udiv	ip, r4, ip
 8004384:	fa1f f48c 	uxth.w	r4, ip
 8004388:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800438c:	4c31      	ldr	r4, [pc, #196]	; (8004454 <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800438e:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004390:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004394:	fb0c f101 	mul.w	r1, ip, r1
 8004398:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800439c:	4c2e      	ldr	r4, [pc, #184]	; (8004458 <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800439e:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80043a2:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80043a4:	fba4 4202 	umull	r4, r2, r4, r2
 80043a8:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80043aa:	040c      	lsls	r4, r1, #16
 80043ac:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80043b0:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80043b4:	fbb2 f2fc 	udiv	r2, r2, ip
 80043b8:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80043bc:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80043c0:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80043c4:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80043c8:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 80043ca:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80043ce:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80043d2:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80043d6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80043d8:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80043dc:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80043de:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80043e0:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 80043e4:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 80043e8:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80043ec:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 80043ee:	2401      	movs	r4, #1
 80043f0:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 80043f4:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 80043f8:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80043fa:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80043fc:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 80043fe:	2100      	movs	r1, #0
 8004400:	4322      	orrs	r2, r4
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f042 0204 	orr.w	r2, r2, #4
 800440c:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	f042 0202 	orr.w	r2, r2, #2
 8004414:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	4322      	orrs	r2, r4
 800441a:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 800441c:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	4322      	orrs	r2, r4
 8004422:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4322      	orrs	r2, r4
 8004428:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800442a:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800442e:	b163      	cbz	r3, 800444a <HALL_Init+0x10a>
 8004430:	3b01      	subs	r3, #1
 8004432:	b2d9      	uxtb	r1, r3
 8004434:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004438:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800443c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004440:	304c      	adds	r0, #76	; 0x4c
 8004442:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004446:	4298      	cmp	r0, r3
 8004448:	d1fb      	bne.n	8004442 <HALL_Init+0x102>
  }
}
 800444a:	bd30      	pop	{r4, r5, pc}
 800444c:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8004450:	4664      	mov	r4, ip
 8004452:	e799      	b.n	8004388 <HALL_Init+0x48>
 8004454:	10624dd3 	.word	0x10624dd3
 8004458:	aaaaaaab 	.word	0xaaaaaaab

0800445c <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800445c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800445e:	68d1      	ldr	r1, [r2, #12]
 8004460:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8004464:	2300      	movs	r3, #0
{
 8004466:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8004468:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 800446c:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 800446e:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8004470:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 8004474:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 8004478:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 800447c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8004480:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8004484:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8004486:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 800448a:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 800448c:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8004490:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8004494:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8004498:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800449a:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800449c:	6813      	ldr	r3, [r2, #0]
 800449e:	430b      	orrs	r3, r1
 80044a0:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80044a2:	68d3      	ldr	r3, [r2, #12]
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80044aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80044ae:	bb0b      	cbnz	r3, 80044f4 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80044b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80044b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80044b4:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80044b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80044b8:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80044ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80044bc:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80044be:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80044c2:	bf0c      	ite	eq
 80044c4:	2401      	moveq	r4, #1
 80044c6:	2400      	movne	r4, #0
 80044c8:	43ab      	bics	r3, r5
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80044d8:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80044da:	bf08      	it	eq
 80044dc:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80044e6:	2a05      	cmp	r2, #5
 80044e8:	d85c      	bhi.n	80045a4 <HALL_Clear+0x148>
 80044ea:	e8df f002 	tbb	[pc, r2]
 80044ee:	3329      	.short	0x3329
 80044f0:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80044f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80044f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80044f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044fa:	6914      	ldr	r4, [r2, #16]
 80044fc:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80044fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004500:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004502:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004504:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004506:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004508:	bf0c      	ite	eq
 800450a:	2101      	moveq	r1, #1
 800450c:	2100      	movne	r1, #0
 800450e:	43ab      	bics	r3, r5
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	43a2      	bics	r2, r4
 8004518:	bf0c      	ite	eq
 800451a:	2201      	moveq	r2, #1
 800451c:	2200      	movne	r2, #0
 800451e:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004520:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004524:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004528:	4313      	orrs	r3, r2
 800452a:	e7d9      	b.n	80044e0 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800452c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800452e:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004532:	3b3f      	subs	r3, #63	; 0x3f
 8004534:	b21b      	sxth	r3, r3
 8004536:	8083      	strh	r3, [r0, #4]
}
 8004538:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800453a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800453e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004540:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004542:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004546:	333f      	adds	r3, #63	; 0x3f
 8004548:	b21b      	sxth	r3, r3
}
 800454a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800454c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800454e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8004552:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004554:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004556:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 800455a:	3b2a      	subs	r3, #42	; 0x2a
 800455c:	b21b      	sxth	r3, r3
}
 800455e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004560:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004562:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8004566:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004568:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800456a:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800456e:	332a      	adds	r3, #42	; 0x2a
 8004570:	b21b      	sxth	r3, r3
}
 8004572:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004574:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004576:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800457a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800457c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800457e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8004582:	3b15      	subs	r3, #21
 8004584:	b21b      	sxth	r3, r3
}
 8004586:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004588:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800458a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800458e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004590:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004592:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8004596:	3315      	adds	r3, #21
 8004598:	b21b      	sxth	r3, r3
}
 800459a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800459c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800459e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045a2:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80045a4:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80045aa:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80045ae:	e7c3      	b.n	8004538 <HALL_Clear+0xdc>

080045b0 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80045b0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80045b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80045b8:	429a      	cmp	r2, r3
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80045ba:	8883      	ldrh	r3, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80045bc:	d00f      	beq.n	80045de <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80045be:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80045c2:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80045c6:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80045c8:	440b      	add	r3, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80045ca:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80045cc:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80045d0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80045d4:	4463      	add	r3, ip
 80045d6:	b21b      	sxth	r3, r3
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80045d8:	8083      	strh	r3, [r0, #4]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80045de:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 80045e2:	4413      	add	r3, r2
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	8083      	strh	r3, [r0, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	4770      	bx	lr

080045ec <HALL_CalcAvrgMecSpeedUnit>:
{
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 80045f0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 80045f4:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 80045f6:	b180      	cbz	r0, 800461a <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80045f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 80045fa:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	429a      	cmp	r2, r3
 8004602:	d811      	bhi.n	8004628 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8004608:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800460a:	4629      	mov	r1, r5
 800460c:	4620      	mov	r0, r4
 800460e:	f001 fadb 	bl	8005bc8 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004612:	f9b5 3000 	ldrsh.w	r3, [r5]
 8004616:	81a3      	strh	r3, [r4, #12]
}
 8004618:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800461a:	78e3      	ldrb	r3, [r4, #3]
 800461c:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 800461e:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8004620:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8004622:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004624:	81a3      	strh	r3, [r4, #12]
}
 8004626:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8004628:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800462c:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800462e:	b31b      	cbz	r3, 8004678 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004630:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8004638:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 800463c:	b9f2      	cbnz	r2, 800467c <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800463e:	88a2      	ldrh	r2, [r4, #4]
 8004640:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8004644:	1a89      	subs	r1, r1, r2
 8004646:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8004648:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800464c:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 8004650:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004654:	8b62      	ldrh	r2, [r4, #26]
 8004656:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800465a:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800465e:	69e1      	ldr	r1, [r4, #28]
 8004660:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004662:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004666:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004668:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800466c:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8004670:	802b      	strh	r3, [r5, #0]
 8004672:	e7ca      	b.n	800460a <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8004674:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8004678:	802b      	strh	r3, [r5, #0]
 800467a:	e7c6      	b.n	800460a <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 800467c:	2100      	movs	r1, #0
 800467e:	e7e9      	b.n	8004654 <HALL_CalcAvrgMecSpeedUnit+0x68>

08004680 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8004680:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8004684:	2b00      	cmp	r3, #0
 8004686:	d047      	beq.n	8004718 <HALL_TIMx_CC_IRQHandler+0x98>
{
 8004688:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800468a:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 800468e:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8004692:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8004696:	b333      	cbz	r3, 80046e6 <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004698:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 800469c:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800469e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046a0:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80046a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046a4:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80046a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046a8:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80046aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046ac:	bf0c      	ite	eq
 80046ae:	2201      	moveq	r2, #1
 80046b0:	2200      	movne	r2, #0
 80046b2:	43b3      	bics	r3, r6
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80046bc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80046c0:	bf0c      	ite	eq
 80046c2:	2201      	moveq	r2, #1
 80046c4:	2200      	movne	r2, #0
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	f082 0204 	eor.w	r2, r2, #4
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 80046d2:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80046d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	f200 8174 	bhi.w	80049c4 <HALL_TIMx_CC_IRQHandler+0x344>
 80046dc:	e8df f003 	tbb	[pc, r3]
 80046e0:	4d5c6e80 	.word	0x4d5c6e80
 80046e4:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80046e6:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 80046ea:	6912      	ldr	r2, [r2, #16]
 80046ec:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80046ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046f0:	691c      	ldr	r4, [r3, #16]
 80046f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80046f4:	bf0c      	ite	eq
 80046f6:	2201      	moveq	r2, #1
 80046f8:	2200      	movne	r2, #0
 80046fa:	43a3      	bics	r3, r4
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004708:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800470a:	6914      	ldr	r4, [r2, #16]
 800470c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800470e:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004710:	bf08      	it	eq
 8004712:	f043 0301 	orreq.w	r3, r3, #1
 8004716:	e7da      	b.n	80046ce <HALL_TIMx_CC_IRQHandler+0x4e>
}
 8004718:	2000      	movs	r0, #0
 800471a:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 800471c:	f1bc 0f02 	cmp.w	ip, #2
 8004720:	f000 808b 	beq.w	800483a <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 8004724:	f1bc 0f04 	cmp.w	ip, #4
 8004728:	f000 80ac 	beq.w	8004884 <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 800472c:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 800472e:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8004732:	b112      	cbz	r2, 800473a <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8004734:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 8004738:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 800473a:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 800473e:	2a00      	cmp	r2, #0
 8004740:	f040 80ac 	bne.w	800489c <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 8004744:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8004748:	3301      	adds	r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8004750:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8004752:	2000      	movs	r0, #0
 8004754:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 8004756:	f1bc 0f04 	cmp.w	ip, #4
 800475a:	d078      	beq.n	800484e <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 800475c:	f1bc 0f01 	cmp.w	ip, #1
 8004760:	d1e4      	bne.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8004762:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004764:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8004768:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800476a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800476c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004770:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	e04d      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 800477a:	f1bc 0f06 	cmp.w	ip, #6
 800477e:	d077      	beq.n	8004870 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 8004780:	f1bc 0f05 	cmp.w	ip, #5
 8004784:	d1d2      	bne.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004786:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004788:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e03e      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 8004798:	f1bc 0f01 	cmp.w	ip, #1
 800479c:	d05e      	beq.n	800485c <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 800479e:	f1bc 0f02 	cmp.w	ip, #2
 80047a2:	d1c3      	bne.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047a4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80047aa:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80047ac:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047ae:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047b2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e02c      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 80047bc:	f1bc 0f03 	cmp.w	ip, #3
 80047c0:	d031      	beq.n	8004826 <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 80047c2:	f1bc 0f06 	cmp.w	ip, #6
 80047c6:	d1b1      	bne.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80047c8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047ca:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80047ce:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80047d0:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80047d2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047d6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e01a      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 80047e0:	f1bc 0f05 	cmp.w	ip, #5
 80047e4:	d00e      	beq.n	8004804 <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 80047e6:	f1bc 0f03 	cmp.w	ip, #3
 80047ea:	d19f      	bne.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80047ec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047ee:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80047f2:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80047f4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80047f6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047fa:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e008      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004804:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8004806:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800480a:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800480c:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800480e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004812:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 8004816:	4299      	cmp	r1, r3
 8004818:	d089      	beq.n	800472e <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 800481a:	2200      	movs	r2, #0
 800481c:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004820:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 8004824:	e783      	b.n	800472e <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 8004826:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8004828:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 800482c:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 800482e:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8004830:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004834:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8004838:	e7ed      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800483a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800483c:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 8004840:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004842:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8004844:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004848:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800484c:	e7e3      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800484e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8004850:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004854:	2301      	movs	r3, #1
 8004856:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800485a:	e7dc      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800485c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 800485e:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004862:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8004866:	3355      	adds	r3, #85	; 0x55
 8004868:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800486c:	4663      	mov	r3, ip
 800486e:	e7d2      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004870:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8004872:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8004876:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004878:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800487a:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800487e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8004882:	e7c8      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004884:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004886:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800488a:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800488c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800488e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004892:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e7bc      	b.n	8004816 <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800489c:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80048a0:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 80048a4:	4562      	cmp	r2, ip
 80048a6:	d205      	bcs.n	80048b4 <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 80048a8:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80048ac:	3201      	adds	r2, #1
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 80048b4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80048b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048b8:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 80048bc:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048c0:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 80048c2:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048c4:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 80048c8:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	d043      	beq.n	8004958 <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 80048d0:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 80048d2:	b289      	uxth	r1, r1
 80048d4:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 80048d8:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80048dc:	2900      	cmp	r1, #0
 80048de:	d045      	beq.n	800496c <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80048e0:	2100      	movs	r1, #0
 80048e2:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 80048e6:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d82f      	bhi.n	800494e <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048ee:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80048f2:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048f6:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80048fa:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80048fe:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004900:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004904:	bf88      	it	hi
 8004906:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800490a:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 800490e:	f101 0101 	add.w	r1, r1, #1
 8004912:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004914:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004918:	bf8a      	itet	hi
 800491a:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 800491c:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800491e:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8004922:	458c      	cmp	ip, r1
 8004924:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8004928:	bf08      	it	eq
 800492a:	2100      	moveq	r1, #0
 800492c:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8004930:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8004934:	b331      	cbz	r1, 8004984 <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004936:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800493a:	458c      	cmp	ip, r1
 800493c:	d937      	bls.n	80049ae <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 800493e:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 8004942:	fbb1 f2f2 	udiv	r2, r1, r2
 8004946:	fb12 f303 	smulbb	r3, r2, r3
 800494a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 800494e:	2300      	movs	r3, #0
 8004950:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8004954:	2000      	movs	r0, #0
 8004956:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8004958:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 800495c:	b1ad      	cbz	r5, 800498a <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 800495e:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 8004960:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8004962:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 8004966:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 800496a:	e7bc      	b.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
 800496c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 800496e:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8004972:	428d      	cmp	r5, r1
 8004974:	d9b7      	bls.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
 8004976:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8004978:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800497a:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800497c:	2101      	movs	r1, #1
 800497e:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 8004982:	e7b0      	b.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 8004984:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8004988:	e7e1      	b.n	800494e <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 800498a:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800498c:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 800498e:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004990:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 8004994:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004998:	d2a5      	bcs.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800499a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800499c:	2900      	cmp	r1, #0
 800499e:	d0a2      	beq.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
 80049a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 80049a2:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80049a4:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80049a6:	2101      	movs	r1, #1
 80049a8:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 80049ac:	e79b      	b.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 80049ae:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80049b2:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80049b6:	fb92 fcfc 	sdiv	ip, r2, ip
 80049ba:	fb93 f3fc 	sdiv	r3, r3, ip
 80049be:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80049c2:	e7c4      	b.n	800494e <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 80049ca:	e6af      	b.n	800472c <HALL_TIMx_CC_IRQHandler+0xac>

080049cc <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80049cc:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80049d0:	b1e3      	cbz	r3, 8004a0c <HALL_TIMx_UP_IRQHandler+0x40>
{
 80049d2:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 80049d4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80049d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 80049da:	3301      	adds	r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 80049e2:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80049e4:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80049e8:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80049ec:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80049f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049f8:	fb04 2202 	mla	r2, r4, r2, r2
 80049fc:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4299      	cmp	r1, r3
 8004a04:	d204      	bcs.n	8004a10 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8004a06:	2000      	movs	r0, #0
 8004a08:	bc30      	pop	{r4, r5}
 8004a0a:	4770      	bx	lr
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004a10:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8004a14:	2200      	movs	r2, #0
 8004a16:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004a18:	bb0b      	cbnz	r3, 8004a5e <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a1e:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a22:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004a26:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a28:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2401      	moveq	r4, #1
 8004a30:	2400      	movne	r4, #0
 8004a32:	43ab      	bics	r3, r5
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8004a42:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a44:	bf08      	it	eq
 8004a46:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 8004a4a:	1e5a      	subs	r2, r3, #1
 8004a4c:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8004a50:	2a05      	cmp	r2, #5
 8004a52:	d86f      	bhi.n	8004b34 <HALL_TIMx_UP_IRQHandler+0x168>
 8004a54:	e8df f002 	tbb	[pc, r2]
 8004a58:	52596067 	.word	0x52596067
 8004a5c:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004a5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004a60:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004a64:	6914      	ldr	r4, [r2, #16]
 8004a66:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a6a:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a6e:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004a70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004a72:	bf0c      	ite	eq
 8004a74:	2101      	moveq	r1, #1
 8004a76:	2100      	movne	r1, #0
 8004a78:	43ab      	bics	r3, r5
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	43a2      	bics	r2, r4
 8004a82:	bf0c      	ite	eq
 8004a84:	2201      	moveq	r2, #1
 8004a86:	2200      	movne	r2, #0
 8004a88:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a8a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004a8e:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a92:	4313      	orrs	r3, r2
 8004a94:	e7d9      	b.n	8004a4a <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004a96:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004a98:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004a9c:	3b3f      	subs	r3, #63	; 0x3f
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004aa2:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004aa6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8004ab0:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004ab4:	b17c      	cbz	r4, 8004ad6 <HALL_TIMx_UP_IRQHandler+0x10a>
 8004ab6:	1e62      	subs	r2, r4, #1
 8004ab8:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004aba:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8004abe:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8004ac2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004ac6:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8004aca:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d1fb      	bne.n	8004aca <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004ad2:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004adc:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004ae0:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8004ae4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8004ae8:	bc30      	pop	{r4, r5}
 8004aea:	2000      	movs	r0, #0
 8004aec:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004aee:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004af0:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8004af4:	3315      	adds	r3, #21
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	8083      	strh	r3, [r0, #4]
      break;
 8004afa:	e7d2      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004afc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004afe:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8004b02:	3b15      	subs	r3, #21
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	8083      	strh	r3, [r0, #4]
      break;
 8004b08:	e7cb      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004b0a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b0c:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004b10:	332a      	adds	r3, #42	; 0x2a
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	8083      	strh	r3, [r0, #4]
      break;
 8004b16:	e7c4      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004b18:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b1a:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8004b1e:	3b2a      	subs	r3, #42	; 0x2a
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	8083      	strh	r3, [r0, #4]
      break;
 8004b24:	e7bd      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004b26:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b28:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004b2c:	333f      	adds	r3, #63	; 0x3f
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	8083      	strh	r3, [r0, #4]
      break;
 8004b32:	e7b6      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 8004b34:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004b36:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8004b3a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8004b3e:	e7b0      	b.n	8004aa2 <HALL_TIMx_UP_IRQHandler+0xd6>

08004b40 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004b40:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8004b46:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f001 fb59 	bl	8006200 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop

08004b58 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b58:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8004b5c:	1c53      	adds	r3, r2, #1
 8004b5e:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004b60:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004b62:	bf88      	it	hi
 8004b64:	2300      	movhi	r3, #0
{
 8004b66:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b68:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004b6c:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 8004b70:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8004b74:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8004b78:	2200      	movs	r2, #0
 8004b7a:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004b7c:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004b80:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004b82:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004b84:	d1fa      	bne.n	8004b7c <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	bfb8      	it	lt
 8004b8a:	327f      	addlt	r2, #127	; 0x7f
 8004b8c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004b8e:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004b92:	4608      	mov	r0, r1
 8004b94:	f85d fb04 	ldr.w	pc, [sp], #4

08004b98 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004b98:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004ba0:	8a03      	ldrh	r3, [r0, #16]
 8004ba2:	8b42      	ldrh	r2, [r0, #26]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d306      	bcc.n	8004bb6 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004ba8:	8b82      	ldrh	r2, [r0, #28]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d901      	bls.n	8004bb2 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8004bae:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8004bb0:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8004bb2:	8ac0      	ldrh	r0, [r0, #22]
 8004bb4:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8004bb6:	2008      	movs	r0, #8
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	8203      	strh	r3, [r0, #16]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <NTC_Init>:
{
 8004bc4:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bc6:	7803      	ldrb	r3, [r0, #0]
{
 8004bc8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bca:	b123      	cbz	r3, 8004bd6 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004bcc:	8a43      	ldrh	r3, [r0, #18]
 8004bce:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	82c2      	strh	r2, [r0, #22]
}
 8004bd4:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004bd6:	3004      	adds	r0, #4
 8004bd8:	f7fd f80a 	bl	8001bf0 <RCM_RegisterRegConv>
 8004bdc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff ffeb 	bl	8004bbc <NTC_Clear>
}
 8004be6:	bd10      	pop	{r4, pc}

08004be8 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8004be8:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bea:	7803      	ldrb	r3, [r0, #0]
{
 8004bec:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bee:	b113      	cbz	r3, 8004bf6 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8004bf4:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004bf6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004bfa:	f7fd f8d5 	bl	8001da8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c02:	4298      	cmp	r0, r3
 8004c04:	d007      	beq.n	8004c16 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004c06:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004c08:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004c0a:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8004c0c:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004c10:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004c14:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ffc2 	bl	8004ba0 <NTC_SetFaultState>
 8004c1c:	82e0      	strh	r0, [r4, #22]
}
 8004c1e:	bd10      	pop	{r4, pc}

08004c20 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004c20:	7803      	ldrb	r3, [r0, #0]
 8004c22:	b983      	cbnz	r3, 8004c46 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004c24:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c26:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004c28:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c2c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c2e:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbc      	itt	lt
 8004c38:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8004c3c:	33ff      	addlt	r3, #255	; 0xff
 8004c3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8004c42:	b200      	sxth	r0, r0
 8004c44:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004c46:	8a80      	ldrh	r0, [r0, #20]
}
 8004c48:	b200      	sxth	r0, r0
 8004c4a:	4770      	bx	lr

08004c4c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c4c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c4e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c50:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c52:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c54:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c56:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004c58:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004c5a:	4770      	bx	lr

08004c5c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004c5c:	8081      	strh	r1, [r0, #4]
}
 8004c5e:	4770      	bx	lr

08004c60 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004c60:	80c1      	strh	r1, [r0, #6]
}
 8004c62:	4770      	bx	lr

08004c64 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004c64:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop

08004c6c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004c6c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop

08004c74 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004c74:	6081      	str	r1, [r0, #8]

  return;
}
 8004c76:	4770      	bx	lr

08004c78 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004c78:	8b00      	ldrh	r0, [r0, #24]
 8004c7a:	4770      	bx	lr

08004c7c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004c7c:	8b40      	ldrh	r0, [r0, #26]
 8004c7e:	4770      	bx	lr

08004c80 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004c80:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004c82:	4770      	bx	lr

08004c84 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004c84:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop

08004c8c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c8c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004c90:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004c94:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8004c98:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004c9e:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8004ca2:	b162      	cbz	r2, 8004cbe <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004ca4:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004ca8:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8004caa:	188c      	adds	r4, r1, r2
 8004cac:	d420      	bmi.n	8004cf0 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	db2a      	blt.n	8004d08 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004cb2:	68c2      	ldr	r2, [r0, #12]
 8004cb4:	42a2      	cmp	r2, r4
 8004cb6:	db02      	blt.n	8004cbe <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004cb8:	6902      	ldr	r2, [r0, #16]
 8004cba:	42a2      	cmp	r2, r4
 8004cbc:	dd22      	ble.n	8004d04 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004cbe:	8b81      	ldrh	r1, [r0, #28]
 8004cc0:	410b      	asrs	r3, r1
 8004cc2:	8bc1      	ldrh	r1, [r0, #30]
 8004cc4:	fa42 f101 	asr.w	r1, r2, r1
 8004cc8:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004cca:	459c      	cmp	ip, r3
 8004ccc:	da05      	bge.n	8004cda <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004cce:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004cd2:	441a      	add	r2, r3
 8004cd4:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004cd6:	4660      	mov	r0, ip
 8004cd8:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8004cda:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004cdc:	bfc9      	itett	gt
 8004cde:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8004ce2:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8004ce6:	18d2      	addgt	r2, r2, r3
 8004ce8:	46f4      	movgt	ip, lr
 8004cea:	6082      	str	r2, [r0, #8]
}
 8004cec:	4660      	mov	r0, ip
 8004cee:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	ddde      	ble.n	8004cb2 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	dddc      	ble.n	8004cb2 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004cf8:	68c2      	ldr	r2, [r0, #12]
 8004cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cfe:	428a      	cmp	r2, r1
 8004d00:	d1dd      	bne.n	8004cbe <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8004d02:	4614      	mov	r4, r2
 8004d04:	4622      	mov	r2, r4
 8004d06:	e7da      	b.n	8004cbe <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8004d08:	4902      	ldr	r1, [pc, #8]	; (8004d14 <PI_Controller+0x88>)
 8004d0a:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8004d0e:	bf28      	it	cs
 8004d10:	460c      	movcs	r4, r1
 8004d12:	e7ce      	b.n	8004cb2 <PI_Controller+0x26>
 8004d14:	80000001 	.word	0x80000001

08004d18 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004d18:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8004d1c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004d1e:	8b11      	ldrh	r1, [r2, #24]
 8004d20:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004d22:	8993      	ldrh	r3, [r2, #12]
 8004d24:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d26:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8004d2a:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004d2c:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d30:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004d34:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d38:	f7ff faa2 	bl	8004280 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8004d3c:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d3e:	490f      	ldr	r1, [pc, #60]	; (8004d7c <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d40:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8004d44:	bfb8      	it	lt
 8004d46:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d4a:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8004d4e:	bfb8      	it	lt
 8004d50:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d52:	fb81 1000 	smull	r1, r0, r1, r0
 8004d56:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8004d5a:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8004d5c:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004d60:	4907      	ldr	r1, [pc, #28]	; (8004d80 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004d62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d66:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004d68:	fb81 2103 	smull	r2, r1, r1, r3
 8004d6c:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004d6e:	4628      	mov	r0, r5
 8004d70:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8004d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004d78:	f7ff beee 	b.w	8004b58 <MPM_CalcElMotorPower>
 8004d7c:	1b4e81b5 	.word	0x1b4e81b5
 8004d80:	66666667 	.word	0x66666667

08004d84 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004d84:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <startTimers+0x60>)
 8004d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004d88:	07d2      	lsls	r2, r2, #31
 8004d8a:	d415      	bmi.n	8004db8 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8004d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004d96:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d9c:	f002 0201 	and.w	r2, r2, #1
 8004da0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004da2:	9a01      	ldr	r2, [sp, #4]
 8004da4:	694a      	ldr	r2, [r1, #20]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004db4:	b002      	add	sp, #8
 8004db6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dbc:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004dc4:	f041 0120 	orr.w	r1, r1, #32
 8004dc8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004dca:	6959      	ldr	r1, [r3, #20]
 8004dcc:	f041 0101 	orr.w	r1, r1, #1
 8004dd0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004dd8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8004dea:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004dec:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004df0:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004df2:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004df4:	bf18      	it	ne
 8004df6:	0855      	lsrne	r5, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004df8:	f06f 0602 	mvn.w	r6, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004dfc:	bf0c      	ite	eq
 8004dfe:	0155      	lsleq	r5, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004e00:	016d      	lslne	r5, r5, #5
 8004e02:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004e04:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8004e06:	f893 c000 	ldrb.w	ip, [r3]
 8004e0a:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004e0e:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8004e12:	d80c      	bhi.n	8004e2e <waitForPolarizationEnd+0x46>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004e14:	6904      	ldr	r4, [r0, #16]
 8004e16:	07a4      	lsls	r4, r4, #30
 8004e18:	d5f5      	bpl.n	8004e06 <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 8004e1a:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004e1e:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e20:	6106      	str	r6, [r0, #16]
 8004e22:	d8f0      	bhi.n	8004e06 <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 8004e24:	781c      	ldrb	r4, [r3, #0]
 8004e26:	2c0f      	cmp	r4, #15
 8004e28:	d8ed      	bhi.n	8004e06 <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}

08004e30 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004e30:	6843      	ldr	r3, [r0, #4]
 8004e32:	4718      	bx	r3

08004e34 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004e34:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e36:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8004e3c:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e3e:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8004e42:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e44:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e48:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e4a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e4e:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e52:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e56:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e5a:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e5e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e6a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e6e:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8004e72:	db7d      	blt.n	8004f70 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004e74:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004e78:	db51      	blt.n	8004f1e <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e7a:	ebbe 0e02 	subs.w	lr, lr, r2
 8004e7e:	bf44      	itt	mi
 8004e80:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8004e84:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	bfbc      	itt	lt
 8004e8c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8004e90:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfb8      	it	lt
 8004e98:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e9c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8004ea0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004ea4:	bfb8      	it	lt
 8004ea6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8004eaa:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8004eae:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004eb2:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8004eb6:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8004eba:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004ebc:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8004ebe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004ec2:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8004ec6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004eca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	b289      	uxth	r1, r1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004eda:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004edc:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004ede:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004ee0:	d118      	bne.n	8004f14 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8004ee2:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8004ee6:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004ee8:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8004eec:	bfcc      	ite	gt
 8004eee:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004ef0:	1b12      	suble	r2, r2, r4
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8004ef6:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8004efa:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8004efc:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004f00:	bfcc      	ite	gt
 8004f02:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004f04:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8004f06:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004f08:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004f0a:	bfcc      	ite	gt
 8004f0c:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004f0e:	1b1b      	suble	r3, r3, r4
 8004f10:	8681      	strh	r1, [r0, #52]	; 0x34
 8004f12:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004f14:	6983      	ldr	r3, [r0, #24]
}
 8004f16:	b002      	add	sp, #8
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004f1c:	4718      	bx	r3
      if ( wX <= 0 )
 8004f1e:	f1bc 0f00 	cmp.w	ip, #0
 8004f22:	dd4b      	ble.n	8004fbc <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f24:	ebbc 0e02 	subs.w	lr, ip, r2
 8004f28:	bf44      	itt	mi
 8004f2a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8004f2e:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004f32:	2900      	cmp	r1, #0
 8004f34:	bfb8      	it	lt
 8004f36:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8004f3a:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8004f3e:	bfb8      	it	lt
 8004f40:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8004f44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f48:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8004f4a:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f4e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f52:	bfb8      	it	lt
 8004f54:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004f58:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f5c:	bfb8      	it	lt
 8004f5e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8004f62:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8004f66:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004f68:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8004f6a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8004f6e:	e7a8      	b.n	8004ec2 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8004f70:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004f74:	db6f      	blt.n	8005056 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8004f76:	f1bc 0f00 	cmp.w	ip, #0
 8004f7a:	dd46      	ble.n	800500a <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f7c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8004f80:	bf48      	it	mi
 8004f82:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8004f86:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f8a:	bf48      	it	mi
 8004f8c:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfb8      	it	lt
 8004f94:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8004f98:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f9c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8004fa0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004fa4:	bfb8      	it	lt
 8004fa6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8004faa:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004fae:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8004fb2:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004fb4:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004fb6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8004fba:	e782      	b.n	8004ec2 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fbc:	ebbe 0e0c 	subs.w	lr, lr, ip
 8004fc0:	bf44      	itt	mi
 8004fc2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8004fc6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfb8      	it	lt
 8004fce:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8004fd2:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8004fd6:	bfb8      	it	lt
 8004fd8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8004fdc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8004fe0:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fe4:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8004fe8:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004fec:	bfb8      	it	lt
 8004fee:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8004ff2:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004ff6:	bfb8      	it	lt
 8004ff8:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8004ffc:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8005000:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005002:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8005004:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005008:	e75b      	b.n	8004ec2 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800500a:	ebbc 0e02 	subs.w	lr, ip, r2
 800500e:	bf44      	itt	mi
 8005010:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005014:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005018:	2900      	cmp	r1, #0
 800501a:	bfb8      	it	lt
 800501c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005020:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005024:	bfb8      	it	lt
 8005026:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800502a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800502e:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005030:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005034:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005038:	bfb8      	it	lt
 800503a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800503e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005042:	bfb8      	it	lt
 8005044:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005048:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800504c:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800504e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005050:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005054:	e735      	b.n	8004ec2 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005056:	ebbe 0e02 	subs.w	lr, lr, r2
 800505a:	bf44      	itt	mi
 800505c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005060:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005064:	2900      	cmp	r1, #0
 8005066:	bfbc      	itt	lt
 8005068:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800506c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfb8      	it	lt
 8005074:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005078:	ea4f 0294 	mov.w	r2, r4, lsr #2
 800507c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005080:	bfb8      	it	lt
 8005082:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005086:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800508a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800508e:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8005092:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005096:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005098:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800509a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800509e:	e710      	b.n	8004ec2 <PWMC_SetPhaseVoltage+0x8e>

080050a0 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80050a0:	6883      	ldr	r3, [r0, #8]
 80050a2:	4718      	bx	r3

080050a4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4604      	mov	r4, r0
 80050a8:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80050aa:	b199      	cbz	r1, 80050d4 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80050ac:	2901      	cmp	r1, #1
 80050ae:	d002      	beq.n	80050b6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80050b0:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80050b2:	b002      	add	sp, #8
 80050b4:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80050b6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80050ba:	b1cb      	cbz	r3, 80050f0 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29b      	uxth	r3, r3
 80050c0:	9101      	str	r1, [sp, #4]
 80050c2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f2      	bne.n	80050b0 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80050ca:	6903      	ldr	r3, [r0, #16]
 80050cc:	4798      	blx	r3
        retVal = true;
 80050ce:	9901      	ldr	r1, [sp, #4]
 80050d0:	4608      	mov	r0, r1
 80050d2:	e7ee      	b.n	80050b2 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80050d4:	f7ff ffe4 	bl	80050a0 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80050d8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80050dc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80050e4:	4620      	mov	r0, r4
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	4798      	blx	r3
      retVal = true;
 80050ea:	2001      	movs	r0, #1
}
 80050ec:	b002      	add	sp, #8
 80050ee:	bd10      	pop	{r4, pc}
      retVal = true;
 80050f0:	4608      	mov	r0, r1
}
 80050f2:	b002      	add	sp, #8
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop

080050f8 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80050f8:	69c3      	ldr	r3, [r0, #28]
 80050fa:	4718      	bx	r3

080050fc <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80050fc:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80050fe:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005100:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005102:	6a22      	ldr	r2, [r4, #32]
 8005104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005108:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 800510a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800510e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005112:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005114:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005116:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005118:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800511a:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 800511c:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005120:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005122:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8005126:	2a05      	cmp	r2, #5
 8005128:	f200 80a6 	bhi.w	8005278 <R3_1_GetPhaseCurrents+0x17c>
 800512c:	e8df f002 	tbb	[pc, r2]
 8005130:	031c1c36 	.word	0x031c1c36
 8005134:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005136:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005138:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800513a:	4a53      	ldr	r2, [pc, #332]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	db5a      	blt.n	80051f6 <R3_1_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005140:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8005142:	4d51      	ldr	r5, [pc, #324]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 8005144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005148:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 800514c:	bfa8      	it	ge
 800514e:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8005152:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 8005154:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 8005156:	da55      	bge.n	8005204 <R3_1_GetPhaseCurrents+0x108>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 8005158:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 800515c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800515e:	fa1f f38e 	uxth.w	r3, lr
 8005162:	f248 0201 	movw	r2, #32769	; 0x8001
 8005166:	e031      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005168:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800516a:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 800516c:	4b46      	ldr	r3, [pc, #280]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
 800516e:	429c      	cmp	r4, r3
 8005170:	db3b      	blt.n	80051ea <R3_1_GetPhaseCurrents+0xee>
      else  if ( wAux > INT16_MAX )
 8005172:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005176:	db6f      	blt.n	8005258 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->a = INT16_MAX;
 8005178:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800517c:	4613      	mov	r3, r2
 800517e:	800a      	strh	r2, [r1, #0]
 8005180:	4614      	mov	r4, r2
 8005182:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8005184:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005186:	ebac 0202 	sub.w	r2, ip, r2
 800518a:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 800518c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005190:	db4d      	blt.n	800522e <R3_1_GetPhaseCurrents+0x132>
        pStator_Currents->b = INT16_MAX;
 8005192:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005196:	804a      	strh	r2, [r1, #2]
 8005198:	4615      	mov	r5, r2
 800519a:	e017      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800519c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 800519e:	4a3a      	ldr	r2, [pc, #232]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80051a0:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 80051a2:	4293      	cmp	r3, r2
 80051a4:	db1b      	blt.n	80051de <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 80051a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051aa:	db47      	blt.n	800523c <R3_1_GetPhaseCurrents+0x140>
        pStator_Currents->b = INT16_MAX;
 80051ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80051b0:	461a      	mov	r2, r3
 80051b2:	804b      	strh	r3, [r1, #2]
 80051b4:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80051b6:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80051b8:	ebac 0404 	sub.w	r4, ip, r4
 80051bc:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c2:	db2c      	blt.n	800521e <R3_1_GetPhaseCurrents+0x122>
        pStator_Currents->a = INT16_MAX;
 80051c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80051c8:	800b      	strh	r3, [r1, #0]
 80051ca:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051cc:	4413      	add	r3, r2
 80051ce:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80051d0:	f8a0 e048 	strh.w	lr, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80051d4:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051d8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80051dc:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 80051de:	4613      	mov	r3, r2
 80051e0:	804a      	strh	r2, [r1, #2]
 80051e2:	461d      	mov	r5, r3
 80051e4:	f248 0201 	movw	r2, #32769	; 0x8001
 80051e8:	e7e5      	b.n	80051b6 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->a = -INT16_MAX;
 80051ea:	461c      	mov	r4, r3
 80051ec:	800b      	strh	r3, [r1, #0]
 80051ee:	46a6      	mov	lr, r4
 80051f0:	f248 0301 	movw	r3, #32769	; 0x8001
 80051f4:	e7c6      	b.n	8005184 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = -INT16_MAX;
 80051f6:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 80051fa:	4d23      	ldr	r5, [pc, #140]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051fc:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 8005200:	45ac      	cmp	ip, r5
 8005202:	dba9      	blt.n	8005158 <R3_1_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 8005204:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8005208:	db1c      	blt.n	8005244 <R3_1_GetPhaseCurrents+0x148>
        pStator_Currents->b = INT16_MAX;
 800520a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 800520e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 8005212:	804b      	strh	r3, [r1, #2]
 8005214:	461a      	mov	r2, r3
 8005216:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005218:	fa1f f38e 	uxth.w	r3, lr
 800521c:	e7d6      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 800521e:	4c1a      	ldr	r4, [pc, #104]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
 8005220:	42a3      	cmp	r3, r4
 8005222:	da1f      	bge.n	8005264 <R3_1_GetPhaseCurrents+0x168>
        pStator_Currents->a = -INT16_MAX;
 8005224:	800c      	strh	r4, [r1, #0]
 8005226:	f248 0301 	movw	r3, #32769	; 0x8001
 800522a:	46a6      	mov	lr, r4
 800522c:	e7ce      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 800522e:	4d16      	ldr	r5, [pc, #88]	; (8005288 <R3_1_GetPhaseCurrents+0x18c>)
 8005230:	42aa      	cmp	r2, r5
 8005232:	da1d      	bge.n	8005270 <R3_1_GetPhaseCurrents+0x174>
        pStator_Currents->b = -INT16_MAX;
 8005234:	804d      	strh	r5, [r1, #2]
 8005236:	f248 0201 	movw	r2, #32769	; 0x8001
 800523a:	e7c7      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 800523c:	b21d      	sxth	r5, r3
 800523e:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005240:	b29a      	uxth	r2, r3
 8005242:	e7b8      	b.n	80051b6 <R3_1_GetPhaseCurrents+0xba>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005244:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8005248:	fa0f f58c 	sxth.w	r5, ip
 800524c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800524e:	fa1f f38e 	uxth.w	r3, lr
 8005252:	fa1f f28c 	uxth.w	r2, ip
 8005256:	e7b9      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->a = ( int16_t )wAux;
 8005258:	fa0f fe84 	sxth.w	lr, r4
 800525c:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005260:	b2a3      	uxth	r3, r4
 8005262:	e78f      	b.n	8005184 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = ( int16_t )wAux;
 8005264:	fa0f fe83 	sxth.w	lr, r3
 8005268:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800526c:	b29b      	uxth	r3, r3
 800526e:	e7ad      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8005270:	b215      	sxth	r5, r2
 8005272:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005274:	b292      	uxth	r2, r2
 8005276:	e7a9      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005278:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 800527c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005280:	880b      	ldrh	r3, [r1, #0]
 8005282:	884a      	ldrh	r2, [r1, #2]
 8005284:	e7a2      	b.n	80051cc <R3_1_GetPhaseCurrents+0xd0>
 8005286:	bf00      	nop
 8005288:	ffff8001 	.word	0xffff8001

0800528c <R3_1_HFCurrentsCalibrationAB>:
 * @retval It always returns {0,0} in ab_t format
 */
void R3_1_HFCurrentsCalibrationAB(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800528c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{  
 800528e:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005290:	685c      	ldr	r4, [r3, #4]
 8005292:	6a22      	ldr	r2, [r4, #32]
 8005294:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005298:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800529a:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 800529e:	2a0f      	cmp	r2, #15
 80052a0:	d813      	bhi.n	80052ca <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80052a2:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 80052a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80052a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052ac:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80052b0:	6824      	ldr	r4, [r4, #0]
 80052b2:	4422      	add	r2, r4
 80052b4:	65c2      	str	r2, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052b6:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80052b8:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052bc:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80052be:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052c0:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80052c2:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052c4:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80052c6:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80052ca:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80052cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80052d0:	600b      	str	r3, [r1, #0]
}
 80052d2:	4770      	bx	lr

080052d4 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 80052d4:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052d6:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80052d8:	6862      	ldr	r2, [r4, #4]
 80052da:	6a13      	ldr	r3, [r2, #32]
 80052dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e0:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80052e2:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d80e      	bhi.n	8005308 <R3_1_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052ea:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80052ee:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052f0:	3214      	adds	r2, #20
 80052f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 80052fa:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052fe:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8005300:	3301      	adds	r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005308:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800530a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 800530e:	600b      	str	r3, [r1, #0]
}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop

08005314 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005314:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005316:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800531a:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800531c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005320:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005322:	f06f 0001 	mvn.w	r0, #1
 8005326:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005328:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800532a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800532c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800532e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005330:	07db      	lsls	r3, r3, #31
 8005332:	d5fc      	bpl.n	800532e <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005334:	f06f 0301 	mvn.w	r3, #1
 8005338:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800533a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800533c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005340:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005342:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8005346:	2b02      	cmp	r3, #2
 8005348:	d000      	beq.n	800534c <R3_1_TurnOnLowSides+0x38>
 800534a:	4770      	bx	lr
{
 800534c:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800534e:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005352:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005356:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005358:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800535c:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 800535e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005368:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800536a:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800536e:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005370:	f04f 0c00 	mov.w	ip, #0
{  
 8005374:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005376:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800537a:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800537c:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800537e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005380:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005382:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005384:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800538a:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800538c:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800538e:	07d2      	lsls	r2, r2, #31
 8005390:	d5fc      	bpl.n	800538c <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005392:	f06f 0201 	mvn.w	r2, #1
 8005396:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800539e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80053a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80053a8:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 80053ac:	2a02      	cmp	r2, #2
 80053ae:	d008      	beq.n	80053c2 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053b0:	f06f 0201 	mvn.w	r2, #1
 80053b4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80053bc:	bc30      	pop	{r4, r5}
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80053c2:	6a18      	ldr	r0, [r3, #32]
 80053c4:	f240 5255 	movw	r2, #1365	; 0x555
 80053c8:	4210      	tst	r0, r2
 80053ca:	d009      	beq.n	80053e0 <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80053cc:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80053d0:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 80053d4:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80053d6:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 80053da:	6184      	str	r4, [r0, #24]
 80053dc:	6191      	str	r1, [r2, #24]
}
 80053de:	e7e7      	b.n	80053b0 <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80053e0:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80053e4:	688d      	ldr	r5, [r1, #8]
 80053e6:	69ca      	ldr	r2, [r1, #28]
 80053e8:	0424      	lsls	r4, r4, #16
 80053ea:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80053ec:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80053f0:	0400      	lsls	r0, r0, #16
 80053f2:	0412      	lsls	r2, r2, #16
 80053f4:	61a8      	str	r0, [r5, #24]
 80053f6:	61a2      	str	r2, [r4, #24]
}
 80053f8:	e7da      	b.n	80053b0 <R3_1_SwitchOnPWM+0x48>
 80053fa:	bf00      	nop

080053fc <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80053fc:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80053fe:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005400:	68d3      	ldr	r3, [r2, #12]
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005408:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800540a:	f04f 0c00 	mov.w	ip, #0
 800540e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8005412:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
 8005416:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800541a:	6453      	str	r3, [r2, #68]	; 0x44
 800541c:	b918      	cbnz	r0, 8005426 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800541e:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8005422:	2b02      	cmp	r3, #2
 8005424:	d009      	beq.n	800543a <R3_1_SwitchOffPWM+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005426:	f06f 0301 	mvn.w	r3, #1
 800542a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800542c:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800542e:	07db      	lsls	r3, r3, #31
 8005430:	d5fc      	bpl.n	800542c <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005432:	f06f 0301 	mvn.w	r3, #1
 8005436:	6113      	str	r3, [r2, #16]
 8005438:	4770      	bx	lr
{
 800543a:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800543c:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005440:	688d      	ldr	r5, [r1, #8]
 8005442:	69cb      	ldr	r3, [r1, #28]
 8005444:	0424      	lsls	r4, r4, #16
 8005446:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005448:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	0400      	lsls	r0, r0, #16
 8005450:	61a8      	str	r0, [r5, #24]
 8005452:	61a3      	str	r3, [r4, #24]
 8005454:	f06f 0301 	mvn.w	r3, #1
 8005458:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800545a:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800545c:	07d9      	lsls	r1, r3, #31
 800545e:	d5fc      	bpl.n	800545a <R3_1_SwitchOffPWM+0x5e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005460:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8005464:	bc30      	pop	{r4, r5}
 8005466:	6113      	str	r3, [r2, #16]
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800546c:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800546e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005470:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005472:	6a13      	ldr	r3, [r2, #32]
 8005474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005478:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800547a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800547e:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8005480:	480d      	ldr	r0, [pc, #52]	; (80054b8 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8005482:	3214      	adds	r2, #20
 8005484:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 800548e:	4283      	cmp	r3, r0
 8005490:	db05      	blt.n	800549e <R3_1_RLGetPhaseCurrents+0x32>
  {
    if (wAux < INT16_MAX)
 8005492:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005496:	4293      	cmp	r3, r2
 8005498:	dc0b      	bgt.n	80054b2 <R3_1_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800549a:	b21b      	sxth	r3, r3
 800549c:	e000      	b.n	80054a0 <R3_1_RLGetPhaseCurrents+0x34>
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 80054a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 80054a4:	2200      	movs	r2, #0
 80054a6:	f363 020f 	bfi	r2, r3, #0, #16
 80054aa:	f363 421f 	bfi	r2, r3, #16, #16
 80054ae:	600a      	str	r2, [r1, #0]
}
 80054b0:	4770      	bx	lr
 80054b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80054b6:	e7f3      	b.n	80054a0 <R3_1_RLGetPhaseCurrents+0x34>
 80054b8:	ffff8002 	.word	0xffff8002
 80054bc:	ffff8001 	.word	0xffff8001

080054c0 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80054c0:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80054c2:	684a      	ldr	r2, [r1, #4]
{  
 80054c4:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054c6:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054ca:	2400      	movs	r4, #0
 80054cc:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054ce:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80054d0:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80054d2:	07db      	lsls	r3, r3, #31
 80054d4:	d5fc      	bpl.n	80054d0 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054d6:	f06f 0301 	mvn.w	r3, #1
 80054da:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80054dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80054e4:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d10a      	bne.n	8005502 <R3_1_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80054ec:	6888      	ldr	r0, [r1, #8]
 80054ee:	694c      	ldr	r4, [r1, #20]
 80054f0:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054f4:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80054f6:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054fa:	0412      	lsls	r2, r2, #16
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	6182      	str	r2, [r0, #24]
 8005500:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8005502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005506:	4770      	bx	lr

08005508 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005508:	6f81      	ldr	r1, [r0, #120]	; 0x78
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800550a:	2200      	movs	r2, #0
{
 800550c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800550e:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005512:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	06d2      	lsls	r2, r2, #27
 800551a:	d4fc      	bmi.n	8005516 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	06d5      	lsls	r5, r2, #27
 8005520:	d5fc      	bpl.n	800551c <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8005522:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005526:	2001      	movs	r0, #1
 8005528:	3a05      	subs	r2, #5
 800552a:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800552e:	f06f 0201 	mvn.w	r2, #1
 8005532:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005534:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005536:	07d2      	lsls	r2, r2, #31
 8005538:	d5fc      	bpl.n	8005534 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800553a:	f06f 0201 	mvn.w	r2, #1
 800553e:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005546:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005550:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8005554:	2a02      	cmp	r2, #2
 8005556:	d00b      	beq.n	8005570 <R3_1_RLSwitchOnPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005558:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800555c:	f06f 0104 	mvn.w	r1, #4
 8005560:	6021      	str	r1, [r4, #0]
 8005562:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800556a:	bc30      	pop	{r4, r5}
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8005570:	6a18      	ldr	r0, [r3, #32]
 8005572:	f240 5255 	movw	r2, #1365	; 0x555
 8005576:	4210      	tst	r0, r2
 8005578:	d00a      	beq.n	8005590 <R3_1_RLSwitchOnPWM+0x88>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800557a:	688a      	ldr	r2, [r1, #8]
 800557c:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800557e:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005580:	68ca      	ldr	r2, [r1, #12]
 8005582:	6988      	ldr	r0, [r1, #24]
 8005584:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005586:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005588:	6909      	ldr	r1, [r1, #16]
 800558a:	0412      	lsls	r2, r2, #16
 800558c:	618a      	str	r2, [r1, #24]
}
 800558e:	e7e3      	b.n	8005558 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005590:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 8005594:	688d      	ldr	r5, [r1, #8]
 8005596:	0400      	lsls	r0, r0, #16
 8005598:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800559a:	68c8      	ldr	r0, [r1, #12]
 800559c:	0412      	lsls	r2, r2, #16
 800559e:	6182      	str	r2, [r0, #24]
 80055a0:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80055a2:	6909      	ldr	r1, [r1, #16]
 80055a4:	0412      	lsls	r2, r2, #16
 80055a6:	618a      	str	r2, [r1, #24]
}
 80055a8:	e7d6      	b.n	8005558 <R3_1_RLSwitchOnPWM+0x50>
 80055aa:	bf00      	nop

080055ac <R3_1_Init>:
{
 80055ac:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80055ae:	6f84      	ldr	r4, [r0, #120]	; 0x78
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80055b0:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80055b2:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80055b4:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80055b6:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80055ba:	f021 0120 	bic.w	r1, r1, #32
 80055be:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80055c0:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055c8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055ca:	f06f 0104 	mvn.w	r1, #4
 80055ce:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	f021 0101 	bic.w	r1, r1, #1
 80055d6:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80055d8:	491a      	ldr	r1, [pc, #104]	; (8005644 <R3_1_Init+0x98>)
 80055da:	428a      	cmp	r2, r1
 80055dc:	d02c      	beq.n	8005638 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80055de:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80055e2:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80055e4:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 80055e8:	b119      	cbz	r1, 80055f2 <R3_1_Init+0x46>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80055ea:	68d1      	ldr	r1, [r2, #12]
 80055ec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80055f0:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80055f2:	6a11      	ldr	r1, [r2, #32]
 80055f4:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 80055f8:	f041 0105 	orr.w	r1, r1, #5
 80055fc:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005608:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800560c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005612:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800561a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800561c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 800561e:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005620:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8005624:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005628:	66c4      	str	r4, [r0, #108]	; 0x6c
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800562c:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800562e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    pHandle->_Super.DTTest = 0u;
 8005632:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8005636:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005638:	4d03      	ldr	r5, [pc, #12]	; (8005648 <R3_1_Init+0x9c>)
 800563a:	68e9      	ldr	r1, [r5, #12]
 800563c:	f041 0101 	orr.w	r1, r1, #1
 8005640:	60e9      	str	r1, [r5, #12]
}
 8005642:	e7cc      	b.n	80055de <R3_1_Init+0x32>
 8005644:	40010000 	.word	0x40010000
 8005648:	e0042000 	.word	0xe0042000

0800564c <R3_1_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800564c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800564e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005650:	685d      	ldr	r5, [r3, #4]
  pHandle->PhaseAOffset = 0u;
 8005652:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 8005654:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 8005658:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 800565a:	65c6      	str	r6, [r0, #92]	; 0x5c
 800565c:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8005660:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8005664:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 8005668:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <R3_1_CurrentReadingCalibration+0xf0>)
 800566c:	6043      	str	r3, [r0, #4]
{
 800566e:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 8005670:	2704      	movs	r7, #4
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005672:	4b33      	ldr	r3, [pc, #204]	; (8005740 <R3_1_CurrentReadingCalibration+0xf4>)
 8005674:	6183      	str	r3, [r0, #24]
{
 8005676:	b083      	sub	sp, #12
  pHandle->CalibSector = SECTOR_5;
 8005678:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_5; 
 800567c:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005680:	f7ff fe72 	bl	8005368 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005684:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005686:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800568a:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800568e:	4628      	mov	r0, r5
 8005690:	f104 0373 	add.w	r3, r4, #115	; 0x73
 8005694:	e9cd 1300 	strd	r1, r3, [sp]
 8005698:	f7ff fba6 	bl	8004de8 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800569c:	4620      	mov	r0, r4
 800569e:	f7ff fead 	bl	80053fc <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80056a2:	4a28      	ldr	r2, [pc, #160]	; (8005744 <R3_1_CurrentReadingCalibration+0xf8>)
 80056a4:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80056a6:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80056a8:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 80056ac:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1; 
 80056b0:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80056b4:	f7ff fe58 	bl	8005368 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80056b8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80056ba:	e9dd 1300 	ldrd	r1, r3, [sp]
 80056be:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 80056c2:	4628      	mov	r0, r5
 80056c4:	f7ff fb90 	bl	8004de8 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7ff fe97 	bl	80053fc <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset >>= 3;
 80056ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset >>= 3;
 80056d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056d6:	08db      	lsrs	r3, r3, #3
 80056d8:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset >>= 3;
 80056da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <R3_1_CurrentReadingCalibration+0xfc>)
 80056e2:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 80056e4:	4b19      	ldr	r3, [pc, #100]	; (800574c <R3_1_CurrentReadingCalibration+0x100>)
 80056e6:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056e8:	69ab      	ldr	r3, [r5, #24]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	61ab      	str	r3, [r5, #24]
 80056f0:	69ab      	ldr	r3, [r5, #24]
 80056f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f6:	61ab      	str	r3, [r5, #24]
 80056f8:	69eb      	ldr	r3, [r5, #28]
 80056fa:	f023 0308 	bic.w	r3, r3, #8
 80056fe:	61eb      	str	r3, [r5, #28]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8005700:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005704:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005706:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005708:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800570a:	69ab      	ldr	r3, [r5, #24]
 800570c:	f043 0308 	orr.w	r3, r3, #8
 8005710:	61ab      	str	r3, [r5, #24]
 8005712:	69ab      	ldr	r3, [r5, #24]
 8005714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005718:	61ab      	str	r3, [r5, #24]
 800571a:	69eb      	ldr	r3, [r5, #28]
 800571c:	f043 0308 	orr.w	r3, r3, #8
 8005720:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 8005722:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 8005726:	6a2b      	ldr	r3, [r5, #32]
 8005728:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800572c:	f043 0305 	orr.w	r3, r3, #5
 8005730:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8005732:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
}
 8005736:	b003      	add	sp, #12
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573a:	bf00      	nop
 800573c:	0800528d 	.word	0x0800528d
 8005740:	0800577d 	.word	0x0800577d
 8005744:	080052d5 	.word	0x080052d5
 8005748:	080050fd 	.word	0x080050fd
 800574c:	0800579d 	.word	0x0800579d

08005750 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005750:	6f83      	ldr	r3, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8005752:	8e82      	ldrh	r2, [r0, #52]	; 0x34
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005754:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8005756:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
{
 8005758:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800575a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800575c:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 8005760:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005762:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005764:	6a1b      	ldr	r3, [r3, #32]
}
 8005766:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 800576a:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 800576c:	bf12      	itee	ne
 800576e:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005772:	2300      	moveq	r3, #0
 8005774:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 8005776:	4610      	mov	r0, r2
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <R3_1_SetADCSampPointCalibration>:
{
 800577c:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800577e:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005782:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8005786:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800578a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800578e:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005790:	66c4      	str	r4, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8005792:	b289      	uxth	r1, r1
 8005794:	f7ff ffdc 	bl	8005750 <R3_1_WriteTIMRegisters>
}
 8005798:	bd10      	pop	{r4, pc}
 800579a:	bf00      	nop

0800579c <R3_1_SetADCSampPointSectX>:
{
 800579c:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800579e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80057a0:	f8b0 e070 	ldrh.w	lr, [r0, #112]	; 0x70
 80057a4:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80057a6:	ebae 0201 	sub.w	r2, lr, r1
 80057aa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80057ae:	b292      	uxth	r2, r2
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d908      	bls.n	80057c6 <R3_1_SetADCSampPointSectX+0x2a>
    pHandle->_Super.Sector = SECTOR_5;
 80057b4:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80057b6:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 80057ba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80057be:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80057c0:	f7ff ffc6 	bl	8005750 <R3_1_WriteTIMRegisters>
}
 80057c4:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80057c6:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80057ca:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80057ce:	fa1f fc8c 	uxth.w	ip, ip
 80057d2:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80057d6:	d906      	bls.n	80057e6 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80057d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80057dc:	1ac9      	subs	r1, r1, r3
 80057de:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80057e0:	f7ff ffb6 	bl	8005750 <R3_1_WriteTIMRegisters>
}
 80057e4:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80057e6:	440b      	add	r3, r1
 80057e8:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80057ea:	458e      	cmp	lr, r1
 80057ec:	d8e8      	bhi.n	80057c0 <R3_1_SetADCSampPointSectX+0x24>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80057ee:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80057f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80057f4:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80057f8:	66c3      	str	r3, [r0, #108]	; 0x6c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80057fa:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80057fc:	f7ff ffa8 	bl	8005750 <R3_1_WriteTIMRegisters>
}
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop

08005804 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005804:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8005806:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005808:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800580c:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800580e:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8005810:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8005812:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8005816:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005818:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 800581c:	3008      	adds	r0, #8
 800581e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005822:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8005824:	6a20      	ldr	r0, [r4, #32]
 8005826:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800582a:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800582c:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800582e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8005832:	4329      	orrs	r1, r5
 8005834:	6091      	str	r1, [r2, #8]
}
 8005836:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800583a:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800583c:	bc30      	pop	{r4, r5}
 800583e:	4770      	bx	lr

08005840 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8005840:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 8005844:	b923      	cbnz	r3, 8005850 <R3_1_BRK_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005846:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005848:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800584c:	2a02      	cmp	r2, #2
 800584e:	d004      	beq.n	800585a <R3_1_BRK_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8005850:	2301      	movs	r3, #1
 8005852:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 8005856:	3046      	adds	r0, #70	; 0x46
 8005858:	4770      	bx	lr
{
 800585a:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800585c:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005860:	689d      	ldr	r5, [r3, #8]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	0424      	lsls	r4, r4, #16
 8005866:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005868:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 800586c:	0409      	lsls	r1, r1, #16
 800586e:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005870:	2301      	movs	r3, #1
 8005872:	61a9      	str	r1, [r5, #24]
}
 8005874:	3046      	adds	r0, #70	; 0x46
 8005876:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8005878:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 800587c:	bc30      	pop	{r4, r5}
 800587e:	4770      	bx	lr

08005880 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8005880:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005884:	b90b      	cbnz	r3, 800588a <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8005886:	4618      	mov	r0, r3
}
 8005888:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800588a:	2300      	movs	r3, #0
 800588c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal |= MC_BREAK_IN;
 8005890:	2040      	movs	r0, #64	; 0x40
 8005892:	4770      	bx	lr

08005894 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8005894:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8005898:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 800589a:	2900      	cmp	r1, #0
 800589c:	d134      	bne.n	8005908 <R3_1_RLDetectionModeEnable+0x74>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800589e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80058a0:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80058a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80058ac:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058b6:	6a1a      	ldr	r2, [r3, #32]
 80058b8:	f022 0204 	bic.w	r2, r2, #4
 80058bc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058be:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 80058c0:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
 80058c4:	2a01      	cmp	r2, #1
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80058c6:	f103 0418 	add.w	r4, r3, #24
 80058ca:	d02a      	beq.n	8005922 <R3_1_RLDetectionModeEnable+0x8e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80058cc:	2a02      	cmp	r2, #2
 80058ce:	d10d      	bne.n	80058ec <R3_1_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80058d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058da:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	f042 0210 	orr.w	r2, r2, #16
 80058e2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ea:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80058f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80058f6:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058fe:	621a      	str	r2, [r3, #32]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005906:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <R3_1_RLDetectionModeEnable+0xac>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800590a:	490e      	ldr	r1, [pc, #56]	; (8005944 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800590c:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800590e:	4c0f      	ldr	r4, [pc, #60]	; (800594c <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8005910:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8005912:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8005914:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8005916:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800591a:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 800591c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8005920:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8005928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	f022 0210 	bic.w	r2, r2, #16
 8005934:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	e7d5      	b.n	80058ec <R3_1_RLDetectionModeEnable+0x58>
 8005940:	080054c1 	.word	0x080054c1
 8005944:	08005509 	.word	0x08005509
 8005948:	080053fd 	.word	0x080053fd
 800594c:	0800546d 	.word	0x0800546d

08005950 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8005950:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8005954:	2b00      	cmp	r3, #0
 8005956:	d048      	beq.n	80059ea <R3_1_RLDetectionModeDisable+0x9a>
{
 8005958:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800595a:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800595c:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	06d4      	lsls	r4, r2, #27
 8005962:	d5fc      	bpl.n	800595e <R3_1_RLDetectionModeDisable+0xe>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	06d2      	lsls	r2, r2, #27
 8005968:	d4fc      	bmi.n	8005964 <R3_1_RLDetectionModeDisable+0x14>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 800596a:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005976:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800597a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8005984:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8005988:	2a01      	cmp	r2, #1
 800598a:	d02f      	beq.n	80059ec <R3_1_RLDetectionModeDisable+0x9c>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800598c:	2a02      	cmp	r2, #2
 800598e:	d053      	beq.n	8005a38 <R3_1_RLDetectionModeDisable+0xe8>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8005990:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8005994:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005996:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005998:	699c      	ldr	r4, [r3, #24]
 800599a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800599e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80059a2:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80059a4:	6a1c      	ldr	r4, [r3, #32]
 80059a6:	f044 0410 	orr.w	r4, r4, #16
 80059aa:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80059ae:	69dc      	ldr	r4, [r3, #28]
 80059b0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80059b4:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80059b8:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80059ba:	6a1c      	ldr	r4, [r3, #32]
 80059bc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80059c0:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 80059c2:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 80059c6:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80059c8:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80059ca:	4c2f      	ldr	r4, [pc, #188]	; (8005a88 <R3_1_RLDetectionModeDisable+0x138>)
 80059cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d0:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80059d2:	492e      	ldr	r1, [pc, #184]	; (8005a8c <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80059d4:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059d6:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80059d8:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 80059da:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059dc:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80059e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 80059e4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80059e8:	4770      	bx	lr
 80059ea:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80059ec:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 80059ee:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80059f2:	f044 0404 	orr.w	r4, r4, #4
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80059fc:	699c      	ldr	r4, [r3, #24]
 80059fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8005a02:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8005a06:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005a08:	6a1c      	ldr	r4, [r3, #32]
 8005a0a:	f044 0410 	orr.w	r4, r4, #16
 8005a0e:	621c      	str	r4, [r3, #32]
 8005a10:	6a1c      	ldr	r4, [r3, #32]
 8005a12:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8005a16:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a1a:	69dc      	ldr	r4, [r3, #28]
 8005a1c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8005a20:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8005a24:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005a26:	6a1c      	ldr	r4, [r3, #32]
 8005a28:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005a2c:	621c      	str	r4, [r3, #32]
 8005a2e:	6a1c      	ldr	r4, [r3, #32]
 8005a30:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8005a34:	621c      	str	r4, [r3, #32]
}
 8005a36:	e7c4      	b.n	80059c2 <R3_1_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a38:	6a1c      	ldr	r4, [r3, #32]
 8005a3a:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8005a3e:	f024 0404 	bic.w	r4, r4, #4
 8005a42:	0852      	lsrs	r2, r2, #1
 8005a44:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a46:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a48:	699c      	ldr	r4, [r3, #24]
 8005a4a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8005a4e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8005a52:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005a54:	6a1c      	ldr	r4, [r3, #32]
 8005a56:	f044 0410 	orr.w	r4, r4, #16
 8005a5a:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a5c:	6a1c      	ldr	r4, [r3, #32]
 8005a5e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8005a62:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a66:	69dc      	ldr	r4, [r3, #28]
 8005a68:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8005a6c:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8005a70:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005a72:	6a1c      	ldr	r4, [r3, #32]
 8005a74:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005a78:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a7a:	6a1c      	ldr	r4, [r3, #32]
 8005a7c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005a80:	621c      	str	r4, [r3, #32]
}
 8005a82:	e79e      	b.n	80059c2 <R3_1_RLDetectionModeDisable+0x72>
 8005a84:	080050fd 	.word	0x080050fd
 8005a88:	08005315 	.word	0x08005315
 8005a8c:	08005369 	.word	0x08005369
 8005a90:	080053fd 	.word	0x080053fd

08005a94 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a94:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a98:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a9a:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a9e:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8005aa0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005aa2:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8005aa4:	f04f 0c03 	mov.w	ip, #3
 8005aa8:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8005aac:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005aae:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005ab0:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8005ab2:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8005ab4:	bf12      	itee	ne
 8005ab6:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005aba:	2200      	moveq	r2, #0
 8005abc:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005ac4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8005ac8:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005aca:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005acc:	4494      	add	ip, r2
{
 8005ace:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005ad0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ad4:	b14b      	cbz	r3, 8005aea <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8005ad6:	6a04      	ldr	r4, [r0, #32]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005adc:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8005ade:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ae2:	8b01      	ldrh	r1, [r0, #24]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4291      	cmp	r1, r2
 8005ae8:	d8f7      	bhi.n	8005ada <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f36c 030f 	bfi	r3, ip, #0, #16
 8005af0:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005af4:	2200      	movs	r2, #0
}
 8005af6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 8005afa:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8005afc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <RVBS_Init>:
{
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005b08:	300c      	adds	r0, #12
 8005b0a:	f7fc f871 	bl	8001bf0 <RCM_RegisterRegConv>
 8005b0e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff ffd6 	bl	8005ac4 <RVBS_Clear>
}
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop

08005b1c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005b1c:	88c3      	ldrh	r3, [r0, #6]
 8005b1e:	8b42      	ldrh	r2, [r0, #26]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d305      	bcc.n	8005b30 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005b24:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005b26:	4298      	cmp	r0, r3
 8005b28:	bf8c      	ite	hi
 8005b2a:	2004      	movhi	r0, #4
 8005b2c:	2000      	movls	r0, #0
 8005b2e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005b30:	2002      	movs	r0, #2
  }
  return fault;
}
 8005b32:	4770      	bx	lr

08005b34 <RVBS_CalcAvVbus>:
{
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005b38:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005b3c:	f7fc f934 	bl	8001da8 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b44:	4298      	cmp	r0, r3
 8005b46:	d01b      	beq.n	8005b80 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005b48:	6a26      	ldr	r6, [r4, #32]
 8005b4a:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8005b4e:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b52:	8b25      	ldrh	r5, [r4, #24]
 8005b54:	b1cd      	cbz	r5, 8005b8a <RVBS_CalcAvVbus+0x56>
 8005b56:	2300      	movs	r3, #0
    wtemp = 0;
 8005b58:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8005b5a:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b2d9      	uxtb	r1, r3
 8005b62:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8005b64:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b66:	460b      	mov	r3, r1
 8005b68:	d3f7      	bcc.n	8005b5a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8005b6a:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b6e:	1e6b      	subs	r3, r5, #1
 8005b70:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8005b72:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b74:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b76:	da0a      	bge.n	8005b8e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8005b78:	f10e 0e01 	add.w	lr, lr, #1
 8005b7c:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff ffcb 	bl	8005b1c <RVBS_CheckFaultState>
 8005b86:	8120      	strh	r0, [r4, #8]
}
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b8a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005b8c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff ffc1 	bl	8005b1c <RVBS_CheckFaultState>
 8005b9a:	8120      	strh	r0, [r4, #8]
}
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
 8005b9e:	bf00      	nop

08005ba0 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005ba0:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8005ba2:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8005ba4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8005ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8005bac:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8005bae:	4770      	bx	lr

08005bb0 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005bb0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop

08005bb8 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005bb8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005bc0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop

08005bc8 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005bc8:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005bcc:	8a81      	ldrh	r1, [r0, #20]
{
 8005bce:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8005bd0:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8005bd2:	bfb8      	it	lt
 8005bd4:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005bd6:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005bda:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005bde:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005be0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005be2:	459e      	cmp	lr, r3
 8005be4:	d819      	bhi.n	8005c1a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bf2c      	ite	cs
 8005bea:	2300      	movcs	r3, #0
 8005bec:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005bee:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005bf2:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8005bf6:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8005bf8:	bfb8      	it	lt
 8005bfa:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8005bfc:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005bfe:	458e      	cmp	lr, r1
 8005c00:	d300      	bcc.n	8005c04 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005c02:	b163      	cbz	r3, 8005c1e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005c04:	4594      	cmp	ip, r2
 8005c06:	d901      	bls.n	8005c0c <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8005c08:	3201      	adds	r2, #1
 8005c0a:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005c0c:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8005c0e:	ebb2 000c 	subs.w	r0, r2, ip
 8005c12:	bf18      	it	ne
 8005c14:	2001      	movne	r0, #1
 8005c16:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7e7      	b.n	8005bee <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8005c1e:	4594      	cmp	ip, r2
 8005c20:	bf88      	it	hi
 8005c22:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005c24:	7002      	strb	r2, [r0, #0]
}
 8005c26:	ebb2 000c 	subs.w	r0, r2, ip
 8005c2a:	bf18      	it	ne
 8005c2c:	2001      	movne	r0, #1
 8005c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c32:	bf00      	nop

08005c34 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8005c34:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005c38:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8005c3c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005c40:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8005c44:	b200      	sxth	r0, r0
 8005c46:	4770      	bx	lr

08005c48 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005c48:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8005c4c:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005c4e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8005c52:	6142      	str	r2, [r0, #20]
{
 8005c54:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8005c56:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8005c5a:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8005c5c:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005c5e:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005c62:	0409      	lsls	r1, r1, #16
 8005c64:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8005c68:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8005c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8005c6e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005c70:	6183      	str	r3, [r0, #24]
}
 8005c72:	4770      	bx	lr

08005c74 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8005c74:	6940      	ldr	r0, [r0, #20]
 8005c76:	4770      	bx	lr

08005c78 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005c78:	7803      	ldrb	r3, [r0, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d000      	beq.n	8005c80 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005c7e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005c80:	6900      	ldr	r0, [r0, #16]
 8005c82:	2100      	movs	r1, #0
 8005c84:	f7fe bff6 	b.w	8004c74 <PID_SetIntegralTerm>

08005c88 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005c88:	6840      	ldr	r0, [r0, #4]
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	bfbc      	itt	lt
 8005c8e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005c92:	30ff      	addlt	r0, #255	; 0xff
}
 8005c94:	1400      	asrs	r0, r0, #16
 8005c96:	4770      	bx	lr

08005c98 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005c98:	6880      	ldr	r0, [r0, #8]
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	bfbc      	itt	lt
 8005c9e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005ca2:	30ff      	addlt	r0, #255	; 0xff
}
 8005ca4:	1400      	asrs	r0, r0, #16
 8005ca6:	4770      	bx	lr

08005ca8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005ca8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005caa:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005cac:	60c3      	str	r3, [r0, #12]
}
 8005cae:	4770      	bx	lr

08005cb0 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005cb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005cb2:	7803      	ldrb	r3, [r0, #0]
{
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005cba:	b323      	cbz	r3, 8005d06 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005cbc:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005cbe:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	bfbc      	itt	lt
 8005cc4:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005cc8:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005cca:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005ccc:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005cd0:	dd01      	ble.n	8005cd6 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8005cd2:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005cd6:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8005cda:	428b      	cmp	r3, r1
 8005cdc:	dcf9      	bgt.n	8005cd2 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005cde:	8c23      	ldrh	r3, [r4, #32]
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	da03      	bge.n	8005cec <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005ce4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	dbf2      	blt.n	8005cd2 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8005cec:	b9ae      	cbnz	r6, 8005d1a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005cee:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005cf0:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005cf2:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8005cf4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005cf8:	bf0c      	ite	eq
 8005cfa:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005cfc:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005cfe:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005d00:	61a3      	str	r3, [r4, #24]
 8005d02:	2001      	movs	r0, #1
}
 8005d04:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005d06:	f7ff ffc7 	bl	8005c98 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005d0a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005d0c:	429d      	cmp	r5, r3
 8005d0e:	dce0      	bgt.n	8005cd2 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005d10:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005d14:	42ab      	cmp	r3, r5
 8005d16:	dcdc      	bgt.n	8005cd2 <STC_ExecRamp+0x22>
 8005d18:	e7e8      	b.n	8005cec <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005d1a:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8005d1c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005d1e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8005d22:	4e06      	ldr	r6, [pc, #24]	; (8005d3c <STC_ExecRamp+0x8c>)
 8005d24:	fba6 2303 	umull	r2, r3, r6, r3
 8005d28:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8005d2a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005d2c:	1a28      	subs	r0, r5, r0
 8005d2e:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8005d30:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005d32:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8005d36:	61a0      	str	r0, [r4, #24]
 8005d38:	2001      	movs	r0, #1
}
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	10624dd3 	.word	0x10624dd3

08005d40 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005d44:	6183      	str	r3, [r0, #24]
}
 8005d46:	4770      	bx	lr

08005d48 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8005d4a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005d4e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005d50:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	bf08      	it	eq
 8005d56:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8005d58:	2b01      	cmp	r3, #1
{
 8005d5a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8005d5c:	d90c      	bls.n	8005d78 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005d5e:	6981      	ldr	r1, [r0, #24]
 8005d60:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005d62:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005d64:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8005d66:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005d68:	4630      	mov	r0, r6
 8005d6a:	db09      	blt.n	8005d80 <STC_CalcTorqueReference+0x38>
 8005d6c:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005d6e:	2a01      	cmp	r2, #1
 8005d70:	d00a      	beq.n	8005d88 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005d72:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005d74:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8005d78:	d012      	beq.n	8005da0 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	daf5      	bge.n	8005d6c <STC_CalcTorqueReference+0x24>
 8005d80:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8005d84:	30ff      	adds	r0, #255	; 0xff
 8005d86:	e7f1      	b.n	8005d6c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005d88:	6960      	ldr	r0, [r4, #20]
 8005d8a:	f7ff ff15 	bl	8005bb8 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8005d8e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005d90:	b209      	sxth	r1, r1
 8005d92:	6920      	ldr	r0, [r4, #16]
 8005d94:	f7fe ff7a 	bl	8004c8c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005d98:	0403      	lsls	r3, r0, #16
 8005d9a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005da0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8005da4:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005da6:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8005da8:	60c3      	str	r3, [r0, #12]
 8005daa:	e7e0      	b.n	8005d6e <STC_CalcTorqueReference+0x26>

08005dac <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8005dac:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop

08005db4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8005db4:	8bc0      	ldrh	r0, [r0, #30]
 8005db6:	4770      	bx	lr

08005db8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8005db8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8005dc0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	b299      	uxth	r1, r3
 8005dc8:	f361 020f 	bfi	r2, r1, #0, #16
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f363 421f 	bfi	r2, r3, #16, #16
{
 8005dd2:	b082      	sub	sp, #8
}
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	b002      	add	sp, #8
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop

08005ddc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005de0:	6940      	ldr	r0, [r0, #20]
 8005de2:	f7ff fee9 	bl	8005bb8 <SPD_GetAvrgMecSpeedUnit>
 8005de6:	0400      	lsls	r0, r0, #16
 8005de8:	6060      	str	r0, [r4, #4]
}
 8005dea:	bd10      	pop	{r4, pc}

08005dec <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005df0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005df8:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005dfa:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 8005e04:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 8005e06:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005e0a:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8005e0c:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005e0e:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005e10:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8005e12:	d006      	beq.n	8005e22 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005e14:	b90a      	cbnz	r2, 8005e1a <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	7003      	strb	r3, [r0, #0]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	d1f7      	bne.n	8005e16 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 8005e26:	230b      	movs	r3, #11
 8005e28:	7003      	strb	r3, [r0, #0]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop

08005e30 <STM_NextState>:
{
 8005e30:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8005e32:	7803      	ldrb	r3, [r0, #0]
 8005e34:	2b14      	cmp	r3, #20
 8005e36:	d810      	bhi.n	8005e5a <STM_NextState+0x2a>
 8005e38:	e8df f003 	tbb	[pc, r3]
 8005e3c:	200d3457 	.word	0x200d3457
 8005e40:	500d532a 	.word	0x500d532a
 8005e44:	0f0f484d 	.word	0x0f0f484d
 8005e48:	455e0b1b 	.word	0x455e0b1b
 8005e4c:	3b3f6342 	.word	0x3b3f6342
 8005e50:	31          	.byte	0x31
 8005e51:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005e52:	290e      	cmp	r1, #14
 8005e54:	d00f      	beq.n	8005e76 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8005e56:	2907      	cmp	r1, #7
 8005e58:	d00d      	beq.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005e5a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d014      	beq.n	8005e8c <STM_NextState+0x5c>
 8005e62:	2907      	cmp	r1, #7
 8005e64:	d012      	beq.n	8005e8c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	f7ff ffc5 	bl	8005df8 <STM_FaultProcessing>
 8005e6e:	2000      	movs	r0, #0
}
 8005e70:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8005e72:	2900      	cmp	r1, #0
 8005e74:	d1f1      	bne.n	8005e5a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8005e76:	7001      	strb	r1, [r0, #0]
 8005e78:	2001      	movs	r0, #1
}
 8005e7a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005e7c:	2911      	cmp	r1, #17
 8005e7e:	d8f2      	bhi.n	8005e66 <STM_NextState+0x36>
 8005e80:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <STM_NextState+0xe0>)
 8005e82:	40cb      	lsrs	r3, r1
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	d4f6      	bmi.n	8005e76 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005e88:	2903      	cmp	r1, #3
 8005e8a:	d1ec      	bne.n	8005e66 <STM_NextState+0x36>
 8005e8c:	2000      	movs	r0, #0
}
 8005e8e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005e90:	2913      	cmp	r1, #19
 8005e92:	d0f0      	beq.n	8005e76 <STM_NextState+0x46>
 8005e94:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d1e0      	bne.n	8005e5e <STM_NextState+0x2e>
 8005e9c:	e7eb      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005e9e:	2912      	cmp	r1, #18
 8005ea0:	d1d9      	bne.n	8005e56 <STM_NextState+0x26>
 8005ea2:	e7e8      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005ea4:	2907      	cmp	r1, #7
 8005ea6:	d0e6      	beq.n	8005e76 <STM_NextState+0x46>
 8005ea8:	f1a1 030d 	sub.w	r3, r1, #13
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d8d4      	bhi.n	8005e5a <STM_NextState+0x2a>
 8005eb0:	e7e1      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005eb2:	1f0b      	subs	r3, r1, #4
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d8ce      	bhi.n	8005e56 <STM_NextState+0x26>
 8005eb8:	e7dd      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005eba:	2904      	cmp	r1, #4
 8005ebc:	d1cb      	bne.n	8005e56 <STM_NextState+0x26>
 8005ebe:	e7da      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005ec0:	2911      	cmp	r1, #17
 8005ec2:	d1c8      	bne.n	8005e56 <STM_NextState+0x26>
 8005ec4:	e7d7      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005ec6:	2902      	cmp	r1, #2
 8005ec8:	d1c5      	bne.n	8005e56 <STM_NextState+0x26>
 8005eca:	e7d4      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	d0d2      	beq.n	8005e76 <STM_NextState+0x46>
 8005ed0:	290c      	cmp	r1, #12
 8005ed2:	d1c2      	bne.n	8005e5a <STM_NextState+0x2a>
 8005ed4:	e7cf      	b.n	8005e76 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8005ed6:	2909      	cmp	r1, #9
 8005ed8:	d1bf      	bne.n	8005e5a <STM_NextState+0x2a>
 8005eda:	e7cc      	b.n	8005e76 <STM_NextState+0x46>
      if ( bState == STOP )
 8005edc:	2908      	cmp	r1, #8
 8005ede:	d1bc      	bne.n	8005e5a <STM_NextState+0x2a>
 8005ee0:	e7c9      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005ee2:	1f8b      	subs	r3, r1, #6
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d8b8      	bhi.n	8005e5a <STM_NextState+0x2a>
 8005ee8:	e7c5      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005eea:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d0c1      	beq.n	8005e76 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8005ef2:	290c      	cmp	r1, #12
 8005ef4:	d1b5      	bne.n	8005e62 <STM_NextState+0x32>
 8005ef6:	e7be      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005ef8:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	d1ac      	bne.n	8005e5a <STM_NextState+0x2a>
 8005f00:	e7b9      	b.n	8005e76 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005f02:	2914      	cmp	r1, #20
 8005f04:	d8a9      	bhi.n	8005e5a <STM_NextState+0x2a>
 8005f06:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <STM_NextState+0xe4>)
 8005f08:	40cb      	lsrs	r3, r1
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d4b3      	bmi.n	8005e76 <STM_NextState+0x46>
 8005f0e:	e7a4      	b.n	8005e5a <STM_NextState+0x2a>
 8005f10:	00030092 	.word	0x00030092
 8005f14:	00140080 	.word	0x00140080

08005f18 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8005f18:	7800      	ldrb	r0, [r0, #0]
 8005f1a:	4770      	bx	lr

08005f1c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005f1c:	7803      	ldrb	r3, [r0, #0]
 8005f1e:	2b0b      	cmp	r3, #11
 8005f20:	d001      	beq.n	8005f26 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8005f22:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8005f24:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8005f26:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005f28:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8005f2a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005f2c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8005f2e:	2001      	movs	r0, #1
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop

08005f34 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005f34:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005f36:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8005f38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005f40:	f7fe b9d4 	b.w	80042ec <FCP_Init>

08005f44 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005f44:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
{
 8005f48:	4603      	mov	r3, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005f4a:	b172      	cbz	r2, 8005f6a <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005f4c:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8005f50:	b1e2      	cbz	r2, 8005f8c <UFCP_TX_IRQ_Handler+0x48>
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	d022      	beq.n	8005f9c <UFCP_TX_IRQ_Handler+0x58>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005f56:	7d41      	ldrb	r1, [r0, #21]
 8005f58:	3101      	adds	r1, #1
 8005f5a:	428a      	cmp	r2, r1
 8005f5c:	dc06      	bgt.n	8005f6c <UFCP_TX_IRQ_Handler+0x28>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005f5e:	1881      	adds	r1, r0, r2
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005f60:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005f64:	7d09      	ldrb	r1, [r1, #20]
 8005f66:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005f68:	e014      	b.n	8005f94 <UFCP_TX_IRQ_Handler+0x50>

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005f6a:	4770      	bx	lr
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005f6c:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8005f70:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8005f74:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005f76:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005f78:	f04f 0c00 	mov.w	ip, #0
 8005f7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f80:	60d1      	str	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005f82:	e9d0 0200 	ldrd	r0, r2, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005f86:	f883 c097 	strb.w	ip, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005f8a:	4710      	bx	r2
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005f8c:	7d01      	ldrb	r1, [r0, #20]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005f8e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  USARTx->DR = Value;
 8005f92:	6041      	str	r1, [r0, #4]
      pBaseHandle->TxFrameLevel++;
 8005f94:	3201      	adds	r2, #1
 8005f96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8005f9a:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005f9c:	7d41      	ldrb	r1, [r0, #21]
        break;
 8005f9e:	e7f6      	b.n	8005f8e <UFCP_TX_IRQ_Handler+0x4a>

08005fa0 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005fa0:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005fa4:	b10b      	cbz	r3, 8005faa <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005fa6:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005fa8:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005faa:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005fb4:	68d3      	ldr	r3, [r2, #12]
 8005fb6:	f043 0320 	orr.w	r3, r3, #32
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005fba:	2002      	movs	r0, #2
 8005fbc:	60d3      	str	r3, [r2, #12]
 8005fbe:	4770      	bx	lr

08005fc0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005fc4:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8005fc8:	b108      	cbz	r0, 8005fce <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005fca:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
    while ( size-- ) *dest++ = *buffer++;
 8005fce:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005fd0:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8005fd4:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8005fd6:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005fd8:	b2c0      	uxtb	r0, r0
 8005fda:	b343      	cbz	r3, 800602e <UFCP_Send+0x6e>
 8005fdc:	1c51      	adds	r1, r2, #1
 8005fde:	1a75      	subs	r5, r6, r1
 8005fe0:	2d02      	cmp	r5, #2
 8005fe2:	d938      	bls.n	8006056 <UFCP_Send+0x96>
 8005fe4:	2807      	cmp	r0, #7
 8005fe6:	d936      	bls.n	8006056 <UFCP_Send+0x96>
 8005fe8:	089d      	lsrs	r5, r3, #2
 8005fea:	3d01      	subs	r5, #1
 8005fec:	b2e9      	uxtb	r1, r5
 8005fee:	1d15      	adds	r5, r2, #4
 8005ff0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8005ff4:	46b4      	mov	ip, r6
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	f851 eb04 	ldr.w	lr, [r1], #4
 8005ffc:	f84c eb04 	str.w	lr, [ip], #4
 8006000:	42a9      	cmp	r1, r5
 8006002:	d1f9      	bne.n	8005ff8 <UFCP_Send+0x38>
 8006004:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8006008:	1a40      	subs	r0, r0, r1
 800600a:	428b      	cmp	r3, r1
 800600c:	b2c0      	uxtb	r0, r0
 800600e:	eb02 0c01 	add.w	ip, r2, r1
 8006012:	eb06 0501 	add.w	r5, r6, r1
 8006016:	d00a      	beq.n	800602e <UFCP_Send+0x6e>
 8006018:	5c53      	ldrb	r3, [r2, r1]
 800601a:	5473      	strb	r3, [r6, r1]
 800601c:	b138      	cbz	r0, 800602e <UFCP_Send+0x6e>
 800601e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8006022:	706b      	strb	r3, [r5, #1]
 8006024:	2801      	cmp	r0, #1
 8006026:	d002      	beq.n	800602e <UFCP_Send+0x6e>
 8006028:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800602c:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800602e:	f104 0014 	add.w	r0, r4, #20
 8006032:	f7fe f96f 	bl	8004314 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006036:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800603a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800603e:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006040:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006042:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006046:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800604a:	68d3      	ldr	r3, [r2, #12]
 800604c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006050:	2002      	movs	r0, #2
 8006052:	60d3      	str	r3, [r2, #12]
}
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	f104 0015 	add.w	r0, r4, #21
 800605a:	4413      	add	r3, r2
 800605c:	e000      	b.n	8006060 <UFCP_Send+0xa0>
 800605e:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8006060:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8006064:	f800 2f01 	strb.w	r2, [r0, #1]!
 8006068:	4299      	cmp	r1, r3
 800606a:	d1f8      	bne.n	800605e <UFCP_Send+0x9e>
 800606c:	e7df      	b.n	800602e <UFCP_Send+0x6e>
 800606e:	bf00      	nop

08006070 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006070:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006074:	b90b      	cbnz	r3, 800607a <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006076:	482d      	ldr	r0, [pc, #180]	; (800612c <UFCP_RX_IRQ_Handler+0xbc>)
}
 8006078:	4770      	bx	lr
{
 800607a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800607c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8006080:	b083      	sub	sp, #12
 8006082:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8006084:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006086:	b36b      	cbz	r3, 80060e4 <UFCP_RX_IRQ_Handler+0x74>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d035      	beq.n	80060f8 <UFCP_RX_IRQ_Handler+0x88>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800608c:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8006090:	3101      	adds	r1, #1
 8006092:	428b      	cmp	r3, r1
 8006094:	dc08      	bgt.n	80060a8 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006096:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8006098:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800609a:	4824      	ldr	r0, [pc, #144]	; (800612c <UFCP_RX_IRQ_Handler+0xbc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800609c:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 80060a0:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80060a4:	b003      	add	sp, #12
 80060a6:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80060a8:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80060ac:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80060b0:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 80060b2:	2200      	movs	r2, #0
 80060b4:	f023 0320 	bic.w	r3, r3, #32
 80060b8:	8242      	strh	r2, [r0, #18]
 80060ba:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80060bc:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80060be:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80060c2:	f7fe f927 	bl	8004314 <FCP_CalcCRC>
 80060c6:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80060ca:	4283      	cmp	r3, r0
 80060cc:	d122      	bne.n	8006114 <UFCP_RX_IRQ_Handler+0xa4>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80060ce:	6820      	ldr	r0, [r4, #0]
 80060d0:	68a5      	ldr	r5, [r4, #8]
 80060d2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80060d6:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80060da:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80060de:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80060e0:	4813      	ldr	r0, [pc, #76]	; (8006130 <UFCP_RX_IRQ_Handler+0xc0>)
 80060e2:	e7df      	b.n	80060a4 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80060e4:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80060e6:	4813      	ldr	r0, [pc, #76]	; (8006134 <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80060e8:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80060ec:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80060ee:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80060f0:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80060f4:	b003      	add	sp, #12
 80060f6:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80060f8:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80060fa:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80060fe:	d404      	bmi.n	800610a <UFCP_RX_IRQ_Handler+0x9a>
        pBaseHandle->RxFrameLevel++;
 8006100:	2302      	movs	r3, #2
 8006102:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006106:	4809      	ldr	r0, [pc, #36]	; (800612c <UFCP_RX_IRQ_Handler+0xbc>)
 8006108:	e7cc      	b.n	80060a4 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 800610a:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800610c:	4807      	ldr	r0, [pc, #28]	; (800612c <UFCP_RX_IRQ_Handler+0xbc>)
          pBaseHandle->RxFrameLevel =0 ;
 800610e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8006112:	e7c7      	b.n	80060a4 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8006114:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006116:	2301      	movs	r3, #1
 8006118:	f10d 0207 	add.w	r2, sp, #7
 800611c:	21ff      	movs	r1, #255	; 0xff
 800611e:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8006120:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006124:	f7ff ff4c 	bl	8005fc0 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800612a:	e7bb      	b.n	80060a4 <UFCP_RX_IRQ_Handler+0x34>
 800612c:	080064d0 	.word	0x080064d0
 8006130:	080064d4 	.word	0x080064d4
 8006134:	080064d2 	.word	0x080064d2

08006138 <UFCP_OVR_IRQ_Handler>:
{
 8006138:	b500      	push	{lr}
 800613a:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 800613c:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006140:	2301      	movs	r3, #1
 8006142:	f10d 0207 	add.w	r2, sp, #7
 8006146:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8006148:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800614c:	f7ff ff38 	bl	8005fc0 <UFCP_Send>
}
 8006150:	b003      	add	sp, #12
 8006152:	f85d fb04 	ldr.w	pc, [sp], #4
 8006156:	bf00      	nop

08006158 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006158:	2300      	movs	r3, #0
 800615a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800615e:	4770      	bx	lr

08006160 <RUC_SetPhaseDurationms>:
 8006160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006164:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006168:	818a      	strh	r2, [r1, #12]
 800616a:	4770      	bx	lr

0800616c <RUC_SetPhaseFinalMecSpeedUnit>:
 800616c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006174:	81ca      	strh	r2, [r1, #14]
 8006176:	4770      	bx	lr

08006178 <RUC_SetPhaseFinalTorque>:
 8006178:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800617c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006180:	820a      	strh	r2, [r1, #16]
 8006182:	4770      	bx	lr

08006184 <RUC_GetPhaseDurationms>:
 8006184:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006188:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800618c:	8988      	ldrh	r0, [r1, #12]
 800618e:	4770      	bx	lr

08006190 <RUC_GetPhaseFinalMecSpeedUnit>:
 8006190:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006194:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006198:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop

080061a0 <RUC_GetPhaseFinalTorque>:
 80061a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80061a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061a8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop

080061b0 <RUC_GetNumberOfPhases>:
 80061b0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f000 f820 	bl	8006210 <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	080064e0 	.word	0x080064e0
 80061f4:	080064e0 	.word	0x080064e0
 80061f8:	080064e0 	.word	0x080064e0
 80061fc:	080064e4 	.word	0x080064e4

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
